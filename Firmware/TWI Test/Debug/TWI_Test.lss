
TWI_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dcc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000dcc  00000e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001758  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000052e  00000000  00000000  000025d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00002b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001690  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024b  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084e  00000000  00000000  00004483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00004cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000155  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001056  00000000  00000000  00004f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00005f83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec ec       	ldi	r30, 0xCC	; 204
  36:	fd e0       	ldi	r31, 0x0D	; 13
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 3a       	cpi	r26, 0xA0	; 160
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 ea       	ldi	r26, 0xA0	; 160
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 3a       	cpi	r26, 0xA0	; 160
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	a6 d1       	rcall	.+844    	; 0x3a2 <main>
  56:	b8 c6       	rjmp	.+3440   	; 0xdc8 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
  5a:	00 c0       	rjmp	.+0      	; 0x5c <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
  5c:	00 c0       	rjmp	.+0      	; 0x5e <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
  5e:	00 c0       	rjmp	.+0      	; 0x60 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
  60:	00 c0       	rjmp	.+0      	; 0x62 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
  62:	00 c0       	rjmp	.+0      	; 0x64 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
  64:	00 c0       	rjmp	.+0      	; 0x66 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
  66:	00 00       	nop
	ret          ; 3   "
  68:	08 95       	ret

0000006a <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
  6a:	d6 98       	cbi	0x1a, 6	; 26
	cbi SCL_DDR,SCL		;release SCL
  6c:	d4 98       	cbi	0x1a, 4	; 26
	cbi SDA_OUT,SDA
  6e:	de 98       	cbi	0x1b, 6	; 27
	cbi SCL_OUT,SCL
  70:	dc 98       	cbi	0x1b, 4	; 27
	ret
  72:	08 95       	ret

00000074 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
  74:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay T/2
  76:	f1 df       	rcall	.-30     	; 0x5a <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
  78:	1d d0       	rcall	.+58     	; 0xb4 <i2c_write>
	ret
  7a:	08 95       	ret

0000007c <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
  7c:	d4 9a       	sbi	0x1a, 4	; 26
	rcall 	i2c_delay_T2	;delay  T/2
  7e:	ed df       	rcall	.-38     	; 0x5a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  80:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
  82:	eb df       	rcall	.-42     	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  84:	d4 98       	cbi	0x1a, 4	; 26
	rcall 	i2c_delay_T2	;delay  T/2
  86:	e9 df       	rcall	.-46     	; 0x5a <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
  88:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay	T/2
  8a:	e7 df       	rcall	.-50     	; 0x5a <i2c_delay_T2>
	
	rcall	i2c_write	;write address
  8c:	13 d0       	rcall	.+38     	; 0xb4 <i2c_write>
	ret
  8e:	08 95       	ret

00000090 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
  90:	08 2e       	mov	r0, r24

00000092 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
  92:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay T/2
  94:	e2 df       	rcall	.-60     	; 0x5a <i2c_delay_T2>
	mov	r24,__tmp_reg__
  96:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
  98:	0d d0       	rcall	.+26     	; 0xb4 <i2c_write>
	tst	r24		;if device not busy -> done
  9a:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
  9c:	11 f0       	breq	.+4      	; 0xa2 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
  9e:	02 d0       	rcall	.+4      	; 0xa4 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
  a0:	f8 cf       	rjmp	.-16     	; 0x92 <i2c_start_wait1>

000000a2 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
  a2:	08 95       	ret

000000a4 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
  a4:	d4 9a       	sbi	0x1a, 4	; 26
	sbi	SDA_DDR,SDA	;force SDA low
  a6:	d6 9a       	sbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
  a8:	d8 df       	rcall	.-80     	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  aa:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
  ac:	d6 df       	rcall	.-84     	; 0x5a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  ae:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
  b0:	d4 df       	rcall	.-88     	; 0x5a <i2c_delay_T2>
	ret
  b2:	08 95       	ret

000000b4 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
  b4:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
  b6:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
  b8:	01 c0       	rjmp	.+2      	; 0xbc <i2c_write_first>

000000ba <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
  ba:	88 0f       	add	r24, r24

000000bc <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
  bc:	59 f0       	breq	.+22     	; 0xd4 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
  be:	d4 9a       	sbi	0x1a, 4	; 26
	brcc	i2c_write_low
  c0:	18 f4       	brcc	.+6      	; 0xc8 <i2c_write_low>
	nop
  c2:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
  c4:	d6 98       	cbi	0x1a, 6	; 26
	rjmp	i2c_write_high
  c6:	02 c0       	rjmp	.+4      	; 0xcc <i2c_write_high>

000000c8 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
  c8:	d6 9a       	sbi	0x1a, 6	; 26
	rjmp	i2c_write_high
  ca:	00 c0       	rjmp	.+0      	; 0xcc <i2c_write_high>

000000cc <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
  cc:	c6 df       	rcall	.-116    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  ce:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
  d0:	c4 df       	rcall	.-120    	; 0x5a <i2c_delay_T2>
	rjmp	i2c_write_bit
  d2:	f3 cf       	rjmp	.-26     	; 0xba <i2c_write_bit>

000000d4 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
  d4:	d4 9a       	sbi	0x1a, 4	; 26
	cbi	SDA_DDR,SDA	;release SDA
  d6:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
  d8:	c0 df       	rcall	.-128    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  da:	d4 98       	cbi	0x1a, 4	; 26

000000dc <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
  dc:	cc 9b       	sbis	0x19, 4	; 25
	rjmp	i2c_ack_wait
  de:	fe cf       	rjmp	.-4      	; 0xdc <i2c_ack_wait>
	
	clr	r24		;return 0
  e0:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
  e2:	ce 99       	sbic	0x19, 6	; 25
	ldi	r24,1
  e4:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
  e6:	b9 df       	rcall	.-142    	; 0x5a <i2c_delay_T2>
	clr	r25
  e8:	99 27       	eor	r25, r25
	ret
  ea:	08 95       	ret

000000ec <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
  ec:	88 27       	eor	r24, r24
	rjmp	i2c_read
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <i2c_read>

000000f0 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
  f0:	81 e0       	ldi	r24, 0x01	; 1

000000f2 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
  f2:	71 e0       	ldi	r23, 0x01	; 1

000000f4 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
  f4:	d4 9a       	sbi	0x1a, 4	; 26
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
  f6:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
  f8:	b0 df       	rcall	.-160    	; 0x5a <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
  fa:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
  fc:	ae df       	rcall	.-164    	; 0x5a <i2c_delay_T2>

000000fe <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
  fe:	cc 9b       	sbis	0x19, 4	; 25
    rjmp	i2c_read_stretch
 100:	fe cf       	rjmp	.-4      	; 0xfe <i2c_read_stretch>
    	
	clc			;clear carry flag
 102:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
 104:	ce 99       	sbic	0x19, 6	; 25
	sec			;  set carry flag
 106:	08 94       	sec
	
	rol	r23		;store bit
 108:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
 10a:	a0 f7       	brcc	.-24     	; 0xf4 <i2c_read_bit>

0000010c <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
 10c:	d4 9a       	sbi	0x1a, 4	; 26
	cpi	r24,1
 10e:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
 110:	11 f0       	breq	.+4      	; 0x116 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
 112:	d6 98       	cbi	0x1a, 6	; 26
	rjmp	i2c_put_ack_high
 114:	01 c0       	rjmp	.+2      	; 0x118 <i2c_put_ack_high>

00000116 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
 116:	d6 9a       	sbi	0x1a, 6	; 26

00000118 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
 118:	a0 df       	rcall	.-192    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 11a:	d4 98       	cbi	0x1a, 4	; 26

0000011c <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
 11c:	cc 9b       	sbis	0x19, 4	; 25
	rjmp	i2c_put_ack_wait
 11e:	fe cf       	rjmp	.-4      	; 0x11c <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
 120:	9c df       	rcall	.-200    	; 0x5a <i2c_delay_T2>
	mov	r24,r23
 122:	87 2f       	mov	r24, r23
	clr	r25
 124:	99 27       	eor	r25, r25
	ret
 126:	08 95       	ret

00000128 <pca9685_init2>:
	0b000000110000     // Channel 15
};


void pca9685_init2(int address)
{
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	d8 2f       	mov	r29, r24
	/********************************************/
	/* Init code for the PCA9685                */
	/* Input:[address of the pc9685 to init]    */
	/* Output:[void]                            */
	/********************************************/
	i2c_start(address);                // Start
 132:	a0 df       	rcall	.-192    	; 0x74 <i2c_start>
	i2c_write(MODE1);           // Mode 1 address
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	be df       	rcall	.-132    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_RESTART);      // Setting mode to sleep so we can change the default PWM frequency
 138:	80 e8       	ldi	r24, 0x80	; 128
 13a:	bc df       	rcall	.-136    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
 13c:	b3 df       	rcall	.-154    	; 0xa4 <i2c_stop>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13e:	06 e9       	ldi	r16, 0x96	; 150
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	c8 01       	movw	r24, r16
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <pca9685_init2+0x1c>
	
	_delay_loop_2(150);           // Required 50 us delay
	
	i2c_start(address);                // Start
 148:	8d 2f       	mov	r24, r29
 14a:	94 df       	rcall	.-216    	; 0x74 <i2c_start>
	i2c_write(MODE1);            // PWM frequency PRE_SCALE address
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	b2 df       	rcall	.-156    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_AI);            // osc_clk/(4096*update_rate) // 25000000/(4096*1500)= 4.069 ~4
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	b0 df       	rcall	.-160    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
 154:	a7 df       	rcall	.-178    	; 0xa4 <i2c_stop>
 156:	c8 01       	movw	r24, r16
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <pca9685_init2+0x30>
	
	_delay_loop_2(150);           // delay at least 500 us
	
	i2c_start(address);                // Start
 15c:	8d 2f       	mov	r24, r29
 15e:	8a df       	rcall	.-236    	; 0x74 <i2c_start>
	i2c_write(MODE2);           // Mode 1 register address
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	a8 df       	rcall	.-176    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_INVRT);            // Set to our preferred mode[ Reset, INT_CLK, Auto-Increment, Normal Mode]
 164:	80 e1       	ldi	r24, 0x10	; 16
 166:	a6 df       	rcall	.-180    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
 168:	9d df       	rcall	.-198    	; 0xa4 <i2c_stop>
 16a:	80 e1       	ldi	r24, 0x10	; 16
 16c:	97 e2       	ldi	r25, 0x27	; 39
 16e:	fc 01       	movw	r30, r24
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <pca9685_init2+0x48>
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <pca9685_init2+0x4c>
 178:	c6 e0       	ldi	r28, 0x06	; 6
 17a:	00 e1       	ldi	r16, 0x10	; 16
 17c:	17 e2       	ldi	r17, 0x27	; 39
	_delay_loop_2(10000);           // delay at least 500 us
	
	
	for(int i = 0; i <= LEDCOUNT; i++)
	{
		i2c_start(address);                // Start
 17e:	8d 2f       	mov	r24, r29
 180:	79 df       	rcall	.-270    	; 0x74 <i2c_start>
		i2c_write(LED0_ON_L + 4 * i);
 182:	8c 2f       	mov	r24, r28
 184:	97 df       	rcall	.-210    	; 0xb4 <i2c_write>
		i2c_write(0x00);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	95 df       	rcall	.-214    	; 0xb4 <i2c_write>
		i2c_write(0x00);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	93 df       	rcall	.-218    	; 0xb4 <i2c_write>
		i2c_write(0x10);
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	91 df       	rcall	.-222    	; 0xb4 <i2c_write>
		i2c_write(0x50);
 192:	80 e5       	ldi	r24, 0x50	; 80
 194:	8f df       	rcall	.-226    	; 0xb4 <i2c_write>
		i2c_stop();                 // Stop
 196:	86 df       	rcall	.-244    	; 0xa4 <i2c_stop>
 198:	c8 01       	movw	r24, r16
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <pca9685_init2+0x72>
 19e:	c8 01       	movw	r24, r16
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <pca9685_init2+0x78>
 1a4:	cc 5f       	subi	r28, 0xFC	; 252
	
	_delay_loop_2(10000);           // delay at least 500 us
	_delay_loop_2(10000);           // delay at least 500 us
	
	
	for(int i = 0; i <= LEDCOUNT; i++)
 1a6:	c6 34       	cpi	r28, 0x46	; 70
 1a8:	51 f7       	brne	.-44     	; 0x17e <pca9685_init2+0x56>
		_delay_loop_2(10000);           // delay at least 500 us
		_delay_loop_2(10000);           // delay at least 500 us
		
	}
	
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <pca9685_init>:



void pca9685_init(int address)
{
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
	/********************************************/
	/* Init code for the PCA9685                */
	/* Input:[address of the pc9685 to init]    */
	/* Output:[void]                            */
	/********************************************/
	i2c_start(address);                // Start
 1bc:	5b df       	rcall	.-330    	; 0x74 <i2c_start>
	i2c_write(MODE1);           // Mode 1 address
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	79 df       	rcall	.-270    	; 0xb4 <i2c_write>
	i2c_write(0b00110001);      // Setting mode to sleep so we can change the default PWM frequency
 1c2:	81 e3       	ldi	r24, 0x31	; 49
 1c4:	77 df       	rcall	.-274    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
 1c6:	6e df       	rcall	.-292    	; 0xa4 <i2c_stop>
 1c8:	06 e9       	ldi	r16, 0x96	; 150
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	c8 01       	movw	r24, r16
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <pca9685_init+0x1a>
	_delay_loop_2(150);           // Required 50 us delay
	i2c_start(address);                // Start
 1d2:	8c 2f       	mov	r24, r28
 1d4:	4f df       	rcall	.-354    	; 0x74 <i2c_start>
	i2c_write(0xfe);            // PWM frequency PRE_SCALE address
 1d6:	8e ef       	ldi	r24, 0xFE	; 254
 1d8:	6d df       	rcall	.-294    	; 0xb4 <i2c_write>
	i2c_write(0x04);            // osc_clk/(4096*update_rate) // 25000000/(4096*1500)= 4.069 ~4
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	6b df       	rcall	.-298    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
 1de:	62 df       	rcall	.-316    	; 0xa4 <i2c_stop>
 1e0:	c8 01       	movw	r24, r16
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <pca9685_init+0x2e>
	_delay_loop_2(150);           // delay at least 500 us
	i2c_start(address);                // Start
 1e6:	8c 2f       	mov	r24, r28
 1e8:	45 df       	rcall	.-374    	; 0x74 <i2c_start>
	i2c_write(MODE1);           // Mode 1 register address
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	63 df       	rcall	.-314    	; 0xb4 <i2c_write>
	i2c_write(0xa1);            // Set to our preferred mode[ Reset, INT_CLK, Auto-Increment, Normal Mode]
 1ee:	81 ea       	ldi	r24, 0xA1	; 161
 1f0:	61 df       	rcall	.-318    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
 1f2:	58 df       	rcall	.-336    	; 0xa4 <i2c_stop>
 1f4:	c8 01       	movw	r24, r16
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <pca9685_init+0x42>
	_delay_loop_2(150);           // delay at least 500 us
	i2c_start(address);                // Start
 1fa:	8c 2f       	mov	r24, r28
 1fc:	3b df       	rcall	.-394    	; 0x74 <i2c_start>
	i2c_write(MODE2);           // Mode2 register address
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	59 df       	rcall	.-334    	; 0xb4 <i2c_write>
	i2c_write(0b00000100);      // Set to our preferred mode[Output logic state not inverted, Outputs change on STOP,
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	57 df       	rcall	.-338    	; 0xb4 <i2c_write>
	i2c_stop();                 // totem pole structure, When OE = 1 (output drivers not enabled), LEDn = 0]
 206:	4e df       	rcall	.-356    	; 0xa4 <i2c_stop>
}
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	08 95       	ret

00000210 <pca9685_send_all>:


void pca9685_send_all(int address) 
{ 
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	08 2f       	mov	r16, r24
 222:	0f 2e       	mov	r0, r31
 224:	f0 e6       	ldi	r31, 0x60	; 96
 226:	ef 2e       	mov	r14, r31
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ff 2e       	mov	r15, r31
 22c:	f0 2d       	mov	r31, r0
 22e:	16 e0       	ldi	r17, 0x06	; 6
 230:	0f 2e       	mov	r0, r31
 232:	f6 e9       	ldi	r31, 0x96	; 150
 234:	cf 2e       	mov	r12, r31
 236:	dd 24       	eor	r13, r13
 238:	f0 2d       	mov	r31, r0
    int i = 0;                  // temp register for LEDCOUNT 
    int pwm;                    // temp register for PWM 
    for(i=0; i<=LEDCOUNT; i++)  // cycle through all 16 LED 
   
	 {
		 i2c_start(address);            // Start
 23a:	80 2f       	mov	r24, r16
 23c:	1b df       	rcall	.-458    	; 0x74 <i2c_start>
		 i2c_write(LED0_ON_L + 4 * i);// start from LED0 address, each pwm constructed from
 23e:	81 2f       	mov	r24, r17
 240:	39 df       	rcall	.-398    	; 0xb4 <i2c_write>
		 i2c_write(0x00);        // 4 12bit register, LED_ON_L
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	37 df       	rcall	.-402    	; 0xb4 <i2c_write>
		 i2c_write(0x00);        // LED_ON_H
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	35 df       	rcall	.-406    	; 0xb4 <i2c_write>
	i2c_write(0b00000100);      // Set to our preferred mode[Output logic state not inverted, Outputs change on STOP,
	i2c_stop();                 // totem pole structure, When OE = 1 (output drivers not enabled), LEDn = 0]
}


void pca9685_send_all(int address) 
 24a:	e7 01       	movw	r28, r14
		 i2c_start(address);            // Start
		 i2c_write(LED0_ON_L + 4 * i);// start from LED0 address, each pwm constructed from
		 i2c_write(0x00);        // 4 12bit register, LED_ON_L
		 i2c_write(0x00);        // LED_ON_H
		 pwm = PWMData[i];       // update selected LED data in the array
		 i2c_write(pwm);         // LED_OFF_L
 24c:	88 81       	ld	r24, Y
 24e:	32 df       	rcall	.-412    	; 0xb4 <i2c_write>
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	e8 0e       	add	r14, r24
 256:	f9 1e       	adc	r15, r25
		 pwm = PWMData[i]>>8;    // update selected LED data in the array
		 i2c_write(pwm);         // LED_OFF_H
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	2c df       	rcall	.-424    	; 0xb4 <i2c_write>
		 i2c_stop();             // Stop
 25c:	23 df       	rcall	.-442    	; 0xa4 <i2c_stop>
 25e:	c6 01       	movw	r24, r12
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <__stack+0x1>
 264:	1c 5f       	subi	r17, 0xFC	; 252
/* Input:[address of the pc9685 to update]  */ 
/* Output:[void]                            */ 
/********************************************/ 
    int i = 0;                  // temp register for LEDCOUNT 
    int pwm;                    // temp register for PWM 
    for(i=0; i<=LEDCOUNT; i++)  // cycle through all 16 LED 
 266:	16 34       	cpi	r17, 0x46	; 70
 268:	41 f7       	brne	.-48     	; 0x23a <pca9685_send_all+0x2a>
		 i2c_stop();             // Stop
		 _delay_loop_2(150);           // delay at least 500 us

	 }
	 
} 
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	08 95       	ret

0000027c <pca9685_send>:

void pca9685_send(int address, long value, int led) 
{ 
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	c2 2f       	mov	r28, r18
 28a:	d3 2f       	mov	r29, r19
 28c:	c4 2e       	mov	r12, r20
 28e:	d5 2e       	mov	r13, r21
 290:	e6 2e       	mov	r14, r22
 292:	f7 2e       	mov	r15, r23
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	c9 16       	cp	r12, r25
 298:	90 e1       	ldi	r25, 0x10	; 16
 29a:	d9 06       	cpc	r13, r25
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	e9 06       	cpc	r14, r25
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	f9 06       	cpc	r15, r25
 2a4:	54 f0       	brlt	.+20     	; 0x2ba <pca9685_send+0x3e>
 2a6:	0f 2e       	mov	r0, r31
 2a8:	ff ef       	ldi	r31, 0xFF	; 255
 2aa:	cf 2e       	mov	r12, r31
 2ac:	ff e0       	ldi	r31, 0x0F	; 15
 2ae:	df 2e       	mov	r13, r31
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ef 2e       	mov	r14, r31
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	ff 2e       	mov	r15, r31
 2b8:	f0 2d       	mov	r31, r0
    int pwm;                    // temp variable for PWM 
    if(value > 4095)            // if larger than 4095 than full on 
            value = 4095;       // cant be larger than 4095 
    if(led > 15)                // if LED larger than 15 than on other chip 
            led = 15;           //***** need to implement to select next pcs9685 
    i2c_start(address);                // Start 
 2ba:	dc de       	rcall	.-584    	; 0x74 <i2c_start>
    i2c_write(LED0_ON_L + 4 * led);  // select selected LED address 
 2bc:	8c 2f       	mov	r24, r28
 2be:	9d 2f       	mov	r25, r29
 2c0:	80 31       	cpi	r24, 0x10	; 16
 2c2:	91 05       	cpc	r25, r1
 2c4:	14 f0       	brlt	.+4      	; 0x2ca <pca9685_send+0x4e>
 2c6:	8f e0       	ldi	r24, 0x0F	; 15
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	88 0f       	add	r24, r24
 2cc:	88 0f       	add	r24, r24
 2ce:	8a 5f       	subi	r24, 0xFA	; 250
 2d0:	f1 de       	rcall	.-542    	; 0xb4 <i2c_write>
    i2c_write(0x00);            // LED_ON_L 
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	ef de       	rcall	.-546    	; 0xb4 <i2c_write>
    i2c_write(0x00);            // LED_ON_H 
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	ed de       	rcall	.-550    	; 0xb4 <i2c_write>
    pwm = value;                // PWM value lo byte 
    i2c_write(pwm);             // LED_OFF_L 
 2da:	8c 2d       	mov	r24, r12
 2dc:	eb de       	rcall	.-554    	; 0xb4 <i2c_write>
    pwm = value>>8;             // pwm 16 bit long, now shift upper 8 to lower 8 
    i2c_write(pwm);             // LED_OFF_H 
 2de:	8d 2d       	mov	r24, r13
 2e0:	e9 de       	rcall	.-558    	; 0xb4 <i2c_write>
    i2c_stop();                 // STop 
 2e2:	e0 de       	rcall	.-576    	; 0xa4 <i2c_stop>
} 
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	df 90       	pop	r13
 2ee:	cf 90       	pop	r12
 2f0:	08 95       	ret

000002f2 <pca9685_brightness>:


void pca9685_brightness(int address, int percent, int led) 
{ 
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	8c 01       	movw	r16, r24
 2fc:	ea 01       	movw	r28, r20
/* LED to set brightness 0to15]             */ 
/* Output:[void]                            */ 
/********************************************/ 
    float off;                          // temp variable 
    const float onePercent = 40.96; 
    if (percent < 1) {                  // if % less than 1 than LED OFF 
 2fe:	16 16       	cp	r1, r22
 300:	17 06       	cpc	r1, r23
 302:	8c f0       	brlt	.+34     	; 0x326 <pca9685_brightness+0x34>
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
 304:	fa 01       	movw	r30, r20
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	e0 5a       	subi	r30, 0xA0	; 160
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	10 82       	st	Z, r1
 314:	11 82       	std	Z+1, r1	; 0x01
 316:	12 82       	std	Z+2, r1	; 0x02
 318:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,0,led);        // update selected LED 
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	ba 01       	movw	r22, r20
 320:	9e 01       	movw	r18, r28
 322:	ac df       	rcall	.-168    	; 0x27c <pca9685_send>
    return;                             // return from function 
 324:	30 c0       	rjmp	.+96     	; 0x386 <pca9685_brightness+0x94>
    } 
    if (percent >= 100) {               // if % greater than 100 than LED ON 
 326:	64 36       	cpi	r22, 0x64	; 100
 328:	71 05       	cpc	r23, r1
 32a:	94 f0       	brlt	.+36     	; 0x350 <pca9685_brightness+0x5e>
    PWMData[led] = PCA9685_LED_ON>>8;   // update data in array 
 32c:	fa 01       	movw	r30, r20
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	e0 5a       	subi	r30, 0xA0	; 160
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	10 82       	st	Z, r1
 33c:	11 82       	std	Z+1, r1	; 0x01
 33e:	12 82       	std	Z+2, r1	; 0x02
 340:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,4095,led);     // update selected LED 
 342:	4f ef       	ldi	r20, 0xFF	; 255
 344:	5f e0       	ldi	r21, 0x0F	; 15
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	9e 01       	movw	r18, r28
 34c:	97 df       	rcall	.-210    	; 0x27c <pca9685_send>
    return;                             // return from function 
 34e:	1b c0       	rjmp	.+54     	; 0x386 <pca9685_brightness+0x94>
    } 
    off = onePercent * percent;         // different approach with float need to check if code faster than int32 way ? 
 350:	88 27       	eor	r24, r24
 352:	77 fd       	sbrc	r23, 7
 354:	80 95       	com	r24
 356:	98 2f       	mov	r25, r24
 358:	40 d4       	rcall	.+2176   	; 0xbda <__floatsisf>
 35a:	2a e0       	ldi	r18, 0x0A	; 10
 35c:	37 ed       	ldi	r19, 0xD7	; 215
 35e:	43 e2       	ldi	r20, 0x23	; 35
 360:	52 e4       	ldi	r21, 0x42	; 66
 362:	9f d4       	rcall	.+2366   	; 0xca2 <__mulsf3>
//    off = (int32)4096 * percent;        // calculate percent (max*percent)/100 
//    off = off / 100;                    // ex (4096*50%)=204800/100=2048 
//    x = make16(off>>8,off);             // make 16 of 32 ?! why.. dont care at this time 
    PWMData[led] = off;                 // update data array in case we update all LED next 
 364:	07 d4       	rcall	.+2062   	; 0xb74 <__fixsfsi>
 366:	ab 01       	movw	r20, r22
 368:	bc 01       	movw	r22, r24
 36a:	fe 01       	movw	r30, r28
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	e0 5a       	subi	r30, 0xA0	; 160
 376:	ff 4f       	sbci	r31, 0xFF	; 255
 378:	40 83       	st	Z, r20
 37a:	51 83       	std	Z+1, r21	; 0x01
 37c:	62 83       	std	Z+2, r22	; 0x02
 37e:	73 83       	std	Z+3, r23	; 0x03
    pca9685_send(address,off,led);      // send it to pca9685 
 380:	c8 01       	movw	r24, r16
 382:	9e 01       	movw	r18, r28
 384:	7b df       	rcall	.-266    	; 0x27c <pca9685_send>
} 
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	08 95       	ret

00000390 <PCA9685AllLedOff>:

void PCA9685AllLedOff(int address) 
{ 
    i2c_start(address);                        // Start 
 390:	71 de       	rcall	.-798    	; 0x74 <i2c_start>
    i2c_write(ALL_LED_OFF_L);         // AllLED Off register 
 392:	8c ef       	ldi	r24, 0xFC	; 252
 394:	8f de       	rcall	.-738    	; 0xb4 <i2c_write>
    i2c_write(0b00000000);              // data 
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	8d de       	rcall	.-742    	; 0xb4 <i2c_write>
    i2c_write(0b00010000);              // data 
 39a:	80 e1       	ldi	r24, 0x10	; 16
 39c:	8b de       	rcall	.-746    	; 0xb4 <i2c_write>
    i2c_stop();                         // Stop 
 39e:	82 de       	rcall	.-764    	; 0xa4 <i2c_stop>
} 
 3a0:	08 95       	ret

000003a2 <main>:
{
	
	char modeStatus = 2;
	
	
	i2c_init();                             // initialize I2C library
 3a2:	63 de       	rcall	.-826    	; 0x6a <i2c_init>
 3a4:	84 e6       	ldi	r24, 0x64	; 100
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <main+0x6>
	_delay_loop_2(100);           // delay
	
	pca9685_init2(PCA9685);
 3ac:	8a ea       	ldi	r24, 0xAA	; 170
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	bb de       	rcall	.-650    	; 0x128 <pca9685_init2>
 3b2:	80 e1       	ldi	r24, 0x10	; 16
 3b4:	97 e2       	ldi	r25, 0x27	; 39
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <main+0x14>
	_delay_loop_2(10000);           // delay

	pca9685_brightness(PCA9685,50,15);
 3ba:	8a ea       	ldi	r24, 0xAA	; 170
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	62 e3       	ldi	r22, 0x32	; 50
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	4f e0       	ldi	r20, 0x0F	; 15
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	95 df       	rcall	.-214    	; 0x2f2 <pca9685_brightness>


int main(void)
{
	
	char modeStatus = 2;
 3c8:	dd 24       	eor	r13, r13
 3ca:	68 94       	set
 3cc:	d1 f8       	bld	r13, 1
 3ce:	00 e1       	ldi	r16, 0x10	; 16
 3d0:	17 e2       	ldi	r17, 0x27	; 39
		
		
		if (modeStatus == 0) // check what the current mode is, and modify the animation based on that
		{			
		
			for(int i = 3; i <= 5; i++)
 3d2:	ee 24       	eor	r14, r14
 3d4:	ff 24       	eor	r15, r15
				_delay_loop_2(10000);           // delay
				_delay_loop_2(10000);           // delay

			}
		
			for(int i = 0; i <= 2; i++)
 3d6:	0f 2e       	mov	r0, r31
 3d8:	f6 e0       	ldi	r31, 0x06	; 6
 3da:	8f 2e       	mov	r8, r31
 3dc:	99 24       	eor	r9, r9
 3de:	f0 2d       	mov	r31, r0
				_delay_loop_2(10000);           // delay
				_delay_loop_2(10000);           // delay

			}
		
			for(int i = 6; i <= LEDCOUNT - 1; i++)
 3e0:	0f 2e       	mov	r0, r31
 3e2:	f3 e0       	ldi	r31, 0x03	; 3
 3e4:	6f 2e       	mov	r6, r31
 3e6:	77 24       	eor	r7, r7
 3e8:	f0 2d       	mov	r31, r0
 3ea:	0f 2e       	mov	r0, r31
 3ec:	f8 ee       	ldi	r31, 0xE8	; 232
 3ee:	af 2e       	mov	r10, r31
 3f0:	f3 e0       	ldi	r31, 0x03	; 3
 3f2:	bf 2e       	mov	r11, r31
 3f4:	f0 2d       	mov	r31, r0
				_delay_loop_2(10000);           // delay
				_delay_loop_2(10000);           // delay

			}
		
			for(int i = 6; i <= LEDCOUNT - 1; i++)
 3f6:	cc 24       	eor	r12, r12
				case 1:
				modeStatus = 2;
				break;

				case 2:
				modeStatus = 3;
 3f8:	0f 2e       	mov	r0, r31
 3fa:	f3 e0       	ldi	r31, 0x03	; 3
 3fc:	4f 2e       	mov	r4, r31
 3fe:	f0 2d       	mov	r31, r0
				case 0:
				modeStatus = 1;
				break;
			
				case 1:
				modeStatus = 2;
 400:	55 24       	eor	r5, r5
 402:	68 94       	set
 404:	51 f8       	bld	r5, 1
		{
			
			switch(modeStatus)
			{
				case 0:
				modeStatus = 1;
 406:	33 24       	eor	r3, r3
 408:	33 94       	inc	r3
	{
		
		// Check the current status of modeStatus (the mode button)
		// set port pin PORTA7 as input and leave the others pins
		// in their original state (inputs or outputs, it doesn't matter)
		DDRA &= ~(1 << PA7);
 40a:	d7 98       	cbi	0x1a, 7	; 26
		
		if (PINA & (1<<PA7))
 40c:	cf 99       	sbic	0x19, 7	; 25
 40e:	0b c0       	rjmp	.+22     	; 0x426 <main+0x84>
			// If the mode pin is high (we have not pressed the button), do nothing
		}
		else // Otherwise set the mode
		{
			
			switch(modeStatus)
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	d8 16       	cp	r13, r24
 414:	09 f4       	brne	.+2      	; 0x418 <main+0x76>
 416:	ac c3       	rjmp	.+1880   	; 0xb70 <main+0x7ce>
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	d8 16       	cp	r13, r24
 41c:	49 f0       	breq	.+18     	; 0x430 <main+0x8e>
 41e:	dd 20       	and	r13, r13
 420:	09 f0       	breq	.+2      	; 0x424 <main+0x82>
 422:	a4 c3       	rjmp	.+1864   	; 0xb6c <main+0x7ca>
			{
				case 0:
				modeStatus = 1;
 424:	d3 2c       	mov	r13, r3
		}
		
		
		
		
		if (modeStatus == 0) // check what the current mode is, and modify the animation based on that
 426:	dd 20       	and	r13, r13
 428:	09 f0       	breq	.+2      	; 0x42c <main+0x8a>
 42a:	7c c0       	rjmp	.+248    	; 0x524 <main+0x182>
 42c:	e3 01       	movw	r28, r6
 42e:	01 c0       	rjmp	.+2      	; 0x432 <main+0x90>
			// If the mode pin is high (we have not pressed the button), do nothing
		}
		else // Otherwise set the mode
		{
			
			switch(modeStatus)
 430:	e3 01       	movw	r28, r6
		if (modeStatus == 0) // check what the current mode is, and modify the animation based on that
		{			
		
			for(int i = 3; i <= 5; i++)
			{
				pca9685_brightness(PCA9685,1,i);
 432:	8a ea       	ldi	r24, 0xAA	; 170
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	ae 01       	movw	r20, r28
 43c:	5a df       	rcall	.-332    	; 0x2f2 <pca9685_brightness>
 43e:	c8 01       	movw	r24, r16
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <main+0x9e>
 444:	c8 01       	movw	r24, r16
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <main+0xa4>
 44a:	c8 01       	movw	r24, r16
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <main+0xaa>
		
		
		if (modeStatus == 0) // check what the current mode is, and modify the animation based on that
		{			
		
			for(int i = 3; i <= 5; i++)
 450:	21 96       	adiw	r28, 0x01	; 1
 452:	c6 30       	cpi	r28, 0x06	; 6
 454:	d1 05       	cpc	r29, r1
 456:	69 f7       	brne	.-38     	; 0x432 <main+0x90>
 458:	e7 01       	movw	r28, r14

			}
		
			for(int i = 0; i <= 2; i++)
			{
				pca9685_brightness(PCA9685,1,i);
 45a:	8a ea       	ldi	r24, 0xAA	; 170
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	ae 01       	movw	r20, r28
 464:	46 df       	rcall	.-372    	; 0x2f2 <pca9685_brightness>
 466:	c8 01       	movw	r24, r16
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <main+0xc6>
 46c:	c8 01       	movw	r24, r16
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <main+0xcc>
 472:	c8 01       	movw	r24, r16
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <main+0xd2>
				_delay_loop_2(10000);           // delay
				_delay_loop_2(10000);           // delay

			}
		
			for(int i = 0; i <= 2; i++)
 478:	21 96       	adiw	r28, 0x01	; 1
 47a:	c3 30       	cpi	r28, 0x03	; 3
 47c:	d1 05       	cpc	r29, r1
 47e:	69 f7       	brne	.-38     	; 0x45a <main+0xb8>
 480:	e4 01       	movw	r28, r8

			}
		
			for(int i = 6; i <= LEDCOUNT - 1; i++)
			{
				pca9685_brightness(PCA9685,1,i);
 482:	8a ea       	ldi	r24, 0xAA	; 170
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	ae 01       	movw	r20, r28
 48c:	32 df       	rcall	.-412    	; 0x2f2 <pca9685_brightness>
 48e:	c8 01       	movw	r24, r16
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <main+0xee>
 494:	c8 01       	movw	r24, r16
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <main+0xf4>
 49a:	c8 01       	movw	r24, r16
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <main+0xfa>
				_delay_loop_2(10000);           // delay
				_delay_loop_2(10000);           // delay

			}
		
			for(int i = 6; i <= LEDCOUNT - 1; i++)
 4a0:	21 96       	adiw	r28, 0x01	; 1
 4a2:	cf 30       	cpi	r28, 0x0F	; 15
 4a4:	d1 05       	cpc	r29, r1
 4a6:	69 f7       	brne	.-38     	; 0x482 <main+0xe0>
 4a8:	e3 01       	movw	r28, r6
		
			///////////////////////////////
		
			for(int i = 3; i <= 5; i++)
			{
				pca9685_brightness(PCA9685,25,i);
 4aa:	8a ea       	ldi	r24, 0xAA	; 170
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	69 e1       	ldi	r22, 0x19	; 25
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	ae 01       	movw	r20, r28
 4b4:	1e df       	rcall	.-452    	; 0x2f2 <pca9685_brightness>
 4b6:	c8 01       	movw	r24, r16
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <main+0x116>
 4bc:	c8 01       	movw	r24, r16
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <main+0x11c>
 4c2:	c8 01       	movw	r24, r16
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <main+0x122>

			}
		
			///////////////////////////////
		
			for(int i = 3; i <= 5; i++)
 4c8:	21 96       	adiw	r28, 0x01	; 1
 4ca:	c6 30       	cpi	r28, 0x06	; 6
 4cc:	d1 05       	cpc	r29, r1
 4ce:	69 f7       	brne	.-38     	; 0x4aa <main+0x108>
 4d0:	e7 01       	movw	r28, r14

			}
		
			for(int i = 0; i <= 2; i++)
			{
				pca9685_brightness(PCA9685,25,i);
 4d2:	8a ea       	ldi	r24, 0xAA	; 170
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	69 e1       	ldi	r22, 0x19	; 25
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	ae 01       	movw	r20, r28
 4dc:	0a df       	rcall	.-492    	; 0x2f2 <pca9685_brightness>
 4de:	c8 01       	movw	r24, r16
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <main+0x13e>
 4e4:	c8 01       	movw	r24, r16
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <main+0x144>
 4ea:	c8 01       	movw	r24, r16
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <main+0x14a>
				_delay_loop_2(10000);           // delay
				_delay_loop_2(10000);           // delay

			}
		
			for(int i = 0; i <= 2; i++)
 4f0:	21 96       	adiw	r28, 0x01	; 1
 4f2:	c3 30       	cpi	r28, 0x03	; 3
 4f4:	d1 05       	cpc	r29, r1
 4f6:	69 f7       	brne	.-38     	; 0x4d2 <main+0x130>
 4f8:	e4 01       	movw	r28, r8

			}
		
			for(int i = 6; i <= LEDCOUNT - 1; i++)
			{
				pca9685_brightness(PCA9685,25,i);
 4fa:	8a ea       	ldi	r24, 0xAA	; 170
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	69 e1       	ldi	r22, 0x19	; 25
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	ae 01       	movw	r20, r28
 504:	f6 de       	rcall	.-532    	; 0x2f2 <pca9685_brightness>
 506:	c8 01       	movw	r24, r16
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <main+0x166>
 50c:	c8 01       	movw	r24, r16
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <main+0x16c>
 512:	c5 01       	movw	r24, r10
 514:	01 97       	sbiw	r24, 0x01	; 1
 516:	f1 f7       	brne	.-4      	; 0x514 <main+0x172>
				_delay_loop_2(10000);           // delay
				_delay_loop_2(10000);           // delay

			}
		
			for(int i = 6; i <= LEDCOUNT - 1; i++)
 518:	21 96       	adiw	r28, 0x01	; 1
 51a:	cf 30       	cpi	r28, 0x0F	; 15
 51c:	d1 05       	cpc	r29, r1
 51e:	69 f7       	brne	.-38     	; 0x4fa <main+0x158>
 520:	dc 2c       	mov	r13, r12
 522:	73 cf       	rjmp	.-282    	; 0x40a <main+0x68>

			}
			
			
		}
		else if(modeStatus == 1)
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	d8 16       	cp	r13, r24
 528:	09 f0       	breq	.+2      	; 0x52c <main+0x18a>
 52a:	d0 c0       	rjmp	.+416    	; 0x6cc <main+0x32a>
 52c:	c1 e0       	ldi	r28, 0x01	; 1
 52e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			
			// Blink Red
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,25,i);
 530:	8a ea       	ldi	r24, 0xAA	; 170
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	69 e1       	ldi	r22, 0x19	; 25
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	ae 01       	movw	r20, r28
 53a:	db de       	rcall	.-586    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 53c:	ae 01       	movw	r20, r28
 53e:	4f 5f       	subi	r20, 0xFF	; 255
 540:	5f 4f       	sbci	r21, 0xFF	; 255
			
			// Blink Red
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,25,i);
				pca9685_brightness(PCA9685,0,i+1);
 542:	8a ea       	ldi	r24, 0xAA	; 170
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	b7 01       	movw	r22, r14
 548:	d4 de       	rcall	.-600    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 54a:	ae 01       	movw	r20, r28
 54c:	4e 5f       	subi	r20, 0xFE	; 254
 54e:	5f 4f       	sbci	r21, 0xFF	; 255
			// Blink Red
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,25,i);
				pca9685_brightness(PCA9685,0,i+1);
				pca9685_brightness(PCA9685,0,i+2);
 550:	8a ea       	ldi	r24, 0xAA	; 170
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	b7 01       	movw	r22, r14
 556:	cd de       	rcall	.-614    	; 0x2f2 <pca9685_brightness>
 558:	c8 01       	movw	r24, r16
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <main+0x1b8>
 55e:	c8 01       	movw	r24, r16
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <main+0x1be>
 564:	c8 01       	movw	r24, r16
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <main+0x1c4>
		}
		else if(modeStatus == 1)
		{
			
			// Blink Red
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
 56a:	23 96       	adiw	r28, 0x03	; 3
 56c:	c0 31       	cpi	r28, 0x10	; 16
 56e:	d1 05       	cpc	r29, r1
 570:	f9 f6       	brne	.-66     	; 0x530 <main+0x18e>
 572:	c1 e0       	ldi	r28, 0x01	; 1
 574:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
			
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
 576:	8a ea       	ldi	r24, 0xAA	; 170
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	b7 01       	movw	r22, r14
 57c:	ae 01       	movw	r20, r28
 57e:	b9 de       	rcall	.-654    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 580:	ae 01       	movw	r20, r28
 582:	4f 5f       	subi	r20, 0xFF	; 255
 584:	5f 4f       	sbci	r21, 0xFF	; 255
			
			
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
 586:	8a ea       	ldi	r24, 0xAA	; 170
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	b7 01       	movw	r22, r14
 58c:	b2 de       	rcall	.-668    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 58e:	ae 01       	movw	r20, r28
 590:	4e 5f       	subi	r20, 0xFE	; 254
 592:	5f 4f       	sbci	r21, 0xFF	; 255
			
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
				pca9685_brightness(PCA9685,0,i+2);
 594:	8a ea       	ldi	r24, 0xAA	; 170
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	b7 01       	movw	r22, r14
 59a:	ab de       	rcall	.-682    	; 0x2f2 <pca9685_brightness>
 59c:	c8 01       	movw	r24, r16
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <main+0x1fc>
 5a2:	c8 01       	movw	r24, r16
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <main+0x202>
 5a8:	c8 01       	movw	r24, r16
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <main+0x208>
				_delay_loop_2(10000);           // delay

			}
			
			
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
 5ae:	23 96       	adiw	r28, 0x03	; 3
 5b0:	c0 31       	cpi	r28, 0x10	; 16
 5b2:	d1 05       	cpc	r29, r1
 5b4:	01 f7       	brne	.-64     	; 0x576 <main+0x1d4>
 5b6:	c1 e0       	ldi	r28, 0x01	; 1
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
			// Blink Blue
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
 5ba:	8a ea       	ldi	r24, 0xAA	; 170
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	b7 01       	movw	r22, r14
 5c0:	ae 01       	movw	r20, r28
 5c2:	97 de       	rcall	.-722    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 5c4:	ae 01       	movw	r20, r28
 5c6:	4f 5f       	subi	r20, 0xFF	; 255
 5c8:	5f 4f       	sbci	r21, 0xFF	; 255
			
			// Blink Blue
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,25,i+1);
 5ca:	8a ea       	ldi	r24, 0xAA	; 170
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	69 e1       	ldi	r22, 0x19	; 25
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	8f de       	rcall	.-738    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 5d4:	ae 01       	movw	r20, r28
 5d6:	4e 5f       	subi	r20, 0xFE	; 254
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255
			// Blink Blue
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,25,i+1);
				pca9685_brightness(PCA9685,0,i+2);
 5da:	8a ea       	ldi	r24, 0xAA	; 170
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	b7 01       	movw	r22, r14
 5e0:	88 de       	rcall	.-752    	; 0x2f2 <pca9685_brightness>
 5e2:	c8 01       	movw	r24, r16
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <main+0x242>
 5e8:	c8 01       	movw	r24, r16
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <main+0x248>
 5ee:	c8 01       	movw	r24, r16
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <main+0x24e>
				_delay_loop_2(10000);           // delay

			}
			
			// Blink Blue
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
 5f4:	23 96       	adiw	r28, 0x03	; 3
 5f6:	c0 31       	cpi	r28, 0x10	; 16
 5f8:	d1 05       	cpc	r29, r1
 5fa:	f9 f6       	brne	.-66     	; 0x5ba <main+0x218>
 5fc:	c1 e0       	ldi	r28, 0x01	; 1
 5fe:	d0 e0       	ldi	r29, 0x00	; 0
			}


			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
 600:	8a ea       	ldi	r24, 0xAA	; 170
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	b7 01       	movw	r22, r14
 606:	ae 01       	movw	r20, r28
 608:	74 de       	rcall	.-792    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 60a:	ae 01       	movw	r20, r28
 60c:	4f 5f       	subi	r20, 0xFF	; 255
 60e:	5f 4f       	sbci	r21, 0xFF	; 255


			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
 610:	8a ea       	ldi	r24, 0xAA	; 170
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	b7 01       	movw	r22, r14
 616:	6d de       	rcall	.-806    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 618:	ae 01       	movw	r20, r28
 61a:	4e 5f       	subi	r20, 0xFE	; 254
 61c:	5f 4f       	sbci	r21, 0xFF	; 255

			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
				pca9685_brightness(PCA9685,0,i+2);
 61e:	8a ea       	ldi	r24, 0xAA	; 170
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	b7 01       	movw	r22, r14
 624:	66 de       	rcall	.-820    	; 0x2f2 <pca9685_brightness>
 626:	c8 01       	movw	r24, r16
 628:	01 97       	sbiw	r24, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <main+0x286>
 62c:	c8 01       	movw	r24, r16
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <main+0x28c>
 632:	c8 01       	movw	r24, r16
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <main+0x292>
				_delay_loop_2(10000);           // delay

			}


			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
 638:	23 96       	adiw	r28, 0x03	; 3
 63a:	c0 31       	cpi	r28, 0x10	; 16
 63c:	d1 05       	cpc	r29, r1
 63e:	01 f7       	brne	.-64     	; 0x600 <main+0x25e>
 640:	c1 e0       	ldi	r28, 0x01	; 1
 642:	d0 e0       	ldi	r29, 0x00	; 0
			}

			// Blink Green
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
 644:	8a ea       	ldi	r24, 0xAA	; 170
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	b7 01       	movw	r22, r14
 64a:	ae 01       	movw	r20, r28
 64c:	52 de       	rcall	.-860    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 64e:	ae 01       	movw	r20, r28
 650:	4f 5f       	subi	r20, 0xFF	; 255
 652:	5f 4f       	sbci	r21, 0xFF	; 255

			// Blink Green
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
 654:	8a ea       	ldi	r24, 0xAA	; 170
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	b7 01       	movw	r22, r14
 65a:	4b de       	rcall	.-874    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 65c:	ae 01       	movw	r20, r28
 65e:	41 50       	subi	r20, 0x01	; 1
 660:	50 40       	sbci	r21, 0x00	; 0
			// Blink Green
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
				pca9685_brightness(PCA9685,25,i-1);
 662:	8a ea       	ldi	r24, 0xAA	; 170
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	69 e1       	ldi	r22, 0x19	; 25
 668:	70 e0       	ldi	r23, 0x00	; 0
 66a:	43 de       	rcall	.-890    	; 0x2f2 <pca9685_brightness>
 66c:	c8 01       	movw	r24, r16
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <main+0x2cc>
 672:	c8 01       	movw	r24, r16
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <main+0x2d2>
 678:	c8 01       	movw	r24, r16
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <main+0x2d8>
				_delay_loop_2(10000);           // delay

			}

			// Blink Green
			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
 67e:	23 96       	adiw	r28, 0x03	; 3
 680:	c0 31       	cpi	r28, 0x10	; 16
 682:	d1 05       	cpc	r29, r1
 684:	f9 f6       	brne	.-66     	; 0x644 <main+0x2a2>
 686:	c1 e0       	ldi	r28, 0x01	; 1
 688:	d0 e0       	ldi	r29, 0x00	; 0
			}


			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
 68a:	8a ea       	ldi	r24, 0xAA	; 170
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	b7 01       	movw	r22, r14
 690:	ae 01       	movw	r20, r28
 692:	2f de       	rcall	.-930    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 694:	ae 01       	movw	r20, r28
 696:	4f 5f       	subi	r20, 0xFF	; 255
 698:	5f 4f       	sbci	r21, 0xFF	; 255


			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
 69a:	8a ea       	ldi	r24, 0xAA	; 170
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	b7 01       	movw	r22, r14
 6a0:	28 de       	rcall	.-944    	; 0x2f2 <pca9685_brightness>
} 




int main(void)
 6a2:	ae 01       	movw	r20, r28
 6a4:	41 50       	subi	r20, 0x01	; 1
 6a6:	50 40       	sbci	r21, 0x00	; 0

			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
			{
				pca9685_brightness(PCA9685,0,i);
				pca9685_brightness(PCA9685,0,i+1);
				pca9685_brightness(PCA9685,0,i-1);
 6a8:	8a ea       	ldi	r24, 0xAA	; 170
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	b7 01       	movw	r22, r14
 6ae:	21 de       	rcall	.-958    	; 0x2f2 <pca9685_brightness>
 6b0:	c8 01       	movw	r24, r16
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0x310>
 6b6:	c8 01       	movw	r24, r16
 6b8:	01 97       	sbiw	r24, 0x01	; 1
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <main+0x316>
 6bc:	c8 01       	movw	r24, r16
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <main+0x31c>
				_delay_loop_2(10000);           // delay

			}


			for(int i = 1; i <= LEDCOUNT - 1; i = i+3)
 6c2:	23 96       	adiw	r28, 0x03	; 3
 6c4:	c0 31       	cpi	r28, 0x10	; 16
 6c6:	d1 05       	cpc	r29, r1
 6c8:	01 f7       	brne	.-64     	; 0x68a <main+0x2e8>
 6ca:	9f ce       	rjmp	.-706    	; 0x40a <main+0x68>
			
			
			
			
		}		
		else if(modeStatus == 2)
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	d8 16       	cp	r13, r24
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0x332>
 6d2:	ee c1       	rjmp	.+988    	; 0xab0 <main+0x70e>
 6d4:	c1 e0       	ldi	r28, 0x01	; 1
 6d6:	d0 e0       	ldi	r29, 0x00	; 0
			
			
			// Turn off all LEDs
			for(int i = 1; i <= LEDCOUNT - 1; i++)
			{
				pca9685_brightness(PCA9685,0,i);
 6d8:	8a ea       	ldi	r24, 0xAA	; 170
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	b7 01       	movw	r22, r14
 6de:	ae 01       	movw	r20, r28
 6e0:	08 de       	rcall	.-1008   	; 0x2f2 <pca9685_brightness>
			
			// Blink Low Power
			
			
			// Turn off all LEDs
			for(int i = 1; i <= LEDCOUNT - 1; i++)
 6e2:	21 96       	adiw	r28, 0x01	; 1
 6e4:	cf 30       	cpi	r28, 0x0F	; 15
 6e6:	d1 05       	cpc	r29, r1
 6e8:	b9 f7       	brne	.-18     	; 0x6d8 <main+0x336>
			{
				pca9685_brightness(PCA9685,0,i);
			}
			
			//Sequence through turning one LED chip on, then off, and proceeding
			pca9685_brightness(PCA9685,1,3);
 6ea:	8a ea       	ldi	r24, 0xAA	; 170
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	a3 01       	movw	r20, r6
 6f4:	fe dd       	rcall	.-1028   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,4);
 6f6:	8a ea       	ldi	r24, 0xAA	; 170
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	44 e0       	ldi	r20, 0x04	; 4
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	f7 dd       	rcall	.-1042   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,5);
 704:	8a ea       	ldi	r24, 0xAA	; 170
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	45 e0       	ldi	r20, 0x05	; 5
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	f0 dd       	rcall	.-1056   	; 0x2f2 <pca9685_brightness>
 712:	c8 01       	movw	r24, r16
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <main+0x372>
 718:	c8 01       	movw	r24, r16
 71a:	01 97       	sbiw	r24, 0x01	; 1
 71c:	f1 f7       	brne	.-4      	; 0x71a <main+0x378>
 71e:	c8 01       	movw	r24, r16
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	f1 f7       	brne	.-4      	; 0x720 <main+0x37e>
 724:	c8 01       	movw	r24, r16
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <main+0x384>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,3);
 72a:	8a ea       	ldi	r24, 0xAA	; 170
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	b7 01       	movw	r22, r14
 730:	a3 01       	movw	r20, r6
 732:	df dd       	rcall	.-1090   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,4);
 734:	8a ea       	ldi	r24, 0xAA	; 170
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b7 01       	movw	r22, r14
 73a:	44 e0       	ldi	r20, 0x04	; 4
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	d9 dd       	rcall	.-1102   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,5);
 740:	8a ea       	ldi	r24, 0xAA	; 170
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	b7 01       	movw	r22, r14
 746:	45 e0       	ldi	r20, 0x05	; 5
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	d3 dd       	rcall	.-1114   	; 0x2f2 <pca9685_brightness>
 74c:	c8 01       	movw	r24, r16
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <main+0x3ac>
 752:	c8 01       	movw	r24, r16
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	f1 f7       	brne	.-4      	; 0x754 <main+0x3b2>
 758:	c8 01       	movw	r24, r16
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <main+0x3b8>
 75e:	c8 01       	movw	r24, r16
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <main+0x3be>
 764:	c8 01       	movw	r24, r16
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	f1 f7       	brne	.-4      	; 0x766 <main+0x3c4>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			
			pca9685_brightness(PCA9685,1,0);
 76a:	8a ea       	ldi	r24, 0xAA	; 170
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	a7 01       	movw	r20, r14
 774:	be dd       	rcall	.-1156   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,1);
 776:	8a ea       	ldi	r24, 0xAA	; 170
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	41 e0       	ldi	r20, 0x01	; 1
 780:	50 e0       	ldi	r21, 0x00	; 0
 782:	b7 dd       	rcall	.-1170   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,2);
 784:	8a ea       	ldi	r24, 0xAA	; 170
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	42 e0       	ldi	r20, 0x02	; 2
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	b0 dd       	rcall	.-1184   	; 0x2f2 <pca9685_brightness>
 792:	c8 01       	movw	r24, r16
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	f1 f7       	brne	.-4      	; 0x794 <main+0x3f2>
 798:	c8 01       	movw	r24, r16
 79a:	01 97       	sbiw	r24, 0x01	; 1
 79c:	f1 f7       	brne	.-4      	; 0x79a <main+0x3f8>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,0);
 79e:	8a ea       	ldi	r24, 0xAA	; 170
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	b7 01       	movw	r22, r14
 7a4:	a7 01       	movw	r20, r14
 7a6:	a5 dd       	rcall	.-1206   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,1);
 7a8:	8a ea       	ldi	r24, 0xAA	; 170
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	b7 01       	movw	r22, r14
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	9f dd       	rcall	.-1218   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,2);
 7b4:	8a ea       	ldi	r24, 0xAA	; 170
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	b7 01       	movw	r22, r14
 7ba:	42 e0       	ldi	r20, 0x02	; 2
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	99 dd       	rcall	.-1230   	; 0x2f2 <pca9685_brightness>
 7c0:	c8 01       	movw	r24, r16
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <main+0x420>
 7c6:	c8 01       	movw	r24, r16
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <main+0x426>
 7cc:	c8 01       	movw	r24, r16
 7ce:	01 97       	sbiw	r24, 0x01	; 1
 7d0:	f1 f7       	brne	.-4      	; 0x7ce <main+0x42c>
 7d2:	c8 01       	movw	r24, r16
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <main+0x432>
 7d8:	c8 01       	movw	r24, r16
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <main+0x438>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay

			pca9685_brightness(PCA9685,1,6);
 7de:	8a ea       	ldi	r24, 0xAA	; 170
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	61 e0       	ldi	r22, 0x01	; 1
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	a4 01       	movw	r20, r8
 7e8:	84 dd       	rcall	.-1272   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,7);
 7ea:	8a ea       	ldi	r24, 0xAA	; 170
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	61 e0       	ldi	r22, 0x01	; 1
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	47 e0       	ldi	r20, 0x07	; 7
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	7d dd       	rcall	.-1286   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,8);
 7f8:	8a ea       	ldi	r24, 0xAA	; 170
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	61 e0       	ldi	r22, 0x01	; 1
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	48 e0       	ldi	r20, 0x08	; 8
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	76 dd       	rcall	.-1300   	; 0x2f2 <pca9685_brightness>
 806:	c8 01       	movw	r24, r16
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <main+0x466>
 80c:	c8 01       	movw	r24, r16
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <main+0x46c>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,6);
 812:	8a ea       	ldi	r24, 0xAA	; 170
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	b7 01       	movw	r22, r14
 818:	a4 01       	movw	r20, r8
 81a:	6b dd       	rcall	.-1322   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,7);
 81c:	8a ea       	ldi	r24, 0xAA	; 170
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	b7 01       	movw	r22, r14
 822:	47 e0       	ldi	r20, 0x07	; 7
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	65 dd       	rcall	.-1334   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,8);
 828:	8a ea       	ldi	r24, 0xAA	; 170
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	b7 01       	movw	r22, r14
 82e:	48 e0       	ldi	r20, 0x08	; 8
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	5f dd       	rcall	.-1346   	; 0x2f2 <pca9685_brightness>
 834:	c8 01       	movw	r24, r16
 836:	01 97       	sbiw	r24, 0x01	; 1
 838:	f1 f7       	brne	.-4      	; 0x836 <main+0x494>
 83a:	c8 01       	movw	r24, r16
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	f1 f7       	brne	.-4      	; 0x83c <main+0x49a>
 840:	c8 01       	movw	r24, r16
 842:	01 97       	sbiw	r24, 0x01	; 1
 844:	f1 f7       	brne	.-4      	; 0x842 <main+0x4a0>
 846:	c8 01       	movw	r24, r16
 848:	01 97       	sbiw	r24, 0x01	; 1
 84a:	f1 f7       	brne	.-4      	; 0x848 <main+0x4a6>
 84c:	c8 01       	movw	r24, r16
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	f1 f7       	brne	.-4      	; 0x84e <main+0x4ac>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay


			pca9685_brightness(PCA9685,1,9);
 852:	8a ea       	ldi	r24, 0xAA	; 170
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	61 e0       	ldi	r22, 0x01	; 1
 858:	70 e0       	ldi	r23, 0x00	; 0
 85a:	49 e0       	ldi	r20, 0x09	; 9
 85c:	50 e0       	ldi	r21, 0x00	; 0
 85e:	49 dd       	rcall	.-1390   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,10);
 860:	8a ea       	ldi	r24, 0xAA	; 170
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	61 e0       	ldi	r22, 0x01	; 1
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	4a e0       	ldi	r20, 0x0A	; 10
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	42 dd       	rcall	.-1404   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,11);
 86e:	8a ea       	ldi	r24, 0xAA	; 170
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	4b e0       	ldi	r20, 0x0B	; 11
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	3b dd       	rcall	.-1418   	; 0x2f2 <pca9685_brightness>
 87c:	c8 01       	movw	r24, r16
 87e:	01 97       	sbiw	r24, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <main+0x4dc>
 882:	c8 01       	movw	r24, r16
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <main+0x4e2>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,9);
 888:	8a ea       	ldi	r24, 0xAA	; 170
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	b7 01       	movw	r22, r14
 88e:	49 e0       	ldi	r20, 0x09	; 9
 890:	50 e0       	ldi	r21, 0x00	; 0
 892:	2f dd       	rcall	.-1442   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,10);
 894:	8a ea       	ldi	r24, 0xAA	; 170
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	b7 01       	movw	r22, r14
 89a:	4a e0       	ldi	r20, 0x0A	; 10
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	29 dd       	rcall	.-1454   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,11);
 8a0:	8a ea       	ldi	r24, 0xAA	; 170
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	b7 01       	movw	r22, r14
 8a6:	4b e0       	ldi	r20, 0x0B	; 11
 8a8:	50 e0       	ldi	r21, 0x00	; 0
 8aa:	23 dd       	rcall	.-1466   	; 0x2f2 <pca9685_brightness>
 8ac:	c8 01       	movw	r24, r16
 8ae:	01 97       	sbiw	r24, 0x01	; 1
 8b0:	f1 f7       	brne	.-4      	; 0x8ae <main+0x50c>
 8b2:	c8 01       	movw	r24, r16
 8b4:	01 97       	sbiw	r24, 0x01	; 1
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <main+0x512>
 8b8:	c8 01       	movw	r24, r16
 8ba:	01 97       	sbiw	r24, 0x01	; 1
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <main+0x518>
 8be:	c8 01       	movw	r24, r16
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	f1 f7       	brne	.-4      	; 0x8c0 <main+0x51e>
 8c4:	c8 01       	movw	r24, r16
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <main+0x524>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay


			pca9685_brightness(PCA9685,1,12);
 8ca:	8a ea       	ldi	r24, 0xAA	; 170
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	61 e0       	ldi	r22, 0x01	; 1
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	4c e0       	ldi	r20, 0x0C	; 12
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	0d dd       	rcall	.-1510   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,13);
 8d8:	8a ea       	ldi	r24, 0xAA	; 170
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	61 e0       	ldi	r22, 0x01	; 1
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	4d e0       	ldi	r20, 0x0D	; 13
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	06 dd       	rcall	.-1524   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,14);
 8e6:	8a ea       	ldi	r24, 0xAA	; 170
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	61 e0       	ldi	r22, 0x01	; 1
 8ec:	70 e0       	ldi	r23, 0x00	; 0
 8ee:	4e e0       	ldi	r20, 0x0E	; 14
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	ff dc       	rcall	.-1538   	; 0x2f2 <pca9685_brightness>
 8f4:	c8 01       	movw	r24, r16
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <main+0x554>
 8fa:	c8 01       	movw	r24, r16
 8fc:	01 97       	sbiw	r24, 0x01	; 1
 8fe:	f1 f7       	brne	.-4      	; 0x8fc <main+0x55a>
 900:	c8 01       	movw	r24, r16
 902:	01 97       	sbiw	r24, 0x01	; 1
 904:	f1 f7       	brne	.-4      	; 0x902 <main+0x560>
 906:	c8 01       	movw	r24, r16
 908:	01 97       	sbiw	r24, 0x01	; 1
 90a:	f1 f7       	brne	.-4      	; 0x908 <main+0x566>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,12);
 90c:	8a ea       	ldi	r24, 0xAA	; 170
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	b7 01       	movw	r22, r14
 912:	4c e0       	ldi	r20, 0x0C	; 12
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	ed dc       	rcall	.-1574   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,13);
 918:	8a ea       	ldi	r24, 0xAA	; 170
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	b7 01       	movw	r22, r14
 91e:	4d e0       	ldi	r20, 0x0D	; 13
 920:	50 e0       	ldi	r21, 0x00	; 0
 922:	e7 dc       	rcall	.-1586   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,14);
 924:	8a ea       	ldi	r24, 0xAA	; 170
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	b7 01       	movw	r22, r14
 92a:	4e e0       	ldi	r20, 0x0E	; 14
 92c:	50 e0       	ldi	r21, 0x00	; 0
 92e:	e1 dc       	rcall	.-1598   	; 0x2f2 <pca9685_brightness>
 930:	c8 01       	movw	r24, r16
 932:	01 97       	sbiw	r24, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <main+0x590>
 936:	c8 01       	movw	r24, r16
 938:	01 97       	sbiw	r24, 0x01	; 1
 93a:	f1 f7       	brne	.-4      	; 0x938 <main+0x596>
 93c:	c8 01       	movw	r24, r16
 93e:	01 97       	sbiw	r24, 0x01	; 1
 940:	f1 f7       	brne	.-4      	; 0x93e <main+0x59c>
 942:	c8 01       	movw	r24, r16
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <main+0x5a2>
 948:	c8 01       	movw	r24, r16
 94a:	01 97       	sbiw	r24, 0x01	; 1
 94c:	f1 f7       	brne	.-4      	; 0x94a <main+0x5a8>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
		
			
			pca9685_brightness(PCA9685,1,9);
 94e:	8a ea       	ldi	r24, 0xAA	; 170
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	49 e0       	ldi	r20, 0x09	; 9
 958:	50 e0       	ldi	r21, 0x00	; 0
 95a:	cb dc       	rcall	.-1642   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,10);
 95c:	8a ea       	ldi	r24, 0xAA	; 170
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	4a e0       	ldi	r20, 0x0A	; 10
 966:	50 e0       	ldi	r21, 0x00	; 0
 968:	c4 dc       	rcall	.-1656   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,11);
 96a:	8a ea       	ldi	r24, 0xAA	; 170
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	61 e0       	ldi	r22, 0x01	; 1
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	4b e0       	ldi	r20, 0x0B	; 11
 974:	50 e0       	ldi	r21, 0x00	; 0
 976:	bd dc       	rcall	.-1670   	; 0x2f2 <pca9685_brightness>
 978:	c8 01       	movw	r24, r16
 97a:	01 97       	sbiw	r24, 0x01	; 1
 97c:	f1 f7       	brne	.-4      	; 0x97a <main+0x5d8>
 97e:	c8 01       	movw	r24, r16
 980:	01 97       	sbiw	r24, 0x01	; 1
 982:	f1 f7       	brne	.-4      	; 0x980 <main+0x5de>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,9);
 984:	8a ea       	ldi	r24, 0xAA	; 170
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	b7 01       	movw	r22, r14
 98a:	49 e0       	ldi	r20, 0x09	; 9
 98c:	50 e0       	ldi	r21, 0x00	; 0
 98e:	b1 dc       	rcall	.-1694   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,10);
 990:	8a ea       	ldi	r24, 0xAA	; 170
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	b7 01       	movw	r22, r14
 996:	4a e0       	ldi	r20, 0x0A	; 10
 998:	50 e0       	ldi	r21, 0x00	; 0
 99a:	ab dc       	rcall	.-1706   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,11);
 99c:	8a ea       	ldi	r24, 0xAA	; 170
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	b7 01       	movw	r22, r14
 9a2:	4b e0       	ldi	r20, 0x0B	; 11
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	a5 dc       	rcall	.-1718   	; 0x2f2 <pca9685_brightness>
 9a8:	c8 01       	movw	r24, r16
 9aa:	01 97       	sbiw	r24, 0x01	; 1
 9ac:	f1 f7       	brne	.-4      	; 0x9aa <main+0x608>
 9ae:	c8 01       	movw	r24, r16
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	f1 f7       	brne	.-4      	; 0x9b0 <main+0x60e>
 9b4:	c8 01       	movw	r24, r16
 9b6:	01 97       	sbiw	r24, 0x01	; 1
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <main+0x614>
 9ba:	c8 01       	movw	r24, r16
 9bc:	01 97       	sbiw	r24, 0x01	; 1
 9be:	f1 f7       	brne	.-4      	; 0x9bc <main+0x61a>
 9c0:	c8 01       	movw	r24, r16
 9c2:	01 97       	sbiw	r24, 0x01	; 1
 9c4:	f1 f7       	brne	.-4      	; 0x9c2 <main+0x620>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
		
			
			pca9685_brightness(PCA9685,1,6);
 9c6:	8a ea       	ldi	r24, 0xAA	; 170
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	61 e0       	ldi	r22, 0x01	; 1
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	a4 01       	movw	r20, r8
 9d0:	90 dc       	rcall	.-1760   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,7);
 9d2:	8a ea       	ldi	r24, 0xAA	; 170
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	61 e0       	ldi	r22, 0x01	; 1
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	47 e0       	ldi	r20, 0x07	; 7
 9dc:	50 e0       	ldi	r21, 0x00	; 0
 9de:	89 dc       	rcall	.-1774   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,8);
 9e0:	8a ea       	ldi	r24, 0xAA	; 170
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	61 e0       	ldi	r22, 0x01	; 1
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	48 e0       	ldi	r20, 0x08	; 8
 9ea:	50 e0       	ldi	r21, 0x00	; 0
 9ec:	82 dc       	rcall	.-1788   	; 0x2f2 <pca9685_brightness>
 9ee:	c8 01       	movw	r24, r16
 9f0:	01 97       	sbiw	r24, 0x01	; 1
 9f2:	f1 f7       	brne	.-4      	; 0x9f0 <main+0x64e>
 9f4:	c8 01       	movw	r24, r16
 9f6:	01 97       	sbiw	r24, 0x01	; 1
 9f8:	f1 f7       	brne	.-4      	; 0x9f6 <main+0x654>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,6);
 9fa:	8a ea       	ldi	r24, 0xAA	; 170
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	b7 01       	movw	r22, r14
 a00:	a4 01       	movw	r20, r8
 a02:	77 dc       	rcall	.-1810   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,7);
 a04:	8a ea       	ldi	r24, 0xAA	; 170
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	b7 01       	movw	r22, r14
 a0a:	47 e0       	ldi	r20, 0x07	; 7
 a0c:	50 e0       	ldi	r21, 0x00	; 0
 a0e:	71 dc       	rcall	.-1822   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,8);
 a10:	8a ea       	ldi	r24, 0xAA	; 170
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	b7 01       	movw	r22, r14
 a16:	48 e0       	ldi	r20, 0x08	; 8
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	6b dc       	rcall	.-1834   	; 0x2f2 <pca9685_brightness>
 a1c:	c8 01       	movw	r24, r16
 a1e:	01 97       	sbiw	r24, 0x01	; 1
 a20:	f1 f7       	brne	.-4      	; 0xa1e <main+0x67c>
 a22:	c8 01       	movw	r24, r16
 a24:	01 97       	sbiw	r24, 0x01	; 1
 a26:	f1 f7       	brne	.-4      	; 0xa24 <main+0x682>
 a28:	c8 01       	movw	r24, r16
 a2a:	01 97       	sbiw	r24, 0x01	; 1
 a2c:	f1 f7       	brne	.-4      	; 0xa2a <main+0x688>
 a2e:	c8 01       	movw	r24, r16
 a30:	01 97       	sbiw	r24, 0x01	; 1
 a32:	f1 f7       	brne	.-4      	; 0xa30 <main+0x68e>
 a34:	c8 01       	movw	r24, r16
 a36:	01 97       	sbiw	r24, 0x01	; 1
 a38:	f1 f7       	brne	.-4      	; 0xa36 <main+0x694>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			
			
			pca9685_brightness(PCA9685,1,0);
 a3a:	8a ea       	ldi	r24, 0xAA	; 170
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	61 e0       	ldi	r22, 0x01	; 1
 a40:	70 e0       	ldi	r23, 0x00	; 0
 a42:	a7 01       	movw	r20, r14
 a44:	56 dc       	rcall	.-1876   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,1);
 a46:	8a ea       	ldi	r24, 0xAA	; 170
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	61 e0       	ldi	r22, 0x01	; 1
 a4c:	70 e0       	ldi	r23, 0x00	; 0
 a4e:	41 e0       	ldi	r20, 0x01	; 1
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	4f dc       	rcall	.-1890   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,1,2);
 a54:	8a ea       	ldi	r24, 0xAA	; 170
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	61 e0       	ldi	r22, 0x01	; 1
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	42 e0       	ldi	r20, 0x02	; 2
 a5e:	50 e0       	ldi	r21, 0x00	; 0
 a60:	48 dc       	rcall	.-1904   	; 0x2f2 <pca9685_brightness>
 a62:	c8 01       	movw	r24, r16
 a64:	01 97       	sbiw	r24, 0x01	; 1
 a66:	f1 f7       	brne	.-4      	; 0xa64 <main+0x6c2>
 a68:	c8 01       	movw	r24, r16
 a6a:	01 97       	sbiw	r24, 0x01	; 1
 a6c:	f1 f7       	brne	.-4      	; 0xa6a <main+0x6c8>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay
			pca9685_brightness(PCA9685,0,0);
 a6e:	8a ea       	ldi	r24, 0xAA	; 170
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	b7 01       	movw	r22, r14
 a74:	a7 01       	movw	r20, r14
 a76:	3d dc       	rcall	.-1926   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,1);
 a78:	8a ea       	ldi	r24, 0xAA	; 170
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	b7 01       	movw	r22, r14
 a7e:	41 e0       	ldi	r20, 0x01	; 1
 a80:	50 e0       	ldi	r21, 0x00	; 0
 a82:	37 dc       	rcall	.-1938   	; 0x2f2 <pca9685_brightness>
			pca9685_brightness(PCA9685,0,2);
 a84:	8a ea       	ldi	r24, 0xAA	; 170
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	b7 01       	movw	r22, r14
 a8a:	42 e0       	ldi	r20, 0x02	; 2
 a8c:	50 e0       	ldi	r21, 0x00	; 0
 a8e:	31 dc       	rcall	.-1950   	; 0x2f2 <pca9685_brightness>
 a90:	c8 01       	movw	r24, r16
 a92:	01 97       	sbiw	r24, 0x01	; 1
 a94:	f1 f7       	brne	.-4      	; 0xa92 <main+0x6f0>
 a96:	c8 01       	movw	r24, r16
 a98:	01 97       	sbiw	r24, 0x01	; 1
 a9a:	f1 f7       	brne	.-4      	; 0xa98 <main+0x6f6>
 a9c:	c8 01       	movw	r24, r16
 a9e:	01 97       	sbiw	r24, 0x01	; 1
 aa0:	f1 f7       	brne	.-4      	; 0xa9e <main+0x6fc>
 aa2:	c8 01       	movw	r24, r16
 aa4:	01 97       	sbiw	r24, 0x01	; 1
 aa6:	f1 f7       	brne	.-4      	; 0xaa4 <main+0x702>
 aa8:	c8 01       	movw	r24, r16
 aaa:	01 97       	sbiw	r24, 0x01	; 1
 aac:	f1 f7       	brne	.-4      	; 0xaaa <main+0x708>
 aae:	ad cc       	rjmp	.-1702   	; 0x40a <main+0x68>
			_delay_loop_2(10000);           // delay
			
				
			
		}
		else if(modeStatus == 3)
 ab0:	83 e0       	ldi	r24, 0x03	; 3
 ab2:	d8 16       	cp	r13, r24
 ab4:	09 f0       	breq	.+2      	; 0xab8 <main+0x716>
 ab6:	a9 cc       	rjmp	.-1710   	; 0x40a <main+0x68>
 ab8:	c1 e0       	ldi	r28, 0x01	; 1
 aba:	d0 e0       	ldi	r29, 0x00	; 0
			
			
			// Turn off all LEDs
			for(int i = 1; i <= LEDCOUNT - 1; i++)
			{
				pca9685_brightness(PCA9685,0,i);
 abc:	8a ea       	ldi	r24, 0xAA	; 170
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	b7 01       	movw	r22, r14
 ac2:	ae 01       	movw	r20, r28
 ac4:	16 dc       	rcall	.-2004   	; 0x2f2 <pca9685_brightness>
			
			// All LEDs off
			
			
			// Turn off all LEDs
			for(int i = 1; i <= LEDCOUNT - 1; i++)
 ac6:	21 96       	adiw	r28, 0x01	; 1
 ac8:	cf 30       	cpi	r28, 0x0F	; 15
 aca:	d1 05       	cpc	r29, r1
 acc:	b9 f7       	brne	.-18     	; 0xabc <main+0x71a>
 ace:	c8 01       	movw	r24, r16
 ad0:	01 97       	sbiw	r24, 0x01	; 1
 ad2:	f1 f7       	brne	.-4      	; 0xad0 <main+0x72e>
 ad4:	c8 01       	movw	r24, r16
 ad6:	01 97       	sbiw	r24, 0x01	; 1
 ad8:	f1 f7       	brne	.-4      	; 0xad6 <main+0x734>
 ada:	c8 01       	movw	r24, r16
 adc:	01 97       	sbiw	r24, 0x01	; 1
 ade:	f1 f7       	brne	.-4      	; 0xadc <main+0x73a>
 ae0:	c8 01       	movw	r24, r16
 ae2:	01 97       	sbiw	r24, 0x01	; 1
 ae4:	f1 f7       	brne	.-4      	; 0xae2 <main+0x740>
 ae6:	c8 01       	movw	r24, r16
 ae8:	01 97       	sbiw	r24, 0x01	; 1
 aea:	f1 f7       	brne	.-4      	; 0xae8 <main+0x746>
 aec:	c8 01       	movw	r24, r16
 aee:	01 97       	sbiw	r24, 0x01	; 1
 af0:	f1 f7       	brne	.-4      	; 0xaee <main+0x74c>
 af2:	c8 01       	movw	r24, r16
 af4:	01 97       	sbiw	r24, 0x01	; 1
 af6:	f1 f7       	brne	.-4      	; 0xaf4 <main+0x752>
 af8:	c8 01       	movw	r24, r16
 afa:	01 97       	sbiw	r24, 0x01	; 1
 afc:	f1 f7       	brne	.-4      	; 0xafa <main+0x758>
 afe:	c8 01       	movw	r24, r16
 b00:	01 97       	sbiw	r24, 0x01	; 1
 b02:	f1 f7       	brne	.-4      	; 0xb00 <main+0x75e>
 b04:	c8 01       	movw	r24, r16
 b06:	01 97       	sbiw	r24, 0x01	; 1
 b08:	f1 f7       	brne	.-4      	; 0xb06 <main+0x764>
 b0a:	c8 01       	movw	r24, r16
 b0c:	01 97       	sbiw	r24, 0x01	; 1
 b0e:	f1 f7       	brne	.-4      	; 0xb0c <main+0x76a>
 b10:	c8 01       	movw	r24, r16
 b12:	01 97       	sbiw	r24, 0x01	; 1
 b14:	f1 f7       	brne	.-4      	; 0xb12 <main+0x770>
 b16:	c8 01       	movw	r24, r16
 b18:	01 97       	sbiw	r24, 0x01	; 1
 b1a:	f1 f7       	brne	.-4      	; 0xb18 <main+0x776>
 b1c:	c8 01       	movw	r24, r16
 b1e:	01 97       	sbiw	r24, 0x01	; 1
 b20:	f1 f7       	brne	.-4      	; 0xb1e <main+0x77c>
 b22:	c8 01       	movw	r24, r16
 b24:	01 97       	sbiw	r24, 0x01	; 1
 b26:	f1 f7       	brne	.-4      	; 0xb24 <main+0x782>
 b28:	c8 01       	movw	r24, r16
 b2a:	01 97       	sbiw	r24, 0x01	; 1
 b2c:	f1 f7       	brne	.-4      	; 0xb2a <main+0x788>
 b2e:	c8 01       	movw	r24, r16
 b30:	01 97       	sbiw	r24, 0x01	; 1
 b32:	f1 f7       	brne	.-4      	; 0xb30 <main+0x78e>
 b34:	c8 01       	movw	r24, r16
 b36:	01 97       	sbiw	r24, 0x01	; 1
 b38:	f1 f7       	brne	.-4      	; 0xb36 <main+0x794>
 b3a:	c8 01       	movw	r24, r16
 b3c:	01 97       	sbiw	r24, 0x01	; 1
 b3e:	f1 f7       	brne	.-4      	; 0xb3c <main+0x79a>
 b40:	c8 01       	movw	r24, r16
 b42:	01 97       	sbiw	r24, 0x01	; 1
 b44:	f1 f7       	brne	.-4      	; 0xb42 <main+0x7a0>
 b46:	c8 01       	movw	r24, r16
 b48:	01 97       	sbiw	r24, 0x01	; 1
 b4a:	f1 f7       	brne	.-4      	; 0xb48 <main+0x7a6>
 b4c:	c8 01       	movw	r24, r16
 b4e:	01 97       	sbiw	r24, 0x01	; 1
 b50:	f1 f7       	brne	.-4      	; 0xb4e <main+0x7ac>
 b52:	c8 01       	movw	r24, r16
 b54:	01 97       	sbiw	r24, 0x01	; 1
 b56:	f1 f7       	brne	.-4      	; 0xb54 <main+0x7b2>
 b58:	c8 01       	movw	r24, r16
 b5a:	01 97       	sbiw	r24, 0x01	; 1
 b5c:	f1 f7       	brne	.-4      	; 0xb5a <main+0x7b8>
 b5e:	c8 01       	movw	r24, r16
 b60:	01 97       	sbiw	r24, 0x01	; 1
 b62:	f1 f7       	brne	.-4      	; 0xb60 <main+0x7be>
 b64:	c8 01       	movw	r24, r16
 b66:	01 97       	sbiw	r24, 0x01	; 1
 b68:	f1 f7       	brne	.-4      	; 0xb66 <main+0x7c4>
 b6a:	4f cc       	rjmp	.-1890   	; 0x40a <main+0x68>
				case 0:
				modeStatus = 1;
				break;
			
				case 1:
				modeStatus = 2;
 b6c:	d5 2c       	mov	r13, r5
 b6e:	da cc       	rjmp	.-1612   	; 0x524 <main+0x182>
				break;

				case 2:
				modeStatus = 3;
 b70:	d4 2c       	mov	r13, r4
 b72:	d8 cc       	rjmp	.-1616   	; 0x524 <main+0x182>

00000b74 <__fixsfsi>:
 b74:	04 d0       	rcall	.+8      	; 0xb7e <__fixunssfsi>
 b76:	68 94       	set
 b78:	b1 11       	cpse	r27, r1
 b7a:	8d c0       	rjmp	.+282    	; 0xc96 <__fp_szero>
 b7c:	08 95       	ret

00000b7e <__fixunssfsi>:
 b7e:	70 d0       	rcall	.+224    	; 0xc60 <__fp_splitA>
 b80:	88 f0       	brcs	.+34     	; 0xba4 <__fixunssfsi+0x26>
 b82:	9f 57       	subi	r25, 0x7F	; 127
 b84:	90 f0       	brcs	.+36     	; 0xbaa <__fixunssfsi+0x2c>
 b86:	b9 2f       	mov	r27, r25
 b88:	99 27       	eor	r25, r25
 b8a:	b7 51       	subi	r27, 0x17	; 23
 b8c:	a0 f0       	brcs	.+40     	; 0xbb6 <__fixunssfsi+0x38>
 b8e:	d1 f0       	breq	.+52     	; 0xbc4 <__fixunssfsi+0x46>
 b90:	66 0f       	add	r22, r22
 b92:	77 1f       	adc	r23, r23
 b94:	88 1f       	adc	r24, r24
 b96:	99 1f       	adc	r25, r25
 b98:	1a f0       	brmi	.+6      	; 0xba0 <__fixunssfsi+0x22>
 b9a:	ba 95       	dec	r27
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__fixunssfsi+0x12>
 b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__fixunssfsi+0x46>
 ba0:	b1 30       	cpi	r27, 0x01	; 1
 ba2:	81 f0       	breq	.+32     	; 0xbc4 <__fixunssfsi+0x46>
 ba4:	77 d0       	rcall	.+238    	; 0xc94 <__fp_zero>
 ba6:	b1 e0       	ldi	r27, 0x01	; 1
 ba8:	08 95       	ret
 baa:	74 c0       	rjmp	.+232    	; 0xc94 <__fp_zero>
 bac:	67 2f       	mov	r22, r23
 bae:	78 2f       	mov	r23, r24
 bb0:	88 27       	eor	r24, r24
 bb2:	b8 5f       	subi	r27, 0xF8	; 248
 bb4:	39 f0       	breq	.+14     	; 0xbc4 <__fixunssfsi+0x46>
 bb6:	b9 3f       	cpi	r27, 0xF9	; 249
 bb8:	cc f3       	brlt	.-14     	; 0xbac <__fixunssfsi+0x2e>
 bba:	86 95       	lsr	r24
 bbc:	77 95       	ror	r23
 bbe:	67 95       	ror	r22
 bc0:	b3 95       	inc	r27
 bc2:	d9 f7       	brne	.-10     	; 0xbba <__fixunssfsi+0x3c>
 bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__fixunssfsi+0x56>
 bc6:	90 95       	com	r25
 bc8:	80 95       	com	r24
 bca:	70 95       	com	r23
 bcc:	61 95       	neg	r22
 bce:	7f 4f       	sbci	r23, 0xFF	; 255
 bd0:	8f 4f       	sbci	r24, 0xFF	; 255
 bd2:	9f 4f       	sbci	r25, 0xFF	; 255
 bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
 bd6:	e8 94       	clt
 bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
 bda:	97 fb       	bst	r25, 7
 bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
 bde:	90 95       	com	r25
 be0:	80 95       	com	r24
 be2:	70 95       	com	r23
 be4:	61 95       	neg	r22
 be6:	7f 4f       	sbci	r23, 0xFF	; 255
 be8:	8f 4f       	sbci	r24, 0xFF	; 255
 bea:	9f 4f       	sbci	r25, 0xFF	; 255
 bec:	99 23       	and	r25, r25
 bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
 bf0:	f9 2f       	mov	r31, r25
 bf2:	96 e9       	ldi	r25, 0x96	; 150
 bf4:	bb 27       	eor	r27, r27
 bf6:	93 95       	inc	r25
 bf8:	f6 95       	lsr	r31
 bfa:	87 95       	ror	r24
 bfc:	77 95       	ror	r23
 bfe:	67 95       	ror	r22
 c00:	b7 95       	ror	r27
 c02:	f1 11       	cpse	r31, r1
 c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
 c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
 c08:	bb 0f       	add	r27, r27
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
 c0c:	60 ff       	sbrs	r22, 0
 c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
 c10:	6f 5f       	subi	r22, 0xFF	; 255
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
 c1a:	88 23       	and	r24, r24
 c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
 c1e:	96 e9       	ldi	r25, 0x96	; 150
 c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
 c22:	77 23       	and	r23, r23
 c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
 c26:	9e e8       	ldi	r25, 0x8E	; 142
 c28:	87 2f       	mov	r24, r23
 c2a:	76 2f       	mov	r23, r22
 c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
 c2e:	66 23       	and	r22, r22
 c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
 c32:	96 e8       	ldi	r25, 0x86	; 134
 c34:	86 2f       	mov	r24, r22
 c36:	70 e0       	ldi	r23, 0x00	; 0
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
 c3c:	9a 95       	dec	r25
 c3e:	66 0f       	add	r22, r22
 c40:	77 1f       	adc	r23, r23
 c42:	88 1f       	adc	r24, r24
 c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
 c46:	88 0f       	add	r24, r24
 c48:	96 95       	lsr	r25
 c4a:	87 95       	ror	r24
 c4c:	97 f9       	bld	r25, 7
 c4e:	08 95       	ret

00000c50 <__fp_split3>:
 c50:	57 fd       	sbrc	r21, 7
 c52:	90 58       	subi	r25, 0x80	; 128
 c54:	44 0f       	add	r20, r20
 c56:	55 1f       	adc	r21, r21
 c58:	59 f0       	breq	.+22     	; 0xc70 <__fp_splitA+0x10>
 c5a:	5f 3f       	cpi	r21, 0xFF	; 255
 c5c:	71 f0       	breq	.+28     	; 0xc7a <__fp_splitA+0x1a>
 c5e:	47 95       	ror	r20

00000c60 <__fp_splitA>:
 c60:	88 0f       	add	r24, r24
 c62:	97 fb       	bst	r25, 7
 c64:	99 1f       	adc	r25, r25
 c66:	61 f0       	breq	.+24     	; 0xc80 <__fp_splitA+0x20>
 c68:	9f 3f       	cpi	r25, 0xFF	; 255
 c6a:	79 f0       	breq	.+30     	; 0xc8a <__fp_splitA+0x2a>
 c6c:	87 95       	ror	r24
 c6e:	08 95       	ret
 c70:	12 16       	cp	r1, r18
 c72:	13 06       	cpc	r1, r19
 c74:	14 06       	cpc	r1, r20
 c76:	55 1f       	adc	r21, r21
 c78:	f2 cf       	rjmp	.-28     	; 0xc5e <__fp_split3+0xe>
 c7a:	46 95       	lsr	r20
 c7c:	f1 df       	rcall	.-30     	; 0xc60 <__fp_splitA>
 c7e:	08 c0       	rjmp	.+16     	; 0xc90 <__fp_splitA+0x30>
 c80:	16 16       	cp	r1, r22
 c82:	17 06       	cpc	r1, r23
 c84:	18 06       	cpc	r1, r24
 c86:	99 1f       	adc	r25, r25
 c88:	f1 cf       	rjmp	.-30     	; 0xc6c <__fp_splitA+0xc>
 c8a:	86 95       	lsr	r24
 c8c:	71 05       	cpc	r23, r1
 c8e:	61 05       	cpc	r22, r1
 c90:	08 94       	sec
 c92:	08 95       	ret

00000c94 <__fp_zero>:
 c94:	e8 94       	clt

00000c96 <__fp_szero>:
 c96:	bb 27       	eor	r27, r27
 c98:	66 27       	eor	r22, r22
 c9a:	77 27       	eor	r23, r23
 c9c:	cb 01       	movw	r24, r22
 c9e:	97 f9       	bld	r25, 7
 ca0:	08 95       	ret

00000ca2 <__mulsf3>:
 ca2:	0a d0       	rcall	.+20     	; 0xcb8 <__mulsf3x>
 ca4:	80 c0       	rjmp	.+256    	; 0xda6 <__fp_round>
 ca6:	71 d0       	rcall	.+226    	; 0xd8a <__fp_pscA>
 ca8:	28 f0       	brcs	.+10     	; 0xcb4 <__mulsf3+0x12>
 caa:	76 d0       	rcall	.+236    	; 0xd98 <__fp_pscB>
 cac:	18 f0       	brcs	.+6      	; 0xcb4 <__mulsf3+0x12>
 cae:	95 23       	and	r25, r21
 cb0:	09 f0       	breq	.+2      	; 0xcb4 <__mulsf3+0x12>
 cb2:	62 c0       	rjmp	.+196    	; 0xd78 <__fp_inf>
 cb4:	67 c0       	rjmp	.+206    	; 0xd84 <__fp_nan>
 cb6:	ef cf       	rjmp	.-34     	; 0xc96 <__fp_szero>

00000cb8 <__mulsf3x>:
 cb8:	cb df       	rcall	.-106    	; 0xc50 <__fp_split3>
 cba:	a8 f3       	brcs	.-22     	; 0xca6 <__mulsf3+0x4>

00000cbc <__mulsf3_pse>:
 cbc:	99 23       	and	r25, r25
 cbe:	d9 f3       	breq	.-10     	; 0xcb6 <__mulsf3+0x14>
 cc0:	55 23       	and	r21, r21
 cc2:	c9 f3       	breq	.-14     	; 0xcb6 <__mulsf3+0x14>
 cc4:	95 0f       	add	r25, r21
 cc6:	50 e0       	ldi	r21, 0x00	; 0
 cc8:	55 1f       	adc	r21, r21
 cca:	aa 27       	eor	r26, r26
 ccc:	ee 27       	eor	r30, r30
 cce:	ff 27       	eor	r31, r31
 cd0:	bb 27       	eor	r27, r27
 cd2:	00 24       	eor	r0, r0
 cd4:	08 94       	sec
 cd6:	67 95       	ror	r22
 cd8:	20 f4       	brcc	.+8      	; 0xce2 <__mulsf3_pse+0x26>
 cda:	e2 0f       	add	r30, r18
 cdc:	f3 1f       	adc	r31, r19
 cde:	b4 1f       	adc	r27, r20
 ce0:	0a 1e       	adc	r0, r26
 ce2:	22 0f       	add	r18, r18
 ce4:	33 1f       	adc	r19, r19
 ce6:	44 1f       	adc	r20, r20
 ce8:	aa 1f       	adc	r26, r26
 cea:	66 95       	lsr	r22
 cec:	a9 f7       	brne	.-22     	; 0xcd8 <__mulsf3_pse+0x1c>
 cee:	77 95       	ror	r23
 cf0:	30 f4       	brcc	.+12     	; 0xcfe <__mulsf3_pse+0x42>
 cf2:	f3 0f       	add	r31, r19
 cf4:	b4 1f       	adc	r27, r20
 cf6:	0a 1e       	adc	r0, r26
 cf8:	12 1e       	adc	r1, r18
 cfa:	08 f4       	brcc	.+2      	; 0xcfe <__mulsf3_pse+0x42>
 cfc:	63 95       	inc	r22
 cfe:	33 0f       	add	r19, r19
 d00:	44 1f       	adc	r20, r20
 d02:	aa 1f       	adc	r26, r26
 d04:	22 1f       	adc	r18, r18
 d06:	76 95       	lsr	r23
 d08:	99 f7       	brne	.-26     	; 0xcf0 <__mulsf3_pse+0x34>
 d0a:	87 95       	ror	r24
 d0c:	20 f4       	brcc	.+8      	; 0xd16 <__mulsf3_pse+0x5a>
 d0e:	b4 0f       	add	r27, r20
 d10:	0a 1e       	adc	r0, r26
 d12:	12 1e       	adc	r1, r18
 d14:	63 1f       	adc	r22, r19
 d16:	44 0f       	add	r20, r20
 d18:	aa 1f       	adc	r26, r26
 d1a:	22 1f       	adc	r18, r18
 d1c:	33 1f       	adc	r19, r19
 d1e:	86 95       	lsr	r24
 d20:	a9 f7       	brne	.-22     	; 0xd0c <__mulsf3_pse+0x50>
 d22:	86 2f       	mov	r24, r22
 d24:	71 2d       	mov	r23, r1
 d26:	60 2d       	mov	r22, r0
 d28:	11 24       	eor	r1, r1
 d2a:	9f 57       	subi	r25, 0x7F	; 127
 d2c:	50 40       	sbci	r21, 0x00	; 0
 d2e:	8a f0       	brmi	.+34     	; 0xd52 <__mulsf3_pse+0x96>
 d30:	e1 f0       	breq	.+56     	; 0xd6a <__mulsf3_pse+0xae>
 d32:	88 23       	and	r24, r24
 d34:	4a f0       	brmi	.+18     	; 0xd48 <__mulsf3_pse+0x8c>
 d36:	ee 0f       	add	r30, r30
 d38:	ff 1f       	adc	r31, r31
 d3a:	bb 1f       	adc	r27, r27
 d3c:	66 1f       	adc	r22, r22
 d3e:	77 1f       	adc	r23, r23
 d40:	88 1f       	adc	r24, r24
 d42:	91 50       	subi	r25, 0x01	; 1
 d44:	50 40       	sbci	r21, 0x00	; 0
 d46:	a9 f7       	brne	.-22     	; 0xd32 <__mulsf3_pse+0x76>
 d48:	9e 3f       	cpi	r25, 0xFE	; 254
 d4a:	51 05       	cpc	r21, r1
 d4c:	70 f0       	brcs	.+28     	; 0xd6a <__mulsf3_pse+0xae>
 d4e:	14 c0       	rjmp	.+40     	; 0xd78 <__fp_inf>
 d50:	a2 cf       	rjmp	.-188    	; 0xc96 <__fp_szero>
 d52:	5f 3f       	cpi	r21, 0xFF	; 255
 d54:	ec f3       	brlt	.-6      	; 0xd50 <__mulsf3_pse+0x94>
 d56:	98 3e       	cpi	r25, 0xE8	; 232
 d58:	dc f3       	brlt	.-10     	; 0xd50 <__mulsf3_pse+0x94>
 d5a:	86 95       	lsr	r24
 d5c:	77 95       	ror	r23
 d5e:	67 95       	ror	r22
 d60:	b7 95       	ror	r27
 d62:	f7 95       	ror	r31
 d64:	e7 95       	ror	r30
 d66:	9f 5f       	subi	r25, 0xFF	; 255
 d68:	c1 f7       	brne	.-16     	; 0xd5a <__mulsf3_pse+0x9e>
 d6a:	fe 2b       	or	r31, r30
 d6c:	88 0f       	add	r24, r24
 d6e:	91 1d       	adc	r25, r1
 d70:	96 95       	lsr	r25
 d72:	87 95       	ror	r24
 d74:	97 f9       	bld	r25, 7
 d76:	08 95       	ret

00000d78 <__fp_inf>:
 d78:	97 f9       	bld	r25, 7
 d7a:	9f 67       	ori	r25, 0x7F	; 127
 d7c:	80 e8       	ldi	r24, 0x80	; 128
 d7e:	70 e0       	ldi	r23, 0x00	; 0
 d80:	60 e0       	ldi	r22, 0x00	; 0
 d82:	08 95       	ret

00000d84 <__fp_nan>:
 d84:	9f ef       	ldi	r25, 0xFF	; 255
 d86:	80 ec       	ldi	r24, 0xC0	; 192
 d88:	08 95       	ret

00000d8a <__fp_pscA>:
 d8a:	00 24       	eor	r0, r0
 d8c:	0a 94       	dec	r0
 d8e:	16 16       	cp	r1, r22
 d90:	17 06       	cpc	r1, r23
 d92:	18 06       	cpc	r1, r24
 d94:	09 06       	cpc	r0, r25
 d96:	08 95       	ret

00000d98 <__fp_pscB>:
 d98:	00 24       	eor	r0, r0
 d9a:	0a 94       	dec	r0
 d9c:	12 16       	cp	r1, r18
 d9e:	13 06       	cpc	r1, r19
 da0:	14 06       	cpc	r1, r20
 da2:	05 06       	cpc	r0, r21
 da4:	08 95       	ret

00000da6 <__fp_round>:
 da6:	09 2e       	mov	r0, r25
 da8:	03 94       	inc	r0
 daa:	00 0c       	add	r0, r0
 dac:	11 f4       	brne	.+4      	; 0xdb2 <__fp_round+0xc>
 dae:	88 23       	and	r24, r24
 db0:	52 f0       	brmi	.+20     	; 0xdc6 <__fp_round+0x20>
 db2:	bb 0f       	add	r27, r27
 db4:	40 f4       	brcc	.+16     	; 0xdc6 <__fp_round+0x20>
 db6:	bf 2b       	or	r27, r31
 db8:	11 f4       	brne	.+4      	; 0xdbe <__fp_round+0x18>
 dba:	60 ff       	sbrs	r22, 0
 dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <__fp_round+0x20>
 dbe:	6f 5f       	subi	r22, 0xFF	; 255
 dc0:	7f 4f       	sbci	r23, 0xFF	; 255
 dc2:	8f 4f       	sbci	r24, 0xFF	; 255
 dc4:	9f 4f       	sbci	r25, 0xFF	; 255
 dc6:	08 95       	ret

00000dc8 <_exit>:
 dc8:	f8 94       	cli

00000dca <__stop_program>:
 dca:	ff cf       	rjmp	.-2      	; 0xdca <__stop_program>
