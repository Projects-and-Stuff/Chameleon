
Touch_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  000014c0  00001554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  008000fa  008000fa  000015ee  2**0
                  ALLOC
  3 .stab         00001758  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000052e  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  00003278  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001232  00000000  00000000  000033e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004e7  00000000  00000000  00004612  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000969  00000000  00000000  00004af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00005464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b4  00000000  00000000  00005c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005fc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	9e c1       	rjmp	.+828    	; 0x350 <__vector_9>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	10 e0       	ldi	r17, 0x00	; 0
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e0 ec       	ldi	r30, 0xC0	; 192
      36:	f4 e1       	ldi	r31, 0x14	; 20
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	aa 3f       	cpi	r26, 0xFA	; 250
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
      44:	11 e0       	ldi	r17, 0x01	; 1
      46:	aa ef       	ldi	r26, 0xFA	; 250
      48:	b0 e0       	ldi	r27, 0x00	; 0
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	ae 34       	cpi	r26, 0x4E	; 78
      50:	b1 07       	cpc	r27, r17
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	7a d8       	rcall	.-3852   	; 0xfffff14a <__eeprom_end+0xff7ef14a>
      56:	32 ca       	rjmp	.-2972   	; 0xfffff4bc <__eeprom_end+0xff7ef4bc>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
      5a:	00 c0       	rjmp	.+0      	; 0x5c <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
      5c:	00 c0       	rjmp	.+0      	; 0x5e <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
      5e:	00 c0       	rjmp	.+0      	; 0x60 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
      60:	00 c0       	rjmp	.+0      	; 0x62 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
      62:	00 c0       	rjmp	.+0      	; 0x64 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
      64:	00 c0       	rjmp	.+0      	; 0x66 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
      66:	00 00       	nop
	ret          ; 3   "
      68:	08 95       	ret

0000006a <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
      6a:	d6 98       	cbi	0x1a, 6	; 26
	cbi SCL_DDR,SCL		;release SCL
      6c:	d4 98       	cbi	0x1a, 4	; 26
	cbi SDA_OUT,SDA
      6e:	de 98       	cbi	0x1b, 6	; 27
	cbi SCL_OUT,SCL
      70:	dc 98       	cbi	0x1b, 4	; 27
	ret
      72:	08 95       	ret

00000074 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
      74:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay T/2
      76:	f1 df       	rcall	.-30     	; 0x5a <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
      78:	1d d0       	rcall	.+58     	; 0xb4 <i2c_write>
	ret
      7a:	08 95       	ret

0000007c <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
      7c:	d4 9a       	sbi	0x1a, 4	; 26
	rcall 	i2c_delay_T2	;delay  T/2
      7e:	ed df       	rcall	.-38     	; 0x5a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
      80:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      82:	eb df       	rcall	.-42     	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      84:	d4 98       	cbi	0x1a, 4	; 26
	rcall 	i2c_delay_T2	;delay  T/2
      86:	e9 df       	rcall	.-46     	; 0x5a <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
      88:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay	T/2
      8a:	e7 df       	rcall	.-50     	; 0x5a <i2c_delay_T2>
	
	rcall	i2c_write	;write address
      8c:	13 d0       	rcall	.+38     	; 0xb4 <i2c_write>
	ret
      8e:	08 95       	ret

00000090 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
      90:	08 2e       	mov	r0, r24

00000092 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
      92:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay T/2
      94:	e2 df       	rcall	.-60     	; 0x5a <i2c_delay_T2>
	mov	r24,__tmp_reg__
      96:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
      98:	0d d0       	rcall	.+26     	; 0xb4 <i2c_write>
	tst	r24		;if device not busy -> done
      9a:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
      9c:	11 f0       	breq	.+4      	; 0xa2 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
      9e:	02 d0       	rcall	.+4      	; 0xa4 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
      a0:	f8 cf       	rjmp	.-16     	; 0x92 <i2c_start_wait1>

000000a2 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
      a2:	08 95       	ret

000000a4 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
      a4:	d4 9a       	sbi	0x1a, 4	; 26
	sbi	SDA_DDR,SDA	;force SDA low
      a6:	d6 9a       	sbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      a8:	d8 df       	rcall	.-80     	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      aa:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
      ac:	d6 df       	rcall	.-84     	; 0x5a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
      ae:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      b0:	d4 df       	rcall	.-88     	; 0x5a <i2c_delay_T2>
	ret
      b2:	08 95       	ret

000000b4 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
      b4:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
      b6:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
      b8:	01 c0       	rjmp	.+2      	; 0xbc <i2c_write_first>

000000ba <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
      ba:	88 0f       	add	r24, r24

000000bc <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
      bc:	59 f0       	breq	.+22     	; 0xd4 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
      be:	d4 9a       	sbi	0x1a, 4	; 26
	brcc	i2c_write_low
      c0:	18 f4       	brcc	.+6      	; 0xc8 <i2c_write_low>
	nop
      c2:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
      c4:	d6 98       	cbi	0x1a, 6	; 26
	rjmp	i2c_write_high
      c6:	02 c0       	rjmp	.+4      	; 0xcc <i2c_write_high>

000000c8 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
      c8:	d6 9a       	sbi	0x1a, 6	; 26
	rjmp	i2c_write_high
      ca:	00 c0       	rjmp	.+0      	; 0xcc <i2c_write_high>

000000cc <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
      cc:	c6 df       	rcall	.-116    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      ce:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
      d0:	c4 df       	rcall	.-120    	; 0x5a <i2c_delay_T2>
	rjmp	i2c_write_bit
      d2:	f3 cf       	rjmp	.-26     	; 0xba <i2c_write_bit>

000000d4 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
      d4:	d4 9a       	sbi	0x1a, 4	; 26
	cbi	SDA_DDR,SDA	;release SDA
      d6:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      d8:	c0 df       	rcall	.-128    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      da:	d4 98       	cbi	0x1a, 4	; 26

000000dc <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
      dc:	cc 9b       	sbis	0x19, 4	; 25
	rjmp	i2c_ack_wait
      de:	fe cf       	rjmp	.-4      	; 0xdc <i2c_ack_wait>
	
	clr	r24		;return 0
      e0:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
      e2:	ce 99       	sbic	0x19, 6	; 25
	ldi	r24,1
      e4:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
      e6:	b9 df       	rcall	.-142    	; 0x5a <i2c_delay_T2>
	clr	r25
      e8:	99 27       	eor	r25, r25
	ret
      ea:	08 95       	ret

000000ec <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
      ec:	88 27       	eor	r24, r24
	rjmp	i2c_read
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <i2c_read>

000000f0 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
      f0:	81 e0       	ldi	r24, 0x01	; 1

000000f2 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
      f2:	71 e0       	ldi	r23, 0x01	; 1

000000f4 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
      f4:	d4 9a       	sbi	0x1a, 4	; 26
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
      f6:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      f8:	b0 df       	rcall	.-160    	; 0x5a <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
      fa:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
      fc:	ae df       	rcall	.-164    	; 0x5a <i2c_delay_T2>

000000fe <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
      fe:	cc 9b       	sbis	0x19, 4	; 25
    rjmp	i2c_read_stretch
     100:	fe cf       	rjmp	.-4      	; 0xfe <i2c_read_stretch>
    	
	clc			;clear carry flag
     102:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     104:	ce 99       	sbic	0x19, 6	; 25
	sec			;  set carry flag
     106:	08 94       	sec
	
	rol	r23		;store bit
     108:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     10a:	a0 f7       	brcc	.-24     	; 0xf4 <i2c_read_bit>

0000010c <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     10c:	d4 9a       	sbi	0x1a, 4	; 26
	cpi	r24,1
     10e:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     110:	11 f0       	breq	.+4      	; 0x116 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     112:	d6 98       	cbi	0x1a, 6	; 26
	rjmp	i2c_put_ack_high
     114:	01 c0       	rjmp	.+2      	; 0x118 <i2c_put_ack_high>

00000116 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     116:	d6 9a       	sbi	0x1a, 6	; 26

00000118 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     118:	a0 df       	rcall	.-192    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     11a:	d4 98       	cbi	0x1a, 4	; 26

0000011c <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     11c:	cc 9b       	sbis	0x19, 4	; 25
	rjmp	i2c_put_ack_wait
     11e:	fe cf       	rjmp	.-4      	; 0x11c <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     120:	9c df       	rcall	.-200    	; 0x5a <i2c_delay_T2>
	mov	r24,r23
     122:	87 2f       	mov	r24, r23
	clr	r25
     124:	99 27       	eor	r25, r25
	ret
     126:	08 95       	ret

00000128 <pca9685_init2>:
	12,    // Channel 0
};


void pca9685_init2(int address)
{
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	d8 2f       	mov	r29, r24
	/********************************************/
	/* Init code for the PCA9685                */
	/* Input:[address of the pc9685 to init]    */
	/* Output:[void]                            */
	/********************************************/
	i2c_start(address);                // Start
     12e:	a2 df       	rcall	.-188    	; 0x74 <i2c_start>
	i2c_write(MODE1);           // Mode 1 address
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	c0 df       	rcall	.-128    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_RESTART);      // Setting mode to sleep so we can change the default PWM frequency
     134:	80 e8       	ldi	r24, 0x80	; 128
     136:	be df       	rcall	.-132    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
     138:	b5 df       	rcall	.-150    	; 0xa4 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13a:	8f e1       	ldi	r24, 0x1F	; 31
     13c:	9e e4       	ldi	r25, 0x4E	; 78
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <pca9685_init2+0x16>
     142:	00 c0       	rjmp	.+0      	; 0x144 <pca9685_init2+0x1c>
     144:	00 00       	nop
	
	_delay_ms(10);
	
	i2c_start(address);                // Start
     146:	8d 2f       	mov	r24, r29
     148:	95 df       	rcall	.-214    	; 0x74 <i2c_start>
	i2c_write(MODE1);            // PWM frequency PRE_SCALE address
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	b3 df       	rcall	.-154    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_AI);            // osc_clk/(4096*update_rate) // 25000000/(4096*1500)= 4.069 ~4
     14e:	80 e2       	ldi	r24, 0x20	; 32
     150:	b1 df       	rcall	.-158    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
     152:	a8 df       	rcall	.-176    	; 0xa4 <i2c_stop>
     154:	8f e1       	ldi	r24, 0x1F	; 31
     156:	9e e4       	ldi	r25, 0x4E	; 78
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <pca9685_init2+0x30>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <pca9685_init2+0x36>
     15e:	00 00       	nop
	
	_delay_ms(10);
	
	i2c_start(address);                // Start
     160:	8d 2f       	mov	r24, r29
     162:	88 df       	rcall	.-240    	; 0x74 <i2c_start>
	i2c_write(MODE2);           // Mode 1 register address
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	a6 df       	rcall	.-180    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_INVRT);            // Set to our preferred mode[ Reset, INT_CLK, Auto-Increment, Normal Mode]
     168:	80 e1       	ldi	r24, 0x10	; 16
     16a:	a4 df       	rcall	.-184    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
     16c:	9b df       	rcall	.-202    	; 0xa4 <i2c_stop>
     16e:	8f e1       	ldi	r24, 0x1F	; 31
     170:	9e e4       	ldi	r25, 0x4E	; 78
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <pca9685_init2+0x4a>
     176:	00 c0       	rjmp	.+0      	; 0x178 <pca9685_init2+0x50>
     178:	00 00       	nop
     17a:	c6 e0       	ldi	r28, 0x06	; 6
	_delay_ms(10);
	
	
	for(int i = 0; i <= LEDCOUNT; i++)
	{
		i2c_start(address);                // Start
     17c:	8d 2f       	mov	r24, r29
     17e:	7a df       	rcall	.-268    	; 0x74 <i2c_start>
		i2c_write(LED0_ON_L + 4 * i);
     180:	8c 2f       	mov	r24, r28
     182:	98 df       	rcall	.-208    	; 0xb4 <i2c_write>
		i2c_write(0x00);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	96 df       	rcall	.-212    	; 0xb4 <i2c_write>
		i2c_write(0x00);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	94 df       	rcall	.-216    	; 0xb4 <i2c_write>
		i2c_write(0x10);
     18c:	80 e1       	ldi	r24, 0x10	; 16
     18e:	92 df       	rcall	.-220    	; 0xb4 <i2c_write>
		i2c_write(0x50);
     190:	80 e5       	ldi	r24, 0x50	; 80
     192:	90 df       	rcall	.-224    	; 0xb4 <i2c_write>
		i2c_stop();                 // Stop
     194:	87 df       	rcall	.-242    	; 0xa4 <i2c_stop>
     196:	8f e1       	ldi	r24, 0x1F	; 31
     198:	9e e4       	ldi	r25, 0x4E	; 78
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <pca9685_init2+0x72>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <pca9685_init2+0x78>
     1a0:	00 00       	nop
     1a2:	cc 5f       	subi	r28, 0xFC	; 252
	i2c_stop();                 // Stop
	
	_delay_ms(10);
	
	
	for(int i = 0; i <= LEDCOUNT; i++)
     1a4:	c6 34       	cpi	r28, 0x46	; 70
     1a6:	51 f7       	brne	.-44     	; 0x17c <pca9685_init2+0x54>
		i2c_stop();                 // Stop
		_delay_ms(10);
		
	}
	
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	08 95       	ret

000001ae <pca9685_send_all>:



void pca9685_send_all(int address) 
{ 
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	0f 92       	push	r0
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	f8 2e       	mov	r15, r24
     1c4:	0c e9       	ldi	r16, 0x9C	; 156
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	96 e0       	ldi	r25, 0x06	; 6
    int i = 0;                  // temp register for LEDCOUNT 
    int pwm;                    // temp register for PWM 
    for(i=0; i<=LEDCOUNT; i++)  // cycle through all 16 LED 
   
	 {
		 i2c_start(address);            // Start
     1ca:	8f 2d       	mov	r24, r15
     1cc:	99 83       	std	Y+1, r25	; 0x01
     1ce:	52 df       	rcall	.-348    	; 0x74 <i2c_start>
		 i2c_write(LED0_ON_L + 4 * i);// start from LED0 address, each pwm constructed from
     1d0:	99 81       	ldd	r25, Y+1	; 0x01
     1d2:	89 2f       	mov	r24, r25
     1d4:	6f df       	rcall	.-290    	; 0xb4 <i2c_write>
		 i2c_write(0x00);        // 4 12bit register, LED_ON_L
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	6d df       	rcall	.-294    	; 0xb4 <i2c_write>
		 i2c_write(0x00);        // LED_ON_H
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	6b df       	rcall	.-298    	; 0xb4 <i2c_write>
	
}



void pca9685_send_all(int address) 
     1de:	68 01       	movw	r12, r16
		 i2c_start(address);            // Start
		 i2c_write(LED0_ON_L + 4 * i);// start from LED0 address, each pwm constructed from
		 i2c_write(0x00);        // 4 12bit register, LED_ON_L
		 i2c_write(0x00);        // LED_ON_H
		 pwm = PWMData[i];       // update selected LED data in the array
		 i2c_write(pwm);         // LED_OFF_L
     1e0:	f8 01       	movw	r30, r16
     1e2:	80 81       	ld	r24, Z
     1e4:	67 df       	rcall	.-306    	; 0xb4 <i2c_write>
     1e6:	0c 5f       	subi	r16, 0xFC	; 252
     1e8:	1f 4f       	sbci	r17, 0xFF	; 255
		 pwm = PWMData[i]>>8;    // update selected LED data in the array
		 i2c_write(pwm);         // LED_OFF_H
     1ea:	f6 01       	movw	r30, r12
     1ec:	81 81       	ldd	r24, Z+1	; 0x01
     1ee:	62 df       	rcall	.-316    	; 0xb4 <i2c_write>
		 i2c_stop();             // Stop
     1f0:	59 df       	rcall	.-334    	; 0xa4 <i2c_stop>
     1f2:	2f ef       	ldi	r18, 0xFF	; 255
     1f4:	36 e7       	ldi	r19, 0x76	; 118
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	21 50       	subi	r18, 0x01	; 1
     1fa:	30 40       	sbci	r19, 0x00	; 0
     1fc:	40 40       	sbci	r20, 0x00	; 0
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <pca9685_send_all+0x4a>
     200:	00 c0       	rjmp	.+0      	; 0x202 <pca9685_send_all+0x54>
     202:	00 00       	nop
     204:	99 81       	ldd	r25, Y+1	; 0x01
     206:	9c 5f       	subi	r25, 0xFC	; 252
/* Input:[address of the pc9685 to update]  */ 
/* Output:[void]                            */ 
/********************************************/ 
    int i = 0;                  // temp register for LEDCOUNT 
    int pwm;                    // temp register for PWM 
    for(i=0; i<=LEDCOUNT; i++)  // cycle through all 16 LED 
     208:	96 34       	cpi	r25, 0x46	; 70
     20a:	f9 f6       	brne	.-66     	; 0x1ca <pca9685_send_all+0x1c>
		 i2c_stop();             // Stop
		_delay_ms(60);           // delay at least 500 us

	 }
	 
} 
     20c:	0f 90       	pop	r0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	ff 90       	pop	r15
     218:	df 90       	pop	r13
     21a:	cf 90       	pop	r12
     21c:	08 95       	ret

0000021e <pca9685_send>:

void pca9685_send(int address, long value, int led) 
{ 
     21e:	cf 92       	push	r12
     220:	df 92       	push	r13
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	00 d0       	rcall	.+0      	; 0x22c <pca9685_send+0xe>
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	6a 01       	movw	r12, r20
     232:	7b 01       	movw	r14, r22
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	c9 16       	cp	r12, r25
     238:	90 e1       	ldi	r25, 0x10	; 16
     23a:	d9 06       	cpc	r13, r25
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	e9 06       	cpc	r14, r25
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	f9 06       	cpc	r15, r25
     244:	34 f0       	brlt	.+12     	; 0x252 <pca9685_send+0x34>
     246:	9f ef       	ldi	r25, 0xFF	; 255
     248:	c9 2e       	mov	r12, r25
     24a:	9f e0       	ldi	r25, 0x0F	; 15
     24c:	d9 2e       	mov	r13, r25
     24e:	e1 2c       	mov	r14, r1
     250:	f1 2c       	mov	r15, r1
    int pwm;                    // temp variable for PWM 
    if(value > 4095)            // if larger than 4095 than full on 
            value = 4095;       // cant be larger than 4095 
    if(led > 15)                // if LED larger than 15 than on other chip 
            led = 15;           //***** need to implement to select next pcs9685 
    i2c_start(address);                // Start 
     252:	29 83       	std	Y+1, r18	; 0x01
     254:	3a 83       	std	Y+2, r19	; 0x02
     256:	0e df       	rcall	.-484    	; 0x74 <i2c_start>
    i2c_write(LED0_ON_L + 4 * led);  // select selected LED address 
     258:	29 81       	ldd	r18, Y+1	; 0x01
     25a:	82 2f       	mov	r24, r18
     25c:	3a 81       	ldd	r19, Y+2	; 0x02
     25e:	93 2f       	mov	r25, r19
     260:	80 31       	cpi	r24, 0x10	; 16
     262:	91 05       	cpc	r25, r1
     264:	14 f0       	brlt	.+4      	; 0x26a <__stack+0xb>
     266:	8f e0       	ldi	r24, 0x0F	; 15
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	88 0f       	add	r24, r24
     26c:	88 0f       	add	r24, r24
     26e:	8a 5f       	subi	r24, 0xFA	; 250
     270:	21 df       	rcall	.-446    	; 0xb4 <i2c_write>
    i2c_write(0x00);            // LED_ON_L 
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	1f df       	rcall	.-450    	; 0xb4 <i2c_write>
    i2c_write(0x00);            // LED_ON_H 
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	1d df       	rcall	.-454    	; 0xb4 <i2c_write>
    pwm = value;                // PWM value lo byte 
    i2c_write(pwm);             // LED_OFF_L 
     27a:	8c 2d       	mov	r24, r12
     27c:	1b df       	rcall	.-458    	; 0xb4 <i2c_write>
    pwm = value>>8;             // pwm 16 bit long, now shift upper 8 to lower 8 
    i2c_write(pwm);             // LED_OFF_H 
     27e:	8d 2d       	mov	r24, r13
     280:	19 df       	rcall	.-462    	; 0xb4 <i2c_write>
    i2c_stop();                 // STop 
     282:	10 df       	rcall	.-480    	; 0xa4 <i2c_stop>
} 
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
     290:	df 90       	pop	r13
     292:	cf 90       	pop	r12
     294:	08 95       	ret

00000296 <pca9685_brightness>:


void pca9685_brightness(int address, int percent, int led) 
{ 
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8c 01       	movw	r16, r24
     2a4:	ea 01       	movw	r28, r20
     2a6:	7a 01       	movw	r14, r20
     2a8:	ee 0c       	add	r14, r14
     2aa:	ff 1c       	adc	r15, r15
     2ac:	ee 0c       	add	r14, r14
     2ae:	ff 1c       	adc	r15, r15
/* LED to set brightness 0to15]             */ 
/* Output:[void]                            */ 
/********************************************/ 
    float off;                          // temp variable 
    const float onePercent = 40.96; 
    if (percent < 1) {                  // if % less than 1 than LED OFF 
     2b0:	16 16       	cp	r1, r22
     2b2:	17 06       	cpc	r1, r23
     2b4:	5c f0       	brlt	.+22     	; 0x2cc <pca9685_brightness+0x36>
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
     2b6:	f7 01       	movw	r30, r14
     2b8:	e4 56       	subi	r30, 0x64	; 100
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	10 82       	st	Z, r1
     2be:	11 82       	std	Z+1, r1	; 0x01
     2c0:	12 82       	std	Z+2, r1	; 0x02
     2c2:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,0,led);        // update selected LED 
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	ba 01       	movw	r22, r20
     2ca:	24 c0       	rjmp	.+72     	; 0x314 <pca9685_brightness+0x7e>
    return;                             // return from function 
    } 
    if (percent >= 100) {               // if % greater than 100 than LED ON 
     2cc:	64 36       	cpi	r22, 0x64	; 100
     2ce:	71 05       	cpc	r23, r1
     2d0:	64 f0       	brlt	.+24     	; 0x2ea <pca9685_brightness+0x54>
    PWMData[led] = PCA9685_LED_ON>>8;   // update data in array 
     2d2:	f7 01       	movw	r30, r14
     2d4:	e4 56       	subi	r30, 0x64	; 100
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	10 82       	st	Z, r1
     2da:	11 82       	std	Z+1, r1	; 0x01
     2dc:	12 82       	std	Z+2, r1	; 0x02
     2de:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,4095,led);     // update selected LED 
     2e0:	4f ef       	ldi	r20, 0xFF	; 255
     2e2:	5f e0       	ldi	r21, 0x0F	; 15
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	15 c0       	rjmp	.+42     	; 0x314 <pca9685_brightness+0x7e>
    return;                             // return from function 
    } 
    off = onePercent * percent;         // different approach with float need to check if code faster than int32 way ? 
     2ea:	88 27       	eor	r24, r24
     2ec:	77 fd       	sbrc	r23, 7
     2ee:	80 95       	com	r24
     2f0:	98 2f       	mov	r25, r24
     2f2:	a4 d7       	rcall	.+3912   	; 0x123c <__floatsisf>
     2f4:	2a e0       	ldi	r18, 0x0A	; 10
     2f6:	37 ed       	ldi	r19, 0xD7	; 215
     2f8:	43 e2       	ldi	r20, 0x23	; 35
     2fa:	52 e4       	ldi	r21, 0x42	; 66
     2fc:	03 d8       	rcall	.-4090   	; 0xfffff304 <__eeprom_end+0xff7ef304>
//    off = (int32)4096 * percent;        // calculate percent (max*percent)/100 
//    off = off / 100;                    // ex (4096*50%)=204800/100=2048 
//    x = make16(off>>8,off);             // make 16 of 32 ?! why.. dont care at this time 
    PWMData[led] = off;                 // update data array in case we update all LED next 
     2fe:	6b d7       	rcall	.+3798   	; 0x11d6 <__fixsfsi>
     300:	ab 01       	movw	r20, r22
     302:	bc 01       	movw	r22, r24
     304:	f7 01       	movw	r30, r14
     306:	e4 56       	subi	r30, 0x64	; 100
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	40 83       	st	Z, r20
     30c:	51 83       	std	Z+1, r21	; 0x01
     30e:	62 83       	std	Z+2, r22	; 0x02
     310:	73 83       	std	Z+3, r23	; 0x03
    pca9685_send(address,off,led);      // send it to pca9685 
     312:	c8 01       	movw	r24, r16
     314:	9e 01       	movw	r18, r28
     316:	83 df       	rcall	.-250    	; 0x21e <pca9685_send>
} 
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	08 95       	ret

00000326 <PCA9685AllLedOff>:

void PCA9685AllLedOff(int address) 
{ 
    i2c_start(address);                        // Start 
     326:	a6 de       	rcall	.-692    	; 0x74 <i2c_start>
    i2c_write(ALL_LED_OFF_L);         // AllLED Off register 
     328:	8c ef       	ldi	r24, 0xFC	; 252
     32a:	c4 de       	rcall	.-632    	; 0xb4 <i2c_write>
    i2c_write(0b00000000);              // data 
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	c2 de       	rcall	.-636    	; 0xb4 <i2c_write>
    i2c_write(0b00010000);              // data 
     330:	80 e1       	ldi	r24, 0x10	; 16
     332:	c0 de       	rcall	.-640    	; 0xb4 <i2c_write>
    i2c_stop();                         // Stop 
     334:	b7 de       	rcall	.-658    	; 0xa4 <i2c_stop>
} 
     336:	08 95       	ret

00000338 <init_timer_isr>:
============================================================================*/
void init_timer_isr( void )
{
   /*  set timer compare value (how often timer ISR will fire set to 1 ms timer interrupt) */

   OCR0A = ( TICKS_PER_MS * 1);
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	86 bf       	out	0x36, r24	; 54

   /*  enable timer ISR on compare A */
   TIMSK0 |= 0x02u; // Caution
     33c:	89 b7       	in	r24, 0x39	; 57
     33e:	82 60       	ori	r24, 0x02	; 2
     340:	89 bf       	out	0x39, r24	; 57
   /*  timer prescaler = system clock / 1024  */
   TCCR0B |= 0x05u; // Caution
     342:	83 b7       	in	r24, 0x33	; 51
     344:	85 60       	ori	r24, 0x05	; 5
     346:	83 bf       	out	0x33, r24	; 51
   /*  timer mode = CTC (count up to compare value, then reset)    */
   TCCR0A |= 0x02u; // Caution
     348:	80 b7       	in	r24, 0x30	; 48
     34a:	82 60       	ori	r24, 0x02	; 2
     34c:	80 bf       	out	0x30, r24	; 48
}
     34e:	08 95       	ret

00000350 <__vector_9>:

ISR(TIM0_COMPA_vect)
{
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	2f 93       	push	r18
     35c:	3f 93       	push	r19
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
  time_ms_inc++;
     362:	80 91 fd 00 	lds	r24, 0x00FD
     366:	90 91 fe 00 	lds	r25, 0x00FE
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	90 93 fe 00 	sts	0x00FE, r25
     370:	80 93 fd 00 	sts	0x00FD, r24

  if(time_ms_inc >= qt_measurement_period_msec)
     374:	20 91 dc 00 	lds	r18, 0x00DC
     378:	30 91 dd 00 	lds	r19, 0x00DD
     37c:	82 17       	cp	r24, r18
     37e:	93 07       	cpc	r25, r19
     380:	38 f0       	brcs	.+14     	; 0x390 <__vector_9+0x40>
  {
    time_ms_inc =0;
     382:	10 92 fe 00 	sts	0x00FE, r1
     386:	10 92 fd 00 	sts	0x00FD, r1
   /*  set flag: it's time to measure touch    */
   time_to_measure_touch = 1u;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	80 93 fc 00 	sts	0x00FC, r24
  else
  {

  }
  /*  update the current time */
   current_time_ms_touch++;;
     390:	80 91 fa 00 	lds	r24, 0x00FA
     394:	90 91 fb 00 	lds	r25, 0x00FB
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	90 93 fb 00 	sts	0x00FB, r25
     39e:	80 93 fa 00 	sts	0x00FA, r24
}
     3a2:	9f 91       	pop	r25
     3a4:	8f 91       	pop	r24
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <set_timer_period>:
------------------------------------------------------------------------------
Purpose :   set the timer period
============================================================================*/
void set_timer_period(uint16_t qt_measurement_period_msec)
{
	OCR0A = ( TICKS_PER_MS * 1);
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	86 bf       	out	0x36, r24	; 54
}
     3b8:	08 95       	ret

000003ba <init_system>:
Purpose :   initialise host app, pins, watchdog, etc
============================================================================*/
void init_system( void )
{
    /*  run at 4MHz (assuming internal clock is set to 8MHz)*/
    CLKPR = 0x80u;
     3ba:	80 e8       	ldi	r24, 0x80	; 128
     3bc:	86 bd       	out	0x26, r24	; 38
    CLKPR = 0x01u;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	86 bd       	out	0x26, r24	; 38

    /*  disable pull-ups    */
    MCUCR |= (1u << PUD);
     3c2:	85 b7       	in	r24, 0x35	; 53
     3c4:	80 64       	ori	r24, 0x40	; 64
     3c6:	85 bf       	out	0x35, r24	; 53

}
     3c8:	08 95       	ret

000003ca <_00110000001_>:
EXTERN reg_clyb;
EXTERN reg_flyab;
#endif
GLOBAL_FUNCTION _00110000001_
_00110000001_:
    push usr_1
     3ca:	7f 93       	push	r23
    push usr_2
     3cc:	9f 93       	push	r25
    in   usr_1,REG(PORT,PORT_YB)
     3ce:	7b b3       	in	r23, 0x1b	; 27
    mov  usr_2,p_1
     3d0:	98 2f       	mov	r25, r24
    com  usr_2
     3d2:	90 95       	com	r25
    and  usr_1,usr_2
     3d4:	79 23       	and	r23, r25
    out  REG(PORT,PORT_YB),usr_1
     3d6:	7b bb       	out	0x1b, r23	; 27
    in   usr_1,REG(PORT,PORT_YA)
     3d8:	7b b3       	in	r23, 0x1b	; 27
    mov  usr_2,p_2
     3da:	96 2f       	mov	r25, r22
    com  usr_2
     3dc:	90 95       	com	r25
    and  usr_1,usr_2
     3de:	79 23       	and	r23, r25
    out  REG(PORT,PORT_YA),usr_1
     3e0:	7b bb       	out	0x1b, r23	; 27
    mov  usr_2,p_1
     3e2:	98 2f       	mov	r25, r24
    in   usr_1,REG(DDR,PORT_YB)
     3e4:	7a b3       	in	r23, 0x1a	; 26
    or   usr_1,usr_2
     3e6:	79 2b       	or	r23, r25
    out  REG(DDR,PORT_YB),usr_1
     3e8:	7a bb       	out	0x1a, r23	; 26
    in   usr_1,REG(DDR,PORT_YA)
     3ea:	7a b3       	in	r23, 0x1a	; 26
    mov  usr_2,p_2
     3ec:	96 2f       	mov	r25, r22
    or   usr_1,usr_2
     3ee:	79 2b       	or	r23, r25
    out  REG(DDR,PORT_YA),usr_1
     3f0:	7a bb       	out	0x1a, r23	; 26
#if (NUM_X_PORTS>=1)
    mov  usr_2,p_3
     3f2:	94 2f       	mov	r25, r20
    com  usr_2
     3f4:	90 95       	com	r25
    in   usr_1,REG(PORT,PORT_X_1)
     3f6:	78 b3       	in	r23, 0x18	; 24
    and  usr_1,usr_2
     3f8:	79 23       	and	r23, r25
    out  REG(PORT,PORT_X_1),usr_1
     3fa:	78 bb       	out	0x18, r23	; 24
    in   usr_1, REG(DDR,PORT_X_1)
     3fc:	77 b3       	in	r23, 0x17	; 23
    mov  usr_2,p_3
     3fe:	94 2f       	mov	r25, r20
    or   usr_1, usr_2
     400:	79 2b       	or	r23, r25
    out  REG(DDR,PORT_X_1), usr_1    
     402:	77 bb       	out	0x17, r23	; 23
    in   usr_1, REG(DDR,PORT_X_3)
    mov  usr_2,p_5
    or   usr_1, usr_2
    out  REG(DDR,PORT_X_3), usr_1    
#endif
    cbi  REG( PORT, PORT_SMP ),SMP_BIT 
     404:	db 98       	cbi	0x1b, 3	; 27
    sbi  REG( DDR, PORT_SMP ),SMP_BIT
     406:	d3 9a       	sbi	0x1a, 3	; 26
    pop  usr_2
     408:	9f 91       	pop	r25
    pop  usr_1
     40a:	7f 91       	pop	r23
    ret
     40c:	08 95       	ret

0000040e <_00110000100_>:

GLOBAL_FUNCTION _00110000100_
_00110000100_:
    push usr_1
     40e:	7f 93       	push	r23
    push usr_2
     410:	9f 93       	push	r25
    in   usr_1, REG( DDR, PORT_YA ) 
     412:	7a b3       	in	r23, 0x1a	; 26
    sts  reg_clya, usr_1
     414:	70 93 43 01 	sts	0x0143, r23
    sts  reg_flya, usr_1
     418:	70 93 4d 01 	sts	0x014D, r23
    in   usr_1, REG( DDR, PORT_YB )
     41c:	7a b3       	in	r23, 0x1a	; 26
    sts  reg_clyb, usr_1
     41e:	70 93 46 01 	sts	0x0146, r23
    sts  reg_flyb, usr_1    
     422:	70 93 47 01 	sts	0x0147, r23

	mov  usr_1, p_1
     426:	78 2f       	mov	r23, r24
    com  usr_1
     428:	70 95       	com	r23
  	lds  usr_2, reg_flya
     42a:	90 91 4d 01 	lds	r25, 0x014D
    and  usr_2,usr_1
     42e:	97 23       	and	r25, r23
    sts  reg_flya, usr_2
     430:	90 93 4d 01 	sts	0x014D, r25
  	mov  usr_1, p_2
     434:	76 2f       	mov	r23, r22
    com  usr_1
     436:	70 95       	com	r23
  	lds  usr_2, reg_flyb
     438:	90 91 47 01 	lds	r25, 0x0147
	and  usr_2,usr_1
     43c:	97 23       	and	r25, r23
    sts  reg_flyb, usr_2
     43e:	90 93 47 01 	sts	0x0147, r25
#if (SHARED_YAYB == 1) 
#elif (SHARED_YAYB == 0)
  clr  r_v
#endif  	
#if (SHARED_YAYB == 1)    
    push usr_3
     442:	5f 93       	push	r21
    mov  usr_1, p_1
     444:	78 2f       	mov	r23, r24
    mov  usr_2, p_2
     446:	96 2f       	mov	r25, r22
    or   usr_2, usr_1
     448:	97 2b       	or	r25, r23
    com  usr_2
     44a:	90 95       	com	r25
    in   usr_1, REG( DDR, PORT_YA ) 
     44c:	7a b3       	in	r23, 0x1a	; 26
    and  usr_2, usr_1
     44e:	97 23       	and	r25, r23
    sts  reg_flyab, usr_2
     450:	90 93 45 01 	sts	0x0145, r25
    mov  usr_3,usr_2
     454:	59 2f       	mov	r21, r25
    or   usr_2, p_2
     456:	96 2b       	or	r25, r22
    sts  reg_clyb, usr_2
     458:	90 93 46 01 	sts	0x0146, r25
    mov  usr_2, usr_3
     45c:	95 2f       	mov	r25, r21
    or   usr_2, p_1
     45e:	98 2b       	or	r25, r24
    sts  reg_clya, usr_2
     460:	90 93 43 01 	sts	0x0143, r25
    lds  r_v, reg_flyab
     464:	80 91 45 01 	lds	r24, 0x0145
    pop  usr_3
     468:	5f 91       	pop	r21
	_10100001_
	_01101001_
	_00011001_
	_00011001_
#endif
    lds  usr_1, reg_flyb 
     46a:	70 91 47 01 	lds	r23, 0x0147
    out  REG( DDR, PORT_YB ), usr_1
     46e:	7a bb       	out	0x1a, r23	; 26
    pop  usr_2
     470:	9f 91       	pop	r25
    pop  usr_1
     472:	7f 91       	pop	r23
    ret
     474:	08 95       	ret

00000476 <_00110000010_>:

#if (NUM_X_PORTS>=1)
GLOBAL_FUNCTION _00110000010_
_00110000010_:
#if (SHARED_YAYB == 1)
    out  REG( DDR, PORT_YA ), p_2
     476:	6a bb       	out	0x1a, r22	; 26
#elif (SHARED_YAYB == 0)
    out  REG( DDR, PORT_YA ), p_3
#endif
    out  REG( PIN, PORT_X_1 ), p_1  
     478:	86 bb       	out	0x16, r24	; 22
	_10100010_
	_01101010_
	_00011001_
	_00011001_
#endif
    out  REG( DDR, PORT_YB ), p_6
     47a:	ea ba       	out	0x1a, r14	; 26
	_01101011_
	_00011001_
	_00011001_
#endif
#if (SHARED_YAYB == 1)
    out  REG( DDR, PORT_YB ), p_2
     47c:	6a bb       	out	0x1a, r22	; 26
#elif (SHARED_YAYB == 0)
    out  REG( DDR, PORT_YB ), p_4
#endif    
    out  REG( DDR, PORT_YA ), p_5
     47e:	0a bb       	out	0x1a, r16	; 26
    out  REG( PIN, PORT_X_1 ), p_1      
     480:	86 bb       	out	0x16, r24	; 22
	_10100100_
	_01101100_
	_00011001_
	_00011001_
#endif
    ret
     482:	08 95       	ret

00000484 <_00110000011_>:
/*//////////////////////////////////////////////////////////////////////////////////    */


GLOBAL_FUNCTION _00110000011_
_00110000011_:
    sbi  REG( PORT, PORT_SMP ),SMP_BIT  
     484:	db 9a       	sbi	0x1b, 3	; 27
    ret
     486:	08 95       	ret

00000488 <_00110000110_>:
   
GLOBAL_FUNCTION _00110000110_
_00110000110_:
    cbi  REG( PORT, PORT_SMP ),SMP_BIT  
     488:	db 98       	cbi	0x1b, 3	; 27
    lds  usr_1,reg_clyb 
     48a:	70 91 46 01 	lds	r23, 0x0146
    out  REG( DDR, PORT_YB ), usr_1 
     48e:	7a bb       	out	0x1a, r23	; 26
	_10100101_
	_01101101_
	_00011001_
	_00011001_
#endif
    ret
     490:	08 95       	ret

00000492 <touch_init>:
Output  :   n/a
Notes   :   Generated code from QTouch Studio. Do not change
============================================================================*/
static void config_sensors(void)
{
	qt_enable_key( CHANNEL_0, NO_AKS_GROUP, 26u, HYST_6_25 );
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	4a e1       	ldi	r20, 0x1A	; 26
     498:	23 e0       	ldi	r18, 0x03	; 3
     49a:	6f d1       	rcall	.+734    	; 0x77a <qt_enable_key>

    /* Configure the Sensors as keys or Keys With Rotor/Sliders in this function */
    config_sensors();

    /* initialize touch sensing */
    qt_init_sensing();
     49c:	b0 d0       	rcall	.+352    	; 0x5fe <qt_init_sensing_with_burst>

static void qt_set_parameters( void )
{

/*  This will be modified by the user to different values   */
qt_config_data.qt_di              = 2;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	80 93 0e 01 	sts	0x010E, r24
qt_config_data.qt_neg_drift_rate  = 20;
     4a4:	84 e1       	ldi	r24, 0x14	; 20
     4a6:	80 93 11 01 	sts	0x0111, r24
qt_config_data.qt_pos_drift_rate  = 5;
     4aa:	95 e0       	ldi	r25, 0x05	; 5
     4ac:	90 93 12 01 	sts	0x0112, r25
qt_config_data.qt_max_on_duration = 0;
     4b0:	10 92 10 01 	sts	0x0110, r1
qt_config_data.qt_drift_hold_time = 20;
     4b4:	80 93 0f 01 	sts	0x010F, r24
qt_config_data.qt_recal_threshold = 1;
     4b8:	ee e0       	ldi	r30, 0x0E	; 14
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	82 93       	st	-Z, r24
qt_config_data.qt_pos_recal_delay = 0;
     4c0:	16 82       	std	Z+6, r1	; 0x06
              qt_filter_callback = &set_timestamp1;
       #else
              qt_filter_callback = 0;
       #endif
       #else
              qt_filter_callback = 0;
     4c2:	10 92 15 01 	sts	0x0115, r1
     4c6:	10 92 14 01 	sts	0x0114, r1
    /* Initialize debug protocol */
    QDebug_Init();
#endif

    /* enable interrupts */
    __enable_interrupt();
     4ca:	78 94       	sei
#ifdef _DEBUG_INTERFACE_
    /* Process commands from PC */
    QDebug_ProcessCommands();
#endif

}
     4cc:	08 95       	ret

000004ce <touch_measure>:
{
   /*status flags to indicate the re-burst for library*/
   static uint16_t status_flag = 0u;
   static uint16_t burst_flag = 0u;

	  if( time_to_measure_touch )
     4ce:	80 91 fc 00 	lds	r24, 0x00FC
     4d2:	88 23       	and	r24, r24
     4d4:	99 f0       	breq	.+38     	; 0x4fc <touch_measure+0x2e>
        {

            /*  clear flag: it's time to measure touch  */
            time_to_measure_touch = 0u;
     4d6:	10 92 fc 00 	sts	0x00FC, r1
				#ifdef _QDEBUG_TIME_STAMPS_
						TIMESTAMP0;
				#endif
				#endif
                /*  one time measure touch sensors    */
                status_flag = qt_measure_sensors( current_time_ms_touch );
     4da:	80 91 fa 00 	lds	r24, 0x00FA
     4de:	90 91 fb 00 	lds	r25, 0x00FB
     4e2:	d3 d0       	rcall	.+422    	; 0x68a <qt_measure_sensors>
     4e4:	90 93 00 01 	sts	0x0100, r25
     4e8:	80 93 ff 00 	sts	0x00FF, r24
				#ifdef _DEBUG_INTERFACE_
				#ifdef _QDEBUG_TIME_STAMPS_
					  TIMESTAMP2;
				#endif
				#endif
                burst_flag = status_flag & QTLIB_BURST_AGAIN;
     4ec:	80 70       	andi	r24, 0x00	; 0
     4ee:	91 70       	andi	r25, 0x01	; 1
     4f0:	90 93 02 01 	sts	0x0102, r25
     4f4:	80 93 01 01 	sts	0x0101, r24

                /* Time-critical host application code goes here */
				
				

            }while (burst_flag) ;
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	79 f7       	brne	.-34     	; 0x4da <touch_measure+0xc>

        }

return status_flag;

}
     4fc:	80 91 ff 00 	lds	r24, 0x00FF
     500:	90 91 00 01 	lds	r25, 0x0100
     504:	08 95       	ret

00000506 <burst_qm_1>:
     506:	a0 e0       	ldi	r26, 0x00	; 0
     508:	b0 e0       	ldi	r27, 0x00	; 0
     50a:	e8 e8       	ldi	r30, 0x88	; 136
     50c:	f2 e0       	ldi	r31, 0x02	; 2
     50e:	a8 c7       	rjmp	.+3920   	; 0x1460 <__prologue_saves__+0x12>
     510:	c8 2f       	mov	r28, r24
     512:	16 2f       	mov	r17, r22
     514:	f8 94       	cli
     516:	00 98       	cbi	0x00, 0	; 0
     518:	e8 2f       	mov	r30, r24
     51a:	e6 95       	lsr	r30
     51c:	e6 95       	lsr	r30
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	ee 0f       	add	r30, r30
     522:	ff 1f       	adc	r31, r31
     524:	df 01       	movw	r26, r30
     526:	a2 52       	subi	r26, 0x22	; 34
     528:	bf 4f       	sbci	r27, 0xFF	; 255
     52a:	8c 91       	ld	r24, X
     52c:	87 b9       	out	0x07, r24	; 7
     52e:	00 9a       	sbi	0x00, 0	; 0
     530:	df 01       	movw	r26, r30
     532:	af 51       	subi	r26, 0x1F	; 31
     534:	bf 4f       	sbci	r27, 0xFF	; 255
     536:	e1 52       	subi	r30, 0x21	; 33
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	8c 91       	ld	r24, X
     53c:	60 81       	ld	r22, Z
     53e:	67 df       	rcall	.-306    	; 0x40e <_00110000100_>
     540:	f8 2e       	mov	r15, r24
     542:	d0 e0       	ldi	r29, 0x00	; 0
     544:	fe 01       	movw	r30, r28
     546:	eb 50       	subi	r30, 0x0B	; 11
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	b0 80       	ld	r11, Z
     54c:	dd 24       	eor	r13, r13
     54e:	cc 24       	eor	r12, r12
     550:	c3 94       	inc	r12
     552:	1e c0       	rjmp	.+60     	; 0x590 <burst_qm_1+0x8a>
     554:	81 2f       	mov	r24, r17
     556:	6f 2d       	mov	r22, r15
     558:	40 91 4d 01 	lds	r20, 0x014D
     55c:	20 91 47 01 	lds	r18, 0x0147
     560:	00 91 43 01 	lds	r16, 0x0143
     564:	e0 90 46 01 	lds	r14, 0x0146
     568:	86 df       	rcall	.-244    	; 0x476 <_00110000010_>
     56a:	8f b7       	in	r24, 0x3f	; 63
     56c:	90 91 44 01 	lds	r25, 0x0144
     570:	89 2b       	or	r24, r25
     572:	8f bf       	out	0x3f, r24	; 63
     574:	80 91 f4 00 	lds	r24, 0x00F4
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	80 93 f4 00 	sts	0x00F4, r24
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	30 f0       	brcs	.+12     	; 0x58e <burst_qm_1+0x88>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	21 f0       	breq	.+8      	; 0x58e <burst_qm_1+0x88>
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	11 f0       	breq	.+4      	; 0x58e <burst_qm_1+0x88>
     58a:	c0 92 f4 00 	sts	0x00F4, r12
     58e:	d3 94       	inc	r13
     590:	f8 94       	cli
     592:	db 14       	cp	r13, r11
     594:	f9 f6       	brne	.-66     	; 0x554 <burst_qm_1+0x4e>
     596:	76 df       	rcall	.-276    	; 0x484 <_00110000011_>
     598:	1d bc       	out	0x2d, r1	; 45
     59a:	1c bc       	out	0x2c, r1	; 44
     59c:	5d 9a       	sbi	0x0b, 5	; 11
     59e:	45 9b       	sbis	0x08, 5	; 8
     5a0:	15 c0       	rjmp	.+42     	; 0x5cc <burst_qm_1+0xc6>
     5a2:	8f b7       	in	r24, 0x3f	; 63
     5a4:	90 91 44 01 	lds	r25, 0x0144
     5a8:	89 2b       	or	r24, r25
     5aa:	8f bf       	out	0x3f, r24	; 63
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <burst_qm_1+0xb4>
     5ae:	8c b5       	in	r24, 0x2c	; 44
     5b0:	9d b5       	in	r25, 0x2d	; 45
     5b2:	20 e2       	ldi	r18, 0x20	; 32
     5b4:	80 30       	cpi	r24, 0x00	; 0
     5b6:	92 07       	cpc	r25, r18
     5b8:	80 f4       	brcc	.+32     	; 0x5da <burst_qm_1+0xd4>
     5ba:	5d 9b       	sbis	0x0b, 5	; 11
     5bc:	f8 cf       	rjmp	.-16     	; 0x5ae <burst_qm_1+0xa8>
     5be:	84 b5       	in	r24, 0x24	; 36
     5c0:	95 b5       	in	r25, 0x25	; 37
     5c2:	cc 0f       	add	r28, r28
     5c4:	dd 1f       	adc	r29, r29
     5c6:	ca 5e       	subi	r28, 0xEA	; 234
     5c8:	de 4f       	sbci	r29, 0xFE	; 254
     5ca:	0d c0       	rjmp	.+26     	; 0x5e6 <burst_qm_1+0xe0>
     5cc:	cc 0f       	add	r28, r28
     5ce:	dd 1f       	adc	r29, r29
     5d0:	ca 5e       	subi	r28, 0xEA	; 234
     5d2:	de 4f       	sbci	r29, 0xFE	; 254
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <burst_qm_1+0xe0>
     5da:	cc 0f       	add	r28, r28
     5dc:	dd 1f       	adc	r29, r29
     5de:	ca 5e       	subi	r28, 0xEA	; 234
     5e0:	de 4f       	sbci	r29, 0xFE	; 254
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e2       	ldi	r25, 0x20	; 32
     5e6:	99 83       	std	Y+1, r25	; 0x01
     5e8:	88 83       	st	Y, r24
     5ea:	4e df       	rcall	.-356    	; 0x488 <_00110000110_>
     5ec:	8f b7       	in	r24, 0x3f	; 63
     5ee:	90 91 44 01 	lds	r25, 0x0144
     5f2:	89 2b       	or	r24, r25
     5f4:	8f bf       	out	0x3f, r24	; 63
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	e9 e0       	ldi	r30, 0x09	; 9
     5fc:	4d c7       	rjmp	.+3738   	; 0x1498 <__epilogue_restores__+0x12>

000005fe <qt_init_sensing_with_burst>:
     5fe:	cf 93       	push	r28
     600:	c0 e0       	ldi	r28, 0x00	; 0
     602:	03 c0       	rjmp	.+6      	; 0x60a <qt_init_sensing_with_burst+0xc>
     604:	8c 2f       	mov	r24, r28
     606:	9a d1       	rcall	.+820    	; 0x93c <start_cal_sensor>
     608:	cf 5f       	subi	r28, 0xFF	; 255
     60a:	80 91 2a 01 	lds	r24, 0x012A
     60e:	c8 17       	cp	r28, r24
     610:	c8 f3       	brcs	.-14     	; 0x604 <qt_init_sensing_with_burst+0x6>
     612:	10 92 06 01 	sts	0x0106, r1
     616:	10 92 05 01 	sts	0x0105, r1
     61a:	da d4       	rcall	.+2484   	; 0xfd0 <burst_init>
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <qt_get_library_sig>:
     620:	fc 01       	movw	r30, r24
     622:	81 e2       	ldi	r24, 0x21	; 33
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	80 83       	st	Z, r24
     62a:	84 e2       	ldi	r24, 0x24	; 36
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	93 83       	std	Z+3, r25	; 0x03
     630:	82 83       	std	Z+2, r24	; 0x02
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	95 e0       	ldi	r25, 0x05	; 5
     636:	95 83       	std	Z+5, r25	; 0x05
     638:	84 83       	std	Z+4, r24	; 0x04
     63a:	08 95       	ret

0000063c <qt_calibrate_sensing>:
     63c:	cf 93       	push	r28
     63e:	c0 e0       	ldi	r28, 0x00	; 0
     640:	03 c0       	rjmp	.+6      	; 0x648 <qt_calibrate_sensing+0xc>
     642:	8c 2f       	mov	r24, r28
     644:	7b d1       	rcall	.+758    	; 0x93c <start_cal_sensor>
     646:	cf 5f       	subi	r28, 0xFF	; 255
     648:	80 91 2a 01 	lds	r24, 0x012A
     64c:	c8 17       	cp	r28, r24
     64e:	c8 f3       	brcs	.-14     	; 0x642 <qt_calibrate_sensing+0x6>
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <qt_reset_sensing>:
     654:	10 92 2a 01 	sts	0x012A, r1
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	80 93 0e 01 	sts	0x010E, r24
     65e:	84 e1       	ldi	r24, 0x14	; 20
     660:	80 93 11 01 	sts	0x0111, r24
     664:	95 e0       	ldi	r25, 0x05	; 5
     666:	90 93 12 01 	sts	0x0112, r25
     66a:	10 92 10 01 	sts	0x0110, r1
     66e:	80 93 0f 01 	sts	0x010F, r24
     672:	ee e0       	ldi	r30, 0x0E	; 14
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	82 93       	st	-Z, r24
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	86 83       	std	Z+6, r24	; 0x06
     67e:	09 d5       	rcall	.+2578   	; 0x1092 <burst_reset>
     680:	10 92 15 01 	sts	0x0115, r1
     684:	10 92 14 01 	sts	0x0114, r1
     688:	08 95       	ret

0000068a <qt_measure_sensors>:
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	10 92 28 01 	sts	0x0128, r1
     694:	10 92 27 01 	sts	0x0127, r1
     698:	40 91 05 01 	lds	r20, 0x0105
     69c:	50 91 06 01 	lds	r21, 0x0106
     6a0:	90 93 06 01 	sts	0x0106, r25
     6a4:	80 93 05 01 	sts	0x0105, r24
     6a8:	20 91 07 01 	lds	r18, 0x0107
     6ac:	30 91 08 01 	lds	r19, 0x0108
     6b0:	24 1b       	sub	r18, r20
     6b2:	35 0b       	sbc	r19, r21
     6b4:	28 0f       	add	r18, r24
     6b6:	39 1f       	adc	r19, r25
     6b8:	c0 e0       	ldi	r28, 0x00	; 0
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <qt_measure_sensors+0x38>
     6bc:	28 5c       	subi	r18, 0xC8	; 200
     6be:	30 40       	sbci	r19, 0x00	; 0
     6c0:	cf 5f       	subi	r28, 0xFF	; 255
     6c2:	28 3c       	cpi	r18, 0xC8	; 200
     6c4:	31 05       	cpc	r19, r1
     6c6:	d0 f7       	brcc	.-12     	; 0x6bc <qt_measure_sensors+0x32>
     6c8:	30 93 08 01 	sts	0x0108, r19
     6cc:	20 93 07 01 	sts	0x0107, r18
     6d0:	80 91 29 01 	lds	r24, 0x0129
     6d4:	88 23       	and	r24, r24
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <qt_measure_sensors+0x5e>
     6d8:	8c 17       	cp	r24, r28
     6da:	18 f4       	brcc	.+6      	; 0x6e2 <qt_measure_sensors+0x58>
     6dc:	10 92 29 01 	sts	0x0129, r1
     6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <qt_measure_sensors+0x5e>
     6e2:	8c 1b       	sub	r24, r28
     6e4:	80 93 29 01 	sts	0x0129, r24
     6e8:	de d4       	rcall	.+2492   	; 0x10a6 <burst>
     6ea:	e0 91 14 01 	lds	r30, 0x0114
     6ee:	f0 91 15 01 	lds	r31, 0x0115
     6f2:	30 97       	sbiw	r30, 0x00	; 0
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <qt_measure_sensors+0x6e>
     6f6:	09 95       	icall
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	d0 e0       	ldi	r29, 0x00	; 0
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <qt_measure_sensors+0x7e>
     6fe:	8d 2f       	mov	r24, r29
     700:	6c 2f       	mov	r22, r28
     702:	37 d1       	rcall	.+622    	; 0x972 <process_sensor>
     704:	18 2b       	or	r17, r24
     706:	df 5f       	subi	r29, 0xFF	; 255
     708:	50 91 2a 01 	lds	r21, 0x012A
     70c:	d5 17       	cp	r29, r21
     70e:	b8 f3       	brcs	.-18     	; 0x6fe <qt_measure_sensors+0x74>
     710:	11 23       	and	r17, r17
     712:	49 f0       	breq	.+18     	; 0x726 <qt_measure_sensors+0x9c>
     714:	80 91 27 01 	lds	r24, 0x0127
     718:	90 91 28 01 	lds	r25, 0x0128
     71c:	91 60       	ori	r25, 0x01	; 1
     71e:	90 93 28 01 	sts	0x0128, r25
     722:	80 93 27 01 	sts	0x0127, r24
     726:	10 92 26 01 	sts	0x0126, r1
     72a:	ab e2       	ldi	r26, 0x2B	; 43
     72c:	b1 e0       	ldi	r27, 0x01	; 1
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	18 c0       	rjmp	.+48     	; 0x766 <qt_measure_sensors+0xdc>
     736:	2c 91       	ld	r18, X
     738:	28 71       	andi	r18, 0x18	; 24
     73a:	99 f0       	breq	.+38     	; 0x762 <qt_measure_sensors+0xd8>
     73c:	e4 2f       	mov	r30, r20
     73e:	e6 95       	lsr	r30
     740:	e6 95       	lsr	r30
     742:	e6 95       	lsr	r30
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ea 5e       	subi	r30, 0xEA	; 234
     748:	fe 4f       	sbci	r31, 0xFE	; 254
     74a:	24 2f       	mov	r18, r20
     74c:	27 70       	andi	r18, 0x07	; 7
     74e:	bc 01       	movw	r22, r24
     750:	02 c0       	rjmp	.+4      	; 0x756 <qt_measure_sensors+0xcc>
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	2a 95       	dec	r18
     758:	e2 f7       	brpl	.-8      	; 0x752 <qt_measure_sensors+0xc8>
     75a:	9b 01       	movw	r18, r22
     75c:	30 89       	ldd	r19, Z+16	; 0x10
     75e:	32 2b       	or	r19, r18
     760:	30 8b       	std	Z+16, r19	; 0x10
     762:	4f 5f       	subi	r20, 0xFF	; 255
     764:	16 96       	adiw	r26, 0x06	; 6
     766:	45 17       	cp	r20, r21
     768:	31 f7       	brne	.-52     	; 0x736 <qt_measure_sensors+0xac>
     76a:	80 91 27 01 	lds	r24, 0x0127
     76e:	90 91 28 01 	lds	r25, 0x0128
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	08 95       	ret

0000077a <qt_enable_key>:
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	c8 2f       	mov	r28, r24
     780:	d6 2f       	mov	r29, r22
     782:	30 91 2a 01 	lds	r19, 0x012A
     786:	eb e2       	ldi	r30, 0x2B	; 43
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	83 2f       	mov	r24, r19
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	66 e0       	ldi	r22, 0x06	; 6
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	4b d6       	rcall	.+3222   	; 0x142a <__mulhi3>
     794:	df 01       	movw	r26, r30
     796:	a8 0f       	add	r26, r24
     798:	b9 1f       	adc	r27, r25
     79a:	13 96       	adiw	r26, 0x03	; 3
     79c:	4c 93       	st	X, r20
     79e:	83 2f       	mov	r24, r19
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	66 e0       	ldi	r22, 0x06	; 6
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	41 d6       	rcall	.+3202   	; 0x142a <__mulhi3>
     7a8:	df 01       	movw	r26, r30
     7aa:	a8 0f       	add	r26, r24
     7ac:	b9 1f       	adc	r27, r25
     7ae:	d7 70       	andi	r29, 0x07	; 7
     7b0:	dd 0f       	add	r29, r29
     7b2:	dd 0f       	add	r29, r29
     7b4:	dd 0f       	add	r29, r29
     7b6:	14 96       	adiw	r26, 0x04	; 4
     7b8:	dc 93       	st	X, r29
     7ba:	83 2f       	mov	r24, r19
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	66 e0       	ldi	r22, 0x06	; 6
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	33 d6       	rcall	.+3174   	; 0x142a <__mulhi3>
     7c4:	df 01       	movw	r26, r30
     7c6:	a8 0f       	add	r26, r24
     7c8:	b9 1f       	adc	r27, r25
     7ca:	15 96       	adiw	r26, 0x05	; 5
     7cc:	cc 93       	st	X, r28
     7ce:	83 2f       	mov	r24, r19
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	66 e0       	ldi	r22, 0x06	; 6
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	29 d6       	rcall	.+3154   	; 0x142a <__mulhi3>
     7d8:	df 01       	movw	r26, r30
     7da:	a8 0f       	add	r26, r24
     7dc:	b9 1f       	adc	r27, r25
     7de:	23 70       	andi	r18, 0x03	; 3
     7e0:	83 2f       	mov	r24, r19
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	66 e0       	ldi	r22, 0x06	; 6
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	20 d6       	rcall	.+3136   	; 0x142a <__mulhi3>
     7ea:	e8 0f       	add	r30, r24
     7ec:	f9 1f       	adc	r31, r25
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	8c 7f       	andi	r24, 0xFC	; 252
     7f2:	28 2b       	or	r18, r24
     7f4:	14 96       	adiw	r26, 0x04	; 4
     7f6:	2c 93       	st	X, r18
     7f8:	14 97       	sbiw	r26, 0x04	; 4
     7fa:	3f 5f       	subi	r19, 0xFF	; 255
     7fc:	30 93 2a 01 	sts	0x012A, r19
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <qt_get_sensor_delta>:
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	cf 93       	push	r28
     80c:	c8 2f       	mov	r28, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	66 e0       	ldi	r22, 0x06	; 6
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	0a d6       	rcall	.+3092   	; 0x142a <__mulhi3>
     816:	fc 01       	movw	r30, r24
     818:	e5 5d       	subi	r30, 0xD5	; 213
     81a:	fe 4f       	sbci	r31, 0xFE	; 254
     81c:	45 81       	ldd	r20, Z+5	; 0x05
     81e:	8c 2f       	mov	r24, r28
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	66 e0       	ldi	r22, 0x06	; 6
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	01 d6       	rcall	.+3074   	; 0x142a <__mulhi3>
     828:	fc 01       	movw	r30, r24
     82a:	e5 5d       	subi	r30, 0xD5	; 213
     82c:	fe 4f       	sbci	r31, 0xFE	; 254
     82e:	23 81       	ldd	r18, Z+3	; 0x03
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	00 90 0d 01 	lds	r0, 0x010D
     836:	02 c0       	rjmp	.+4      	; 0x83c <qt_get_sensor_delta+0x36>
     838:	35 95       	asr	r19
     83a:	27 95       	ror	r18
     83c:	0a 94       	dec	r0
     83e:	e2 f7       	brpl	.-8      	; 0x838 <qt_get_sensor_delta+0x32>
     840:	02 2f       	mov	r16, r18
     842:	24 30       	cpi	r18, 0x04	; 4
     844:	08 f4       	brcc	.+2      	; 0x848 <qt_get_sensor_delta+0x42>
     846:	04 e0       	ldi	r16, 0x04	; 4
     848:	80 91 2a 01 	lds	r24, 0x012A
     84c:	c8 17       	cp	r28, r24
     84e:	f0 f5       	brcc	.+124    	; 0x8cc <qt_get_sensor_delta+0xc6>
     850:	84 2f       	mov	r24, r20
     852:	a8 d3       	rcall	.+1872   	; 0xfa4 <get_channel_delta>
     854:	9c 01       	movw	r18, r24
     856:	a0 2f       	mov	r26, r16
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	06 95       	lsr	r16
     85c:	06 95       	lsr	r16
     85e:	80 2f       	mov	r24, r16
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	8a 1b       	sub	r24, r26
     864:	9b 0b       	sbc	r25, r27
     866:	82 17       	cp	r24, r18
     868:	93 07       	cpc	r25, r19
     86a:	a4 f4       	brge	.+40     	; 0x894 <qt_get_sensor_delta+0x8e>
     86c:	8c 2f       	mov	r24, r28
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	66 e0       	ldi	r22, 0x06	; 6
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	da d5       	rcall	.+2996   	; 0x142a <__mulhi3>
     876:	8c 01       	movw	r16, r24
     878:	05 5d       	subi	r16, 0xD5	; 213
     87a:	1e 4f       	sbci	r17, 0xFE	; 254
     87c:	8c 2f       	mov	r24, r28
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	66 e0       	ldi	r22, 0x06	; 6
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	d2 d5       	rcall	.+2980   	; 0x142a <__mulhi3>
     886:	fc 01       	movw	r30, r24
     888:	e5 5d       	subi	r30, 0xD5	; 213
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	84 81       	ldd	r24, Z+4	; 0x04
     88e:	8b 7f       	andi	r24, 0xFB	; 251
     890:	f8 01       	movw	r30, r16
     892:	84 83       	std	Z+4, r24	; 0x04
     894:	b0 95       	com	r27
     896:	a1 95       	neg	r26
     898:	bf 4f       	sbci	r27, 0xFF	; 255
     89a:	a2 17       	cp	r26, r18
     89c:	b3 07       	cpc	r27, r19
     89e:	c4 f0       	brlt	.+48     	; 0x8d0 <qt_get_sensor_delta+0xca>
     8a0:	8c 2f       	mov	r24, r28
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	66 e0       	ldi	r22, 0x06	; 6
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	c0 d5       	rcall	.+2944   	; 0x142a <__mulhi3>
     8aa:	fc 01       	movw	r30, r24
     8ac:	e5 5d       	subi	r30, 0xD5	; 213
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	8c 2f       	mov	r24, r28
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	66 e0       	ldi	r22, 0x06	; 6
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	b8 d5       	rcall	.+2928   	; 0x142a <__mulhi3>
     8ba:	dc 01       	movw	r26, r24
     8bc:	a5 5d       	subi	r26, 0xD5	; 213
     8be:	be 4f       	sbci	r27, 0xFE	; 254
     8c0:	14 96       	adiw	r26, 0x04	; 4
     8c2:	8c 91       	ld	r24, X
     8c4:	14 97       	sbiw	r26, 0x04	; 4
     8c6:	84 60       	ori	r24, 0x04	; 4
     8c8:	84 83       	std	Z+4, r24	; 0x04
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <qt_get_sensor_delta+0xca>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	c9 01       	movw	r24, r18
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <goto_no_detect>:
     8da:	cf 93       	push	r28
     8dc:	c8 2f       	mov	r28, r24
     8de:	2b e2       	ldi	r18, 0x2B	; 43
     8e0:	31 e0       	ldi	r19, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	66 e0       	ldi	r22, 0x06	; 6
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	a0 d5       	rcall	.+2880   	; 0x142a <__mulhi3>
     8ea:	f9 01       	movw	r30, r18
     8ec:	e8 0f       	add	r30, r24
     8ee:	f9 1f       	adc	r31, r25
     8f0:	e5 81       	ldd	r30, Z+5	; 0x05
     8f2:	8c 2f       	mov	r24, r28
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	66 e0       	ldi	r22, 0x06	; 6
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	97 d5       	rcall	.+2862   	; 0x142a <__mulhi3>
     8fc:	d9 01       	movw	r26, r18
     8fe:	a8 0f       	add	r26, r24
     900:	b9 1f       	adc	r27, r25
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	8c 93       	st	X, r24
     906:	40 91 27 01 	lds	r20, 0x0127
     90a:	50 91 28 01 	lds	r21, 0x0128
     90e:	42 60       	ori	r20, 0x02	; 2
     910:	50 93 28 01 	sts	0x0128, r21
     914:	40 93 27 01 	sts	0x0127, r20
     918:	8c 2f       	mov	r24, r28
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	66 e0       	ldi	r22, 0x06	; 6
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	84 d5       	rcall	.+2824   	; 0x142a <__mulhi3>
     922:	28 0f       	add	r18, r24
     924:	39 1f       	adc	r19, r25
     926:	d9 01       	movw	r26, r18
     928:	12 96       	adiw	r26, 0x02	; 2
     92a:	1c 92       	st	X, r1
     92c:	12 97       	sbiw	r26, 0x02	; 2
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	e7 5f       	subi	r30, 0xF7	; 247
     932:	fe 4f       	sbci	r31, 0xFE	; 254
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	80 83       	st	Z, r24
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <start_cal_sensor>:
     93c:	cf 93       	push	r28
     93e:	c8 2f       	mov	r28, r24
     940:	cc df       	rcall	.-104    	; 0x8da <goto_no_detect>
     942:	2b e2       	ldi	r18, 0x2B	; 43
     944:	31 e0       	ldi	r19, 0x01	; 1
     946:	8c 2f       	mov	r24, r28
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	66 e0       	ldi	r22, 0x06	; 6
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	6d d5       	rcall	.+2778   	; 0x142a <__mulhi3>
     950:	f9 01       	movw	r30, r18
     952:	e8 0f       	add	r30, r24
     954:	f9 1f       	adc	r31, r25
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 83       	st	Z, r24
     95a:	8c 2f       	mov	r24, r28
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	66 e0       	ldi	r22, 0x06	; 6
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	63 d5       	rcall	.+2758   	; 0x142a <__mulhi3>
     964:	28 0f       	add	r18, r24
     966:	39 1f       	adc	r19, r25
     968:	8f e0       	ldi	r24, 0x0F	; 15
     96a:	f9 01       	movw	r30, r18
     96c:	81 83       	std	Z+1, r24	; 0x01
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <process_sensor>:
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	c8 2f       	mov	r28, r24
     980:	d6 2f       	mov	r29, r22
     982:	41 df       	rcall	.-382    	; 0x806 <qt_get_sensor_delta>
     984:	7c 01       	movw	r14, r24
     986:	8c 2f       	mov	r24, r28
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	66 e0       	ldi	r22, 0x06	; 6
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	4d d5       	rcall	.+2714   	; 0x142a <__mulhi3>
     990:	fc 01       	movw	r30, r24
     992:	e5 5d       	subi	r30, 0xD5	; 213
     994:	fe 4f       	sbci	r31, 0xFE	; 254
     996:	24 81       	ldd	r18, Z+4	; 0x04
     998:	8c 2f       	mov	r24, r28
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	66 e0       	ldi	r22, 0x06	; 6
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	44 d5       	rcall	.+2696   	; 0x142a <__mulhi3>
     9a2:	fc 01       	movw	r30, r24
     9a4:	e5 5d       	subi	r30, 0xD5	; 213
     9a6:	fe 4f       	sbci	r31, 0xFE	; 254
     9a8:	a3 81       	ldd	r26, Z+3	; 0x03
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	82 2f       	mov	r24, r18
     9ae:	83 70       	andi	r24, 0x03	; 3
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	ad 01       	movw	r20, r26
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <process_sensor+0x4a>
     9b8:	55 95       	asr	r21
     9ba:	47 95       	ror	r20
     9bc:	8a 95       	dec	r24
     9be:	e2 f7       	brpl	.-8      	; 0x9b8 <process_sensor+0x46>
     9c0:	ca 01       	movw	r24, r20
     9c2:	42 30       	cpi	r20, 0x02	; 2
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <process_sensor+0x56>
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	8d 01       	movw	r16, r26
     9ca:	08 1b       	sub	r16, r24
     9cc:	11 09       	sbc	r17, r1
     9ce:	8c 2f       	mov	r24, r28
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	66 e0       	ldi	r22, 0x06	; 6
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	29 d5       	rcall	.+2642   	; 0x142a <__mulhi3>
     9d8:	fc 01       	movw	r30, r24
     9da:	e5 5d       	subi	r30, 0xD5	; 213
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	80 81       	ld	r24, Z
     9e0:	84 30       	cpi	r24, 0x04	; 4
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <process_sensor+0x74>
     9e4:	09 c1       	rjmp	.+530    	; 0xbf8 <process_sensor+0x286>
     9e6:	85 30       	cpi	r24, 0x05	; 5
     9e8:	30 f4       	brcc	.+12     	; 0x9f6 <process_sensor+0x84>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	71 f0       	breq	.+28     	; 0xa0a <process_sensor+0x98>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <process_sensor+0x82>
     9f2:	d2 c2       	rjmp	.+1444   	; 0xf98 <process_sensor+0x626>
     9f4:	70 c0       	rjmp	.+224    	; 0xad6 <process_sensor+0x164>
     9f6:	80 31       	cpi	r24, 0x10	; 16
     9f8:	09 f4       	brne	.+2      	; 0x9fc <process_sensor+0x8a>
     9fa:	c5 c1       	rjmp	.+906    	; 0xd86 <process_sensor+0x414>
     9fc:	80 32       	cpi	r24, 0x20	; 32
     9fe:	09 f4       	brne	.+2      	; 0xa02 <process_sensor+0x90>
     a00:	93 c2       	rjmp	.+1318   	; 0xf28 <process_sensor+0x5b6>
     a02:	88 30       	cpi	r24, 0x08	; 8
     a04:	09 f0       	breq	.+2      	; 0xa08 <process_sensor+0x96>
     a06:	c8 c2       	rjmp	.+1424   	; 0xf98 <process_sensor+0x626>
     a08:	42 c2       	rjmp	.+1156   	; 0xe8e <process_sensor+0x51c>
     a0a:	00 91 27 01 	lds	r16, 0x0127
     a0e:	10 91 28 01 	lds	r17, 0x0128
     a12:	c8 01       	movw	r24, r16
     a14:	92 60       	ori	r25, 0x02	; 2
     a16:	90 93 28 01 	sts	0x0128, r25
     a1a:	80 93 27 01 	sts	0x0127, r24
     a1e:	8c 2f       	mov	r24, r28
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	66 e0       	ldi	r22, 0x06	; 6
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	01 d5       	rcall	.+2562   	; 0x142a <__mulhi3>
     a28:	fc 01       	movw	r30, r24
     a2a:	e5 5d       	subi	r30, 0xD5	; 213
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	25 81       	ldd	r18, Z+5	; 0x05
     a30:	8c 2f       	mov	r24, r28
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	66 e0       	ldi	r22, 0x06	; 6
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	f8 d4       	rcall	.+2544   	; 0x142a <__mulhi3>
     a3a:	fc 01       	movw	r30, r24
     a3c:	e5 5d       	subi	r30, 0xD5	; 213
     a3e:	fe 4f       	sbci	r31, 0xFE	; 254
     a40:	41 81       	ldd	r20, Z+1	; 0x01
     a42:	82 2f       	mov	r24, r18
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	4a 30       	cpi	r20, 0x0A	; 10
     a48:	80 f0       	brcs	.+32     	; 0xa6a <process_sensor+0xf8>
     a4a:	fc 01       	movw	r30, r24
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	e2 5e       	subi	r30, 0xE2	; 226
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	dc 01       	movw	r26, r24
     a56:	aa 0f       	add	r26, r26
     a58:	bb 1f       	adc	r27, r27
     a5a:	aa 5e       	subi	r26, 0xEA	; 234
     a5c:	be 4f       	sbci	r27, 0xFE	; 254
     a5e:	8d 91       	ld	r24, X+
     a60:	9c 91       	ld	r25, X
     a62:	11 97       	sbiw	r26, 0x01	; 1
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
     a68:	1d c0       	rjmp	.+58     	; 0xaa4 <process_sensor+0x132>
     a6a:	dc 01       	movw	r26, r24
     a6c:	aa 0f       	add	r26, r26
     a6e:	bb 1f       	adc	r27, r27
     a70:	a2 5e       	subi	r26, 0xE2	; 226
     a72:	be 4f       	sbci	r27, 0xFE	; 254
     a74:	2d 91       	ld	r18, X+
     a76:	3c 91       	ld	r19, X
     a78:	11 97       	sbiw	r26, 0x01	; 1
     a7a:	fc 01       	movw	r30, r24
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	ea 5e       	subi	r30, 0xEA	; 234
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 81       	ld	r24, Z
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	82 17       	cp	r24, r18
     a8a:	93 07       	cpc	r25, r19
     a8c:	18 f4       	brcc	.+6      	; 0xa94 <process_sensor+0x122>
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	05 c0       	rjmp	.+10     	; 0xa9e <process_sensor+0x12c>
     a94:	28 17       	cp	r18, r24
     a96:	39 07       	cpc	r19, r25
     a98:	58 f4       	brcc	.+22     	; 0xab0 <process_sensor+0x13e>
     a9a:	2f 5f       	subi	r18, 0xFF	; 255
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	08 60       	ori	r16, 0x08	; 8
     aa6:	12 60       	ori	r17, 0x02	; 2
     aa8:	10 93 28 01 	sts	0x0128, r17
     aac:	00 93 27 01 	sts	0x0127, r16
     ab0:	41 50       	subi	r20, 0x01	; 1
     ab2:	8c 2f       	mov	r24, r28
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	66 e0       	ldi	r22, 0x06	; 6
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	b7 d4       	rcall	.+2414   	; 0x142a <__mulhi3>
     abc:	fc 01       	movw	r30, r24
     abe:	e5 5d       	subi	r30, 0xD5	; 213
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	41 83       	std	Z+1, r20	; 0x01
     ac4:	44 23       	and	r20, r20
     ac6:	11 f4       	brne	.+4      	; 0xacc <process_sensor+0x15a>
     ac8:	8c 2f       	mov	r24, r28
     aca:	07 df       	rcall	.-498    	; 0x8da <goto_no_detect>
     acc:	80 91 0f 01 	lds	r24, 0x010F
     ad0:	80 93 29 01 	sts	0x0129, r24
     ad4:	59 c2       	rjmp	.+1202   	; 0xf88 <process_sensor+0x616>
     ad6:	22 ff       	sbrs	r18, 2
     ad8:	18 c0       	rjmp	.+48     	; 0xb0a <process_sensor+0x198>
     ada:	8c 2f       	mov	r24, r28
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	66 e0       	ldi	r22, 0x06	; 6
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	a3 d4       	rcall	.+2374   	; 0x142a <__mulhi3>
     ae4:	fc 01       	movw	r30, r24
     ae6:	e5 5d       	subi	r30, 0xD5	; 213
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	e5 81       	ldd	r30, Z+5	; 0x05
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	e7 5f       	subi	r30, 0xF7	; 247
     af0:	fe 4f       	sbci	r31, 0xFE	; 254
     af2:	10 82       	st	Z, r1
     af4:	8c 2f       	mov	r24, r28
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	66 e0       	ldi	r22, 0x06	; 6
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	96 d4       	rcall	.+2348   	; 0x142a <__mulhi3>
     afe:	fc 01       	movw	r30, r24
     b00:	e5 5d       	subi	r30, 0xD5	; 213
     b02:	fe 4f       	sbci	r31, 0xFE	; 254
     b04:	80 e2       	ldi	r24, 0x20	; 32
     b06:	80 83       	st	Z, r24
     b08:	36 c2       	rjmp	.+1132   	; 0xf76 <process_sensor+0x604>
     b0a:	c7 01       	movw	r24, r14
     b0c:	f7 fe       	sbrs	r15, 7
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <process_sensor+0x1a2>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	8a 17       	cp	r24, r26
     b16:	9b 07       	cpc	r25, r27
     b18:	a0 f0       	brcs	.+40     	; 0xb42 <process_sensor+0x1d0>
     b1a:	8c 2f       	mov	r24, r28
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	66 e0       	ldi	r22, 0x06	; 6
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	83 d4       	rcall	.+2310   	; 0x142a <__mulhi3>
     b24:	fc 01       	movw	r30, r24
     b26:	e5 5d       	subi	r30, 0xD5	; 213
     b28:	fe 4f       	sbci	r31, 0xFE	; 254
     b2a:	84 e0       	ldi	r24, 0x04	; 4
     b2c:	80 83       	st	Z, r24
     b2e:	8c 2f       	mov	r24, r28
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	66 e0       	ldi	r22, 0x06	; 6
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	79 d4       	rcall	.+2290   	; 0x142a <__mulhi3>
     b38:	fc 01       	movw	r30, r24
     b3a:	e5 5d       	subi	r30, 0xD5	; 213
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	12 82       	std	Z+2, r1	; 0x02
     b40:	25 c2       	rjmp	.+1098   	; 0xf8c <process_sensor+0x61a>
     b42:	dd 23       	and	r29, r29
     b44:	09 f4       	brne	.+2      	; 0xb48 <process_sensor+0x1d6>
     b46:	28 c2       	rjmp	.+1104   	; 0xf98 <process_sensor+0x626>
     b48:	80 91 29 01 	lds	r24, 0x0129
     b4c:	88 23       	and	r24, r24
     b4e:	09 f0       	breq	.+2      	; 0xb52 <process_sensor+0x1e0>
     b50:	23 c2       	rjmp	.+1094   	; 0xf98 <process_sensor+0x626>
     b52:	8c 2f       	mov	r24, r28
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	66 e0       	ldi	r22, 0x06	; 6
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	67 d4       	rcall	.+2254   	; 0x142a <__mulhi3>
     b5c:	fc 01       	movw	r30, r24
     b5e:	e5 5d       	subi	r30, 0xD5	; 213
     b60:	fe 4f       	sbci	r31, 0xFE	; 254
     b62:	25 81       	ldd	r18, Z+5	; 0x05
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	d9 01       	movw	r26, r18
     b68:	aa 0f       	add	r26, r26
     b6a:	bb 1f       	adc	r27, r27
     b6c:	a2 5e       	subi	r26, 0xE2	; 226
     b6e:	be 4f       	sbci	r27, 0xFE	; 254
     b70:	8d 91       	ld	r24, X+
     b72:	9c 91       	ld	r25, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	f9 01       	movw	r30, r18
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ea 5e       	subi	r30, 0xEA	; 234
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	40 81       	ld	r20, Z
     b82:	51 81       	ldd	r21, Z+1	; 0x01
     b84:	f9 01       	movw	r30, r18
     b86:	e7 5f       	subi	r30, 0xF7	; 247
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	84 17       	cp	r24, r20
     b8c:	95 07       	cpc	r25, r21
     b8e:	68 f4       	brcc	.+26     	; 0xbaa <process_sensor+0x238>
     b90:	20 81       	ld	r18, Z
     b92:	2d 0f       	add	r18, r29
     b94:	20 83       	st	Z, r18
     b96:	30 91 12 01 	lds	r19, 0x0112
     b9a:	30 58       	subi	r19, 0x80	; 128
     b9c:	23 17       	cp	r18, r19
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <process_sensor+0x230>
     ba0:	fb c1       	rjmp	.+1014   	; 0xf98 <process_sensor+0x626>
     ba2:	20 e8       	ldi	r18, 0x80	; 128
     ba4:	20 83       	st	Z, r18
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	10 c0       	rjmp	.+32     	; 0xbca <process_sensor+0x258>
     baa:	48 17       	cp	r20, r24
     bac:	59 07       	cpc	r21, r25
     bae:	d0 f4       	brcc	.+52     	; 0xbe4 <process_sensor+0x272>
     bb0:	20 81       	ld	r18, Z
     bb2:	2d 1b       	sub	r18, r29
     bb4:	20 83       	st	Z, r18
     bb6:	30 e8       	ldi	r19, 0x80	; 128
     bb8:	40 91 11 01 	lds	r20, 0x0111
     bbc:	53 2f       	mov	r21, r19
     bbe:	54 1b       	sub	r21, r20
     bc0:	52 17       	cp	r21, r18
     bc2:	08 f4       	brcc	.+2      	; 0xbc6 <process_sensor+0x254>
     bc4:	e9 c1       	rjmp	.+978    	; 0xf98 <process_sensor+0x626>
     bc6:	30 83       	st	Z, r19
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	9c 93       	st	X, r25
     bce:	8e 93       	st	-X, r24
     bd0:	80 91 27 01 	lds	r24, 0x0127
     bd4:	90 91 28 01 	lds	r25, 0x0128
     bd8:	88 60       	ori	r24, 0x08	; 8
     bda:	90 93 28 01 	sts	0x0128, r25
     bde:	80 93 27 01 	sts	0x0127, r24
     be2:	da c1       	rjmp	.+948    	; 0xf98 <process_sensor+0x626>
     be4:	80 81       	ld	r24, Z
     be6:	81 38       	cpi	r24, 0x81	; 129
     be8:	10 f0       	brcs	.+4      	; 0xbee <process_sensor+0x27c>
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	80 83       	st	Z, r24
     bee:	80 81       	ld	r24, Z
     bf0:	87 fd       	sbrc	r24, 7
     bf2:	d2 c1       	rjmp	.+932    	; 0xf98 <process_sensor+0x626>
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	b4 c1       	rjmp	.+872    	; 0xf60 <process_sensor+0x5ee>
     bf8:	c7 01       	movw	r24, r14
     bfa:	f7 fe       	sbrs	r15, 7
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <process_sensor+0x290>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	8a 17       	cp	r24, r26
     c04:	9b 07       	cpc	r25, r27
     c06:	08 f4       	brcc	.+2      	; 0xc0a <process_sensor+0x298>
     c08:	ad c1       	rjmp	.+858    	; 0xf64 <process_sensor+0x5f2>
     c0a:	80 91 0f 01 	lds	r24, 0x010F
     c0e:	80 93 29 01 	sts	0x0129, r24
     c12:	8c 2f       	mov	r24, r28
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	07 d4       	rcall	.+2062   	; 0x142a <__mulhi3>
     c1c:	fc 01       	movw	r30, r24
     c1e:	e5 5d       	subi	r30, 0xD5	; 213
     c20:	fe 4f       	sbci	r31, 0xFE	; 254
     c22:	8c 2f       	mov	r24, r28
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	66 e0       	ldi	r22, 0x06	; 6
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	ff d3       	rcall	.+2046   	; 0x142a <__mulhi3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	a5 5d       	subi	r26, 0xD5	; 213
     c30:	be 4f       	sbci	r27, 0xFE	; 254
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	8c 91       	ld	r24, X
     c36:	12 97       	sbiw	r26, 0x02	; 2
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	82 83       	std	Z+2, r24	; 0x02
     c3c:	8c 2f       	mov	r24, r28
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	66 e0       	ldi	r22, 0x06	; 6
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	f2 d3       	rcall	.+2020   	; 0x142a <__mulhi3>
     c46:	fc 01       	movw	r30, r24
     c48:	e5 5d       	subi	r30, 0xD5	; 213
     c4a:	fe 4f       	sbci	r31, 0xFE	; 254
     c4c:	04 81       	ldd	r16, Z+4	; 0x04
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	08 73       	andi	r16, 0x38	; 56
     c52:	10 70       	andi	r17, 0x00	; 0
     c54:	33 e0       	ldi	r19, 0x03	; 3
     c56:	16 95       	lsr	r17
     c58:	07 95       	ror	r16
     c5a:	3a 95       	dec	r19
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <process_sensor+0x2e4>
     c5e:	00 23       	and	r16, r16
     c60:	09 f0       	breq	.+2      	; 0xc64 <process_sensor+0x2f2>
     c62:	4d c0       	rjmp	.+154    	; 0xcfe <process_sensor+0x38c>
     c64:	55 c0       	rjmp	.+170    	; 0xd10 <process_sensor+0x39e>
     c66:	dc 17       	cp	r29, r28
     c68:	09 f4       	brne	.+2      	; 0xc6c <process_sensor+0x2fa>
     c6a:	47 c0       	rjmp	.+142    	; 0xcfa <process_sensor+0x388>
     c6c:	8d 2f       	mov	r24, r29
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	66 e0       	ldi	r22, 0x06	; 6
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	da d3       	rcall	.+1972   	; 0x142a <__mulhi3>
     c76:	fc 01       	movw	r30, r24
     c78:	e5 5d       	subi	r30, 0xD5	; 213
     c7a:	fe 4f       	sbci	r31, 0xFE	; 254
     c7c:	84 81       	ldd	r24, Z+4	; 0x04
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	88 73       	andi	r24, 0x38	; 56
     c82:	90 70       	andi	r25, 0x00	; 0
     c84:	23 e0       	ldi	r18, 0x03	; 3
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	2a 95       	dec	r18
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <process_sensor+0x314>
     c8e:	08 17       	cp	r16, r24
     c90:	a1 f5       	brne	.+104    	; 0xcfa <process_sensor+0x388>
     c92:	8d 2f       	mov	r24, r29
     c94:	b8 dd       	rcall	.-1168   	; 0x806 <qt_get_sensor_delta>
     c96:	9c 01       	movw	r18, r24
     c98:	8d 2f       	mov	r24, r29
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	66 e0       	ldi	r22, 0x06	; 6
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	c4 d3       	rcall	.+1928   	; 0x142a <__mulhi3>
     ca2:	fc 01       	movw	r30, r24
     ca4:	e5 5d       	subi	r30, 0xD5	; 213
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	83 81       	ldd	r24, Z+3	; 0x03
     caa:	28 1b       	sub	r18, r24
     cac:	31 09       	sbc	r19, r1
     cae:	8c 2f       	mov	r24, r28
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	66 e0       	ldi	r22, 0x06	; 6
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	b9 d3       	rcall	.+1906   	; 0x142a <__mulhi3>
     cb8:	fc 01       	movw	r30, r24
     cba:	e5 5d       	subi	r30, 0xD5	; 213
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	83 81       	ldd	r24, Z+3	; 0x03
     cc0:	a7 01       	movw	r20, r14
     cc2:	48 1b       	sub	r20, r24
     cc4:	51 09       	sbc	r21, r1
     cc6:	42 17       	cp	r20, r18
     cc8:	53 07       	cpc	r21, r19
     cca:	6c f0       	brlt	.+26     	; 0xce6 <process_sensor+0x374>
     ccc:	8d 2f       	mov	r24, r29
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	66 e0       	ldi	r22, 0x06	; 6
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	aa d3       	rcall	.+1876   	; 0x142a <__mulhi3>
     cd6:	fc 01       	movw	r30, r24
     cd8:	e5 5d       	subi	r30, 0xD5	; 213
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	80 81       	ld	r24, Z
     cde:	80 31       	cpi	r24, 0x10	; 16
     ce0:	11 f0       	breq	.+4      	; 0xce6 <process_sensor+0x374>
     ce2:	88 30       	cpi	r24, 0x08	; 8
     ce4:	51 f4       	brne	.+20     	; 0xcfa <process_sensor+0x388>
     ce6:	8c 2f       	mov	r24, r28
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	66 e0       	ldi	r22, 0x06	; 6
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	9d d3       	rcall	.+1850   	; 0x142a <__mulhi3>
     cf0:	fc 01       	movw	r30, r24
     cf2:	e5 5d       	subi	r30, 0xD5	; 213
     cf4:	fe 4f       	sbci	r31, 0xFE	; 254
     cf6:	12 82       	std	Z+2, r1	; 0x02
     cf8:	11 e0       	ldi	r17, 0x01	; 1
     cfa:	df 5f       	subi	r29, 0xFF	; 255
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <process_sensor+0x390>
     cfe:	10 e0       	ldi	r17, 0x00	; 0
     d00:	d0 e0       	ldi	r29, 0x00	; 0
     d02:	80 91 2a 01 	lds	r24, 0x012A
     d06:	d8 17       	cp	r29, r24
     d08:	08 f4       	brcc	.+2      	; 0xd0c <process_sensor+0x39a>
     d0a:	ad cf       	rjmp	.-166    	; 0xc66 <process_sensor+0x2f4>
     d0c:	11 23       	and	r17, r17
     d0e:	79 f4       	brne	.+30     	; 0xd2e <process_sensor+0x3bc>
     d10:	80 91 0e 01 	lds	r24, 0x010E
     d14:	88 23       	and	r24, r24
     d16:	59 f0       	breq	.+22     	; 0xd2e <process_sensor+0x3bc>
     d18:	80 91 27 01 	lds	r24, 0x0127
     d1c:	90 91 28 01 	lds	r25, 0x0128
     d20:	98 60       	ori	r25, 0x08	; 8
     d22:	90 93 28 01 	sts	0x0128, r25
     d26:	80 93 27 01 	sts	0x0127, r24
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <process_sensor+0x3be>
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	8c 2f       	mov	r24, r28
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	66 e0       	ldi	r22, 0x06	; 6
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	78 d3       	rcall	.+1776   	; 0x142a <__mulhi3>
     d3a:	fc 01       	movw	r30, r24
     d3c:	e5 5d       	subi	r30, 0xD5	; 213
     d3e:	fe 4f       	sbci	r31, 0xFE	; 254
     d40:	92 81       	ldd	r25, Z+2	; 0x02
     d42:	80 91 0e 01 	lds	r24, 0x010E
     d46:	98 17       	cp	r25, r24
     d48:	08 f4       	brcc	.+2      	; 0xd4c <process_sensor+0x3da>
     d4a:	27 c1       	rjmp	.+590    	; 0xf9a <process_sensor+0x628>
     d4c:	20 91 27 01 	lds	r18, 0x0127
     d50:	30 91 28 01 	lds	r19, 0x0128
     d54:	23 60       	ori	r18, 0x03	; 3
     d56:	30 93 28 01 	sts	0x0128, r19
     d5a:	20 93 27 01 	sts	0x0127, r18
     d5e:	8c 2f       	mov	r24, r28
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	66 e0       	ldi	r22, 0x06	; 6
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	61 d3       	rcall	.+1730   	; 0x142a <__mulhi3>
     d68:	fc 01       	movw	r30, r24
     d6a:	e5 5d       	subi	r30, 0xD5	; 213
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	80 e1       	ldi	r24, 0x10	; 16
     d70:	80 83       	st	Z, r24
     d72:	8c 2f       	mov	r24, r28
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	66 e0       	ldi	r22, 0x06	; 6
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	57 d3       	rcall	.+1710   	; 0x142a <__mulhi3>
     d7c:	fc 01       	movw	r30, r24
     d7e:	e5 5d       	subi	r30, 0xD5	; 213
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	11 82       	std	Z+1, r1	; 0x01
     d84:	0a c1       	rjmp	.+532    	; 0xf9a <process_sensor+0x628>
     d86:	22 ff       	sbrs	r18, 2
     d88:	1e c0       	rjmp	.+60     	; 0xdc6 <process_sensor+0x454>
     d8a:	8c 2f       	mov	r24, r28
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	66 e0       	ldi	r22, 0x06	; 6
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	4b d3       	rcall	.+1686   	; 0x142a <__mulhi3>
     d94:	fc 01       	movw	r30, r24
     d96:	e5 5d       	subi	r30, 0xD5	; 213
     d98:	fe 4f       	sbci	r31, 0xFE	; 254
     d9a:	e5 81       	ldd	r30, Z+5	; 0x05
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	e7 5f       	subi	r30, 0xF7	; 247
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	80 e8       	ldi	r24, 0x80	; 128
     da4:	80 83       	st	Z, r24
     da6:	8c 2f       	mov	r24, r28
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	66 e0       	ldi	r22, 0x06	; 6
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	3d d3       	rcall	.+1658   	; 0x142a <__mulhi3>
     db0:	fc 01       	movw	r30, r24
     db2:	e5 5d       	subi	r30, 0xD5	; 213
     db4:	fe 4f       	sbci	r31, 0xFE	; 254
     db6:	80 e2       	ldi	r24, 0x20	; 32
     db8:	80 83       	st	Z, r24
     dba:	80 91 27 01 	lds	r24, 0x0127
     dbe:	90 91 28 01 	lds	r25, 0x0128
     dc2:	90 61       	ori	r25, 0x10	; 16
     dc4:	58 c0       	rjmp	.+176    	; 0xe76 <process_sensor+0x504>
     dc6:	c7 01       	movw	r24, r14
     dc8:	f7 fe       	sbrs	r15, 7
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <process_sensor+0x45e>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	80 17       	cp	r24, r16
     dd2:	91 07       	cpc	r25, r17
     dd4:	80 f4       	brcc	.+32     	; 0xdf6 <process_sensor+0x484>
     dd6:	8c 2f       	mov	r24, r28
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	66 e0       	ldi	r22, 0x06	; 6
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	25 d3       	rcall	.+1610   	; 0x142a <__mulhi3>
     de0:	fc 01       	movw	r30, r24
     de2:	e5 5d       	subi	r30, 0xD5	; 213
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	88 e0       	ldi	r24, 0x08	; 8
     de8:	80 83       	st	Z, r24
     dea:	80 91 27 01 	lds	r24, 0x0127
     dee:	90 91 28 01 	lds	r25, 0x0128
     df2:	94 60       	ori	r25, 0x04	; 4
     df4:	40 c0       	rjmp	.+128    	; 0xe76 <process_sensor+0x504>
     df6:	80 91 27 01 	lds	r24, 0x0127
     dfa:	90 91 28 01 	lds	r25, 0x0128
     dfe:	81 60       	ori	r24, 0x01	; 1
     e00:	90 93 28 01 	sts	0x0128, r25
     e04:	80 93 27 01 	sts	0x0127, r24
     e08:	8c 2f       	mov	r24, r28
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	66 e0       	ldi	r22, 0x06	; 6
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	0c d3       	rcall	.+1560   	; 0x142a <__mulhi3>
     e12:	fc 01       	movw	r30, r24
     e14:	e5 5d       	subi	r30, 0xD5	; 213
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	22 81       	ldd	r18, Z+2	; 0x02
     e1a:	80 91 0e 01 	lds	r24, 0x010E
     e1e:	28 17       	cp	r18, r24
     e20:	50 f4       	brcc	.+20     	; 0xe36 <process_sensor+0x4c4>
     e22:	8c 2f       	mov	r24, r28
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	66 e0       	ldi	r22, 0x06	; 6
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	ff d2       	rcall	.+1534   	; 0x142a <__mulhi3>
     e2c:	fc 01       	movw	r30, r24
     e2e:	e5 5d       	subi	r30, 0xD5	; 213
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	22 83       	std	Z+2, r18	; 0x02
     e36:	30 91 10 01 	lds	r19, 0x0110
     e3a:	33 23       	and	r19, r19
     e3c:	11 f1       	breq	.+68     	; 0xe82 <process_sensor+0x510>
     e3e:	8c 2f       	mov	r24, r28
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	66 e0       	ldi	r22, 0x06	; 6
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	f1 d2       	rcall	.+1506   	; 0x142a <__mulhi3>
     e48:	fc 01       	movw	r30, r24
     e4a:	e5 5d       	subi	r30, 0xD5	; 213
     e4c:	fe 4f       	sbci	r31, 0xFE	; 254
     e4e:	21 81       	ldd	r18, Z+1	; 0x01
     e50:	8c 2f       	mov	r24, r28
     e52:	23 17       	cp	r18, r19
     e54:	50 f4       	brcc	.+20     	; 0xe6a <process_sensor+0x4f8>
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	66 e0       	ldi	r22, 0x06	; 6
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	e6 d2       	rcall	.+1484   	; 0x142a <__mulhi3>
     e5e:	fc 01       	movw	r30, r24
     e60:	e5 5d       	subi	r30, 0xD5	; 213
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	d2 0f       	add	r29, r18
     e66:	d1 83       	std	Z+1, r29	; 0x01
     e68:	0c c0       	rjmp	.+24     	; 0xe82 <process_sensor+0x510>
     e6a:	68 dd       	rcall	.-1328   	; 0x93c <start_cal_sensor>
     e6c:	80 91 27 01 	lds	r24, 0x0127
     e70:	90 91 28 01 	lds	r25, 0x0128
     e74:	92 60       	ori	r25, 0x02	; 2
     e76:	90 93 28 01 	sts	0x0128, r25
     e7a:	80 93 27 01 	sts	0x0127, r24
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <process_sensor+0x512>
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	80 91 0f 01 	lds	r24, 0x010F
     e88:	80 93 29 01 	sts	0x0129, r24
     e8c:	86 c0       	rjmp	.+268    	; 0xf9a <process_sensor+0x628>
     e8e:	80 91 0f 01 	lds	r24, 0x010F
     e92:	80 93 29 01 	sts	0x0129, r24
     e96:	8c 2f       	mov	r24, r28
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	66 e0       	ldi	r22, 0x06	; 6
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	c5 d2       	rcall	.+1418   	; 0x142a <__mulhi3>
     ea0:	fc 01       	movw	r30, r24
     ea2:	e5 5d       	subi	r30, 0xD5	; 213
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	88 23       	and	r24, r24
     eaa:	09 f4       	brne	.+2      	; 0xeae <process_sensor+0x53c>
     eac:	5b c0       	rjmp	.+182    	; 0xf64 <process_sensor+0x5f2>
     eae:	c7 01       	movw	r24, r14
     eb0:	f7 fe       	sbrs	r15, 7
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <process_sensor+0x546>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	08 17       	cp	r16, r24
     eba:	19 07       	cpc	r17, r25
     ebc:	a8 f4       	brcc	.+42     	; 0xee8 <process_sensor+0x576>
     ebe:	8c 2f       	mov	r24, r28
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	66 e0       	ldi	r22, 0x06	; 6
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	b1 d2       	rcall	.+1378   	; 0x142a <__mulhi3>
     ec8:	fc 01       	movw	r30, r24
     eca:	e5 5d       	subi	r30, 0xD5	; 213
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	80 e1       	ldi	r24, 0x10	; 16
     ed0:	80 83       	st	Z, r24
     ed2:	80 91 27 01 	lds	r24, 0x0127
     ed6:	90 91 28 01 	lds	r25, 0x0128
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	90 93 28 01 	sts	0x0128, r25
     ee0:	80 93 27 01 	sts	0x0127, r24
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0a c0       	rjmp	.+20     	; 0xefc <process_sensor+0x58a>
     ee8:	80 91 27 01 	lds	r24, 0x0127
     eec:	90 91 28 01 	lds	r25, 0x0128
     ef0:	94 60       	ori	r25, 0x04	; 4
     ef2:	90 93 28 01 	sts	0x0128, r25
     ef6:	80 93 27 01 	sts	0x0127, r24
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	8c 2f       	mov	r24, r28
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	66 e0       	ldi	r22, 0x06	; 6
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	92 d2       	rcall	.+1316   	; 0x142a <__mulhi3>
     f06:	fc 01       	movw	r30, r24
     f08:	e5 5d       	subi	r30, 0xD5	; 213
     f0a:	fe 4f       	sbci	r31, 0xFE	; 254
     f0c:	8c 2f       	mov	r24, r28
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	66 e0       	ldi	r22, 0x06	; 6
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	8a d2       	rcall	.+1300   	; 0x142a <__mulhi3>
     f16:	dc 01       	movw	r26, r24
     f18:	a5 5d       	subi	r26, 0xD5	; 213
     f1a:	be 4f       	sbci	r27, 0xFE	; 254
     f1c:	12 96       	adiw	r26, 0x02	; 2
     f1e:	8c 91       	ld	r24, X
     f20:	12 97       	sbiw	r26, 0x02	; 2
     f22:	81 50       	subi	r24, 0x01	; 1
     f24:	82 83       	std	Z+2, r24	; 0x02
     f26:	39 c0       	rjmp	.+114    	; 0xf9a <process_sensor+0x628>
     f28:	8c 2f       	mov	r24, r28
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	66 e0       	ldi	r22, 0x06	; 6
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	7c d2       	rcall	.+1272   	; 0x142a <__mulhi3>
     f32:	fc 01       	movw	r30, r24
     f34:	e5 5d       	subi	r30, 0xD5	; 213
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	e5 81       	ldd	r30, Z+5	; 0x05
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	e7 5f       	subi	r30, 0xF7	; 247
     f3e:	fe 4f       	sbci	r31, 0xFE	; 254
     f40:	80 81       	ld	r24, Z
     f42:	8f 5f       	subi	r24, 0xFF	; 255
     f44:	80 83       	st	Z, r24
     f46:	22 fd       	sbrc	r18, 2
     f48:	10 c0       	rjmp	.+32     	; 0xf6a <process_sensor+0x5f8>
     f4a:	87 ff       	sbrs	r24, 7
     f4c:	0b c0       	rjmp	.+22     	; 0xf64 <process_sensor+0x5f2>
     f4e:	8c 2f       	mov	r24, r28
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	66 e0       	ldi	r22, 0x06	; 6
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	69 d2       	rcall	.+1234   	; 0x142a <__mulhi3>
     f58:	fc 01       	movw	r30, r24
     f5a:	e5 5d       	subi	r30, 0xD5	; 213
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	80 e1       	ldi	r24, 0x10	; 16
     f60:	80 83       	st	Z, r24
     f62:	1a c0       	rjmp	.+52     	; 0xf98 <process_sensor+0x626>
     f64:	8c 2f       	mov	r24, r28
     f66:	b9 dc       	rcall	.-1678   	; 0x8da <goto_no_detect>
     f68:	17 c0       	rjmp	.+46     	; 0xf98 <process_sensor+0x626>
     f6a:	90 91 13 01 	lds	r25, 0x0113
     f6e:	89 17       	cp	r24, r25
     f70:	68 f0       	brcs	.+26     	; 0xf8c <process_sensor+0x61a>
     f72:	8c 2f       	mov	r24, r28
     f74:	e3 dc       	rcall	.-1594   	; 0x93c <start_cal_sensor>
     f76:	80 91 27 01 	lds	r24, 0x0127
     f7a:	90 91 28 01 	lds	r25, 0x0128
     f7e:	90 61       	ori	r25, 0x10	; 16
     f80:	90 93 28 01 	sts	0x0128, r25
     f84:	80 93 27 01 	sts	0x0127, r24
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <process_sensor+0x628>
     f8c:	80 91 27 01 	lds	r24, 0x0127
     f90:	90 91 28 01 	lds	r25, 0x0128
     f94:	94 60       	ori	r25, 0x04	; 4
     f96:	f4 cf       	rjmp	.-24     	; 0xf80 <process_sensor+0x60e>
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	84 2f       	mov	r24, r20
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	e6 e0       	ldi	r30, 0x06	; 6
     fa2:	7d c2       	rjmp	.+1274   	; 0x149e <__epilogue_restores__+0x18>

00000fa4 <get_channel_delta>:
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	34 96       	adiw	r30, 0x04	; 4
     faa:	26 e1       	ldi	r18, 0x16	; 22
     fac:	31 e0       	ldi	r19, 0x01	; 1
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	e2 0f       	add	r30, r18
     fb4:	f3 1f       	adc	r31, r19
     fb6:	dc 01       	movw	r26, r24
     fb8:	aa 0f       	add	r26, r26
     fba:	bb 1f       	adc	r27, r27
     fbc:	a2 0f       	add	r26, r18
     fbe:	b3 1f       	adc	r27, r19
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	2d 91       	ld	r18, X+
     fc6:	3c 91       	ld	r19, X
     fc8:	11 97       	sbiw	r26, 0x01	; 1
     fca:	82 1b       	sub	r24, r18
     fcc:	93 0b       	sbc	r25, r19
     fce:	08 95       	ret

00000fd0 <burst_init>:
     fd0:	0f 93       	push	r16
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 f4 00 	sts	0x00F4, r24
     fdc:	10 92 48 01 	sts	0x0148, r1
     fe0:	10 92 49 01 	sts	0x0149, r1
     fe4:	10 92 4a 01 	sts	0x014A, r1
     fe8:	10 92 4b 01 	sts	0x014B, r1
     fec:	10 92 4c 01 	sts	0x014C, r1
     ff0:	30 91 2a 01 	lds	r19, 0x012A
     ff4:	c0 e3       	ldi	r28, 0x30	; 48
     ff6:	d1 e0       	ldi	r29, 0x01	; 1
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	38 c0       	rjmp	.+112    	; 0x1070 <burst_init+0xa0>
    1000:	e8 81       	ld	r30, Y
    1002:	8e 2f       	mov	r24, r30
    1004:	86 95       	lsr	r24
    1006:	86 95       	lsr	r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	dc 01       	movw	r26, r24
    1010:	a0 52       	subi	r26, 0x20	; 32
    1012:	bf 4f       	sbci	r27, 0xFF	; 255
    1014:	ab 01       	movw	r20, r22
    1016:	0c 90       	ld	r0, X
    1018:	02 c0       	rjmp	.+4      	; 0x101e <burst_init+0x4e>
    101a:	44 0f       	add	r20, r20
    101c:	55 1f       	adc	r21, r21
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <burst_init+0x4a>
    1022:	50 91 48 01 	lds	r21, 0x0148
    1026:	54 2b       	or	r21, r20
    1028:	50 93 48 01 	sts	0x0148, r21
    102c:	82 52       	subi	r24, 0x22	; 34
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	ab 01       	movw	r20, r22
    1032:	dc 01       	movw	r26, r24
    1034:	0c 90       	ld	r0, X
    1036:	02 c0       	rjmp	.+4      	; 0x103c <burst_init+0x6c>
    1038:	44 0f       	add	r20, r20
    103a:	55 1f       	adc	r21, r21
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <burst_init+0x68>
    1040:	ca 01       	movw	r24, r20
    1042:	90 91 49 01 	lds	r25, 0x0149
    1046:	98 2b       	or	r25, r24
    1048:	90 93 49 01 	sts	0x0149, r25
    104c:	e3 70       	andi	r30, 0x03	; 3
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ee 51       	subi	r30, 0x1E	; 30
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	a3 81       	ldd	r26, Z+3	; 0x03
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	a8 5b       	subi	r26, 0xB8	; 184
    1062:	be 4f       	sbci	r27, 0xFE	; 254
    1064:	8c 91       	ld	r24, X
    1066:	92 81       	ldd	r25, Z+2	; 0x02
    1068:	89 2b       	or	r24, r25
    106a:	8c 93       	st	X, r24
    106c:	2f 5f       	subi	r18, 0xFF	; 255
    106e:	26 96       	adiw	r28, 0x06	; 6
    1070:	23 17       	cp	r18, r19
    1072:	31 f6       	brne	.-116    	; 0x1000 <burst_init+0x30>
    1074:	80 91 49 01 	lds	r24, 0x0149
    1078:	60 91 48 01 	lds	r22, 0x0148
    107c:	40 91 4a 01 	lds	r20, 0x014A
    1080:	20 91 4b 01 	lds	r18, 0x014B
    1084:	00 91 4c 01 	lds	r16, 0x014C
    1088:	a0 d9       	rcall	.-3264   	; 0x3ca <_00110000001_>
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <burst_reset>:
    1092:	80 e4       	ldi	r24, 0x40	; 64
    1094:	80 93 f5 00 	sts	0x00F5, r24
    1098:	80 93 f6 00 	sts	0x00F6, r24
    109c:	80 93 f7 00 	sts	0x00F7, r24
    10a0:	80 93 f8 00 	sts	0x00F8, r24
    10a4:	08 95       	ret

000010a6 <burst>:
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e5       	ldi	r30, 0x58	; 88
    10ac:	f8 e0       	ldi	r31, 0x08	; 8
    10ae:	d7 c1       	rjmp	.+942    	; 0x145e <__prologue_saves__+0x10>
    10b0:	8f b7       	in	r24, 0x3f	; 63
    10b2:	80 78       	andi	r24, 0x80	; 128
    10b4:	80 93 44 01 	sts	0x0144, r24
    10b8:	d3 b1       	in	r29, 0x03	; 3
    10ba:	18 b1       	in	r17, 0x08	; 8
    10bc:	0f b5       	in	r16, 0x2f	; 47
    10be:	fe b4       	in	r15, 0x2e	; 46
    10c0:	eb b0       	in	r14, 0x0b	; 11
    10c2:	ac b4       	in	r10, 0x2c	; 44
    10c4:	bd b4       	in	r11, 0x2d	; 45
    10c6:	d0 b0       	in	r13, 0x00	; 0
    10c8:	c7 b0       	in	r12, 0x07	; 7
    10ca:	80 e4       	ldi	r24, 0x40	; 64
    10cc:	83 b9       	out	0x03, r24	; 3
    10ce:	84 e0       	ldi	r24, 0x04	; 4
    10d0:	88 b9       	out	0x08, r24	; 8
    10d2:	1f bc       	out	0x2f, r1	; 47
    10d4:	81 e8       	ldi	r24, 0x81	; 129
    10d6:	8e bd       	out	0x2e, r24	; 46
    10d8:	f8 94       	cli
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	20 c0       	rjmp	.+64     	; 0x111e <burst+0x78>
    10de:	8c 2f       	mov	r24, r28
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	66 e0       	ldi	r22, 0x06	; 6
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	a1 d1       	rcall	.+834    	; 0x142a <__mulhi3>
    10e8:	fc 01       	movw	r30, r24
    10ea:	e5 5d       	subi	r30, 0xD5	; 213
    10ec:	fe 4f       	sbci	r31, 0xFE	; 254
    10ee:	85 81       	ldd	r24, Z+5	; 0x05
    10f0:	a8 2f       	mov	r26, r24
    10f2:	a3 70       	andi	r26, 0x03	; 3
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	aa 0f       	add	r26, r26
    10f8:	bb 1f       	adc	r27, r27
    10fa:	aa 0f       	add	r26, r26
    10fc:	bb 1f       	adc	r27, r27
    10fe:	ae 51       	subi	r26, 0x1E	; 30
    1100:	bf 4f       	sbci	r27, 0xFF	; 255
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	11 97       	sbiw	r26, 0x01	; 1
    1108:	30 97       	sbiw	r30, 0x00	; 0
    110a:	19 f0       	breq	.+6      	; 0x1112 <burst+0x6c>
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	6c 91       	ld	r22, X
    1110:	09 95       	icall
    1112:	8f b7       	in	r24, 0x3f	; 63
    1114:	90 91 44 01 	lds	r25, 0x0144
    1118:	89 2b       	or	r24, r25
    111a:	8f bf       	out	0x3f, r24	; 63
    111c:	cf 5f       	subi	r28, 0xFF	; 255
    111e:	80 91 2a 01 	lds	r24, 0x012A
    1122:	c8 17       	cp	r28, r24
    1124:	e0 f2       	brcs	.-72     	; 0x10de <burst+0x38>
    1126:	d3 b9       	out	0x03, r29	; 3
    1128:	18 b9       	out	0x08, r17	; 8
    112a:	0f bd       	out	0x2f, r16	; 47
    112c:	fe bc       	out	0x2e, r15	; 46
    112e:	eb b8       	out	0x0b, r14	; 11
    1130:	bd bc       	out	0x2d, r11	; 45
    1132:	ac bc       	out	0x2c, r10	; 44
    1134:	d0 b8       	out	0x00, r13	; 0
    1136:	c7 b8       	out	0x07, r12	; 7
    1138:	8f b7       	in	r24, 0x3f	; 63
    113a:	90 91 44 01 	lds	r25, 0x0144
    113e:	89 2b       	or	r24, r25
    1140:	8f bf       	out	0x3f, r24	; 63
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	ea e0       	ldi	r30, 0x0A	; 10
    1148:	a6 c1       	rjmp	.+844    	; 0x1496 <__epilogue_restores__+0x10>

0000114a <main>:
{
	char modeStatus = 2; // Startup Mode
		

   /* initialize host app, pins, watchdog, etc */
    init_system();
    114a:	37 d9       	rcall	.-3474   	; 0x3ba <init_system>

    /* configure timer ISR to fire regularly */
    init_timer_isr();
    114c:	f5 d8       	rcall	.-3606   	; 0x338 <init_timer_isr>

	/* Initialize Touch sensors */
	touch_init();
    114e:	a1 d9       	rcall	.-3262   	; 0x492 <touch_init>

	i2c_init();                             // initialize I2C library
    1150:	8c d7       	rcall	.+3864   	; 0x206a <__data_load_end+0xb10>
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	96 e7       	ldi	r25, 0x76	; 118
    1156:	a1 e0       	ldi	r26, 0x01	; 1
    1158:	81 50       	subi	r24, 0x01	; 1
    115a:	90 40       	sbci	r25, 0x00	; 0
    115c:	a0 40       	sbci	r26, 0x00	; 0
    115e:	e1 f7       	brne	.-8      	; 0x1158 <main+0xe>
    1160:	00 c0       	rjmp	.+0      	; 0x1162 <main+0x18>
    1162:	00 00       	nop
	_delay_ms(60);           // delay
		
	pca9685_init2(PCA9685);
    1164:	8a ea       	ldi	r24, 0xAA	; 170
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	df d7       	rcall	.+4030   	; 0x2128 <__data_load_end+0xbce>
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	96 e7       	ldi	r25, 0x76	; 118
    116e:	a1 e0       	ldi	r26, 0x01	; 1
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	90 40       	sbci	r25, 0x00	; 0
    1174:	a0 40       	sbci	r26, 0x00	; 0
    1176:	e1 f7       	brne	.-8      	; 0x1170 <main+0x26>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <main+0x30>
    117a:	00 00       	nop
	_delay_ms(60);           // delay

	pca9685_brightness(PCA9685,50,15);
    117c:	8a ea       	ldi	r24, 0xAA	; 170
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	62 e3       	ldi	r22, 0x32	; 50
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	4f e0       	ldi	r20, 0x0F	; 15
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	86 d8       	rcall	.-3828   	; 0x296 <pca9685_brightness>

	__enable_interrupt();  // Enable interrupts for QMatrix (Per AVR1203)
    118a:	78 94       	sei
    /* loop forever */
    for( ; ; )
    {
		
		
		if (touch_measure() == 0x0001)
    118c:	a0 d9       	rcall	.-3264   	; 0x4ce <touch_measure>
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	91 05       	cpc	r25, r1
    1192:	e1 f7       	brne	.-8      	; 0x118c <main+0x42>
		{
			pca9685_brightness(PCA9685,0,15);
    1194:	8a ea       	ldi	r24, 0xAA	; 170
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	4f e0       	ldi	r20, 0x0F	; 15
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	7a d8       	rcall	.-3852   	; 0x296 <pca9685_brightness>
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	91 ee       	ldi	r25, 0xE1	; 225
    11a6:	a4 e0       	ldi	r26, 0x04	; 4
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	90 40       	sbci	r25, 0x00	; 0
    11ac:	a0 40       	sbci	r26, 0x00	; 0
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <main+0x5e>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <main+0x68>
    11b2:	00 00       	nop
			_delay_ms(200);
			pca9685_brightness(PCA9685,50,15);
    11b4:	8a ea       	ldi	r24, 0xAA	; 170
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	62 e3       	ldi	r22, 0x32	; 50
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	4f e0       	ldi	r20, 0x0F	; 15
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	6a d8       	rcall	.-3884   	; 0x296 <pca9685_brightness>
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	91 ee       	ldi	r25, 0xE1	; 225
    11c6:	a4 e0       	ldi	r26, 0x04	; 4
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	a0 40       	sbci	r26, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <main+0x7e>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <main+0x88>
    11d2:	00 00       	nop
    11d4:	db cf       	rjmp	.-74     	; 0x118c <main+0x42>

000011d6 <__fixsfsi>:
    11d6:	04 d0       	rcall	.+8      	; 0x11e0 <__fixunssfsi>
    11d8:	68 94       	set
    11da:	b1 11       	cpse	r27, r1
    11dc:	8d c0       	rjmp	.+282    	; 0x12f8 <__fp_szero>
    11de:	08 95       	ret

000011e0 <__fixunssfsi>:
    11e0:	70 d0       	rcall	.+224    	; 0x12c2 <__fp_splitA>
    11e2:	88 f0       	brcs	.+34     	; 0x1206 <__fixunssfsi+0x26>
    11e4:	9f 57       	subi	r25, 0x7F	; 127
    11e6:	90 f0       	brcs	.+36     	; 0x120c <__fixunssfsi+0x2c>
    11e8:	b9 2f       	mov	r27, r25
    11ea:	99 27       	eor	r25, r25
    11ec:	b7 51       	subi	r27, 0x17	; 23
    11ee:	a0 f0       	brcs	.+40     	; 0x1218 <__fixunssfsi+0x38>
    11f0:	d1 f0       	breq	.+52     	; 0x1226 <__fixunssfsi+0x46>
    11f2:	66 0f       	add	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	88 1f       	adc	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	1a f0       	brmi	.+6      	; 0x1202 <__fixunssfsi+0x22>
    11fc:	ba 95       	dec	r27
    11fe:	c9 f7       	brne	.-14     	; 0x11f2 <__fixunssfsi+0x12>
    1200:	12 c0       	rjmp	.+36     	; 0x1226 <__fixunssfsi+0x46>
    1202:	b1 30       	cpi	r27, 0x01	; 1
    1204:	81 f0       	breq	.+32     	; 0x1226 <__fixunssfsi+0x46>
    1206:	77 d0       	rcall	.+238    	; 0x12f6 <__fp_zero>
    1208:	b1 e0       	ldi	r27, 0x01	; 1
    120a:	08 95       	ret
    120c:	74 c0       	rjmp	.+232    	; 0x12f6 <__fp_zero>
    120e:	67 2f       	mov	r22, r23
    1210:	78 2f       	mov	r23, r24
    1212:	88 27       	eor	r24, r24
    1214:	b8 5f       	subi	r27, 0xF8	; 248
    1216:	39 f0       	breq	.+14     	; 0x1226 <__fixunssfsi+0x46>
    1218:	b9 3f       	cpi	r27, 0xF9	; 249
    121a:	cc f3       	brlt	.-14     	; 0x120e <__fixunssfsi+0x2e>
    121c:	86 95       	lsr	r24
    121e:	77 95       	ror	r23
    1220:	67 95       	ror	r22
    1222:	b3 95       	inc	r27
    1224:	d9 f7       	brne	.-10     	; 0x121c <__fixunssfsi+0x3c>
    1226:	3e f4       	brtc	.+14     	; 0x1236 <__fixunssfsi+0x56>
    1228:	90 95       	com	r25
    122a:	80 95       	com	r24
    122c:	70 95       	com	r23
    122e:	61 95       	neg	r22
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	08 95       	ret

00001238 <__floatunsisf>:
    1238:	e8 94       	clt
    123a:	09 c0       	rjmp	.+18     	; 0x124e <__floatsisf+0x12>

0000123c <__floatsisf>:
    123c:	97 fb       	bst	r25, 7
    123e:	3e f4       	brtc	.+14     	; 0x124e <__floatsisf+0x12>
    1240:	90 95       	com	r25
    1242:	80 95       	com	r24
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	99 23       	and	r25, r25
    1250:	a9 f0       	breq	.+42     	; 0x127c <__floatsisf+0x40>
    1252:	f9 2f       	mov	r31, r25
    1254:	96 e9       	ldi	r25, 0x96	; 150
    1256:	bb 27       	eor	r27, r27
    1258:	93 95       	inc	r25
    125a:	f6 95       	lsr	r31
    125c:	87 95       	ror	r24
    125e:	77 95       	ror	r23
    1260:	67 95       	ror	r22
    1262:	b7 95       	ror	r27
    1264:	f1 11       	cpse	r31, r1
    1266:	f8 cf       	rjmp	.-16     	; 0x1258 <__floatsisf+0x1c>
    1268:	fa f4       	brpl	.+62     	; 0x12a8 <__floatsisf+0x6c>
    126a:	bb 0f       	add	r27, r27
    126c:	11 f4       	brne	.+4      	; 0x1272 <__floatsisf+0x36>
    126e:	60 ff       	sbrs	r22, 0
    1270:	1b c0       	rjmp	.+54     	; 0x12a8 <__floatsisf+0x6c>
    1272:	6f 5f       	subi	r22, 0xFF	; 255
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	16 c0       	rjmp	.+44     	; 0x12a8 <__floatsisf+0x6c>
    127c:	88 23       	and	r24, r24
    127e:	11 f0       	breq	.+4      	; 0x1284 <__floatsisf+0x48>
    1280:	96 e9       	ldi	r25, 0x96	; 150
    1282:	11 c0       	rjmp	.+34     	; 0x12a6 <__floatsisf+0x6a>
    1284:	77 23       	and	r23, r23
    1286:	21 f0       	breq	.+8      	; 0x1290 <__floatsisf+0x54>
    1288:	9e e8       	ldi	r25, 0x8E	; 142
    128a:	87 2f       	mov	r24, r23
    128c:	76 2f       	mov	r23, r22
    128e:	05 c0       	rjmp	.+10     	; 0x129a <__floatsisf+0x5e>
    1290:	66 23       	and	r22, r22
    1292:	71 f0       	breq	.+28     	; 0x12b0 <__floatsisf+0x74>
    1294:	96 e8       	ldi	r25, 0x86	; 134
    1296:	86 2f       	mov	r24, r22
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	2a f0       	brmi	.+10     	; 0x12a8 <__floatsisf+0x6c>
    129e:	9a 95       	dec	r25
    12a0:	66 0f       	add	r22, r22
    12a2:	77 1f       	adc	r23, r23
    12a4:	88 1f       	adc	r24, r24
    12a6:	da f7       	brpl	.-10     	; 0x129e <__floatsisf+0x62>
    12a8:	88 0f       	add	r24, r24
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret

000012b2 <__fp_split3>:
    12b2:	57 fd       	sbrc	r21, 7
    12b4:	90 58       	subi	r25, 0x80	; 128
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	59 f0       	breq	.+22     	; 0x12d2 <__fp_splitA+0x10>
    12bc:	5f 3f       	cpi	r21, 0xFF	; 255
    12be:	71 f0       	breq	.+28     	; 0x12dc <__fp_splitA+0x1a>
    12c0:	47 95       	ror	r20

000012c2 <__fp_splitA>:
    12c2:	88 0f       	add	r24, r24
    12c4:	97 fb       	bst	r25, 7
    12c6:	99 1f       	adc	r25, r25
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <__fp_splitA+0x20>
    12ca:	9f 3f       	cpi	r25, 0xFF	; 255
    12cc:	79 f0       	breq	.+30     	; 0x12ec <__fp_splitA+0x2a>
    12ce:	87 95       	ror	r24
    12d0:	08 95       	ret
    12d2:	12 16       	cp	r1, r18
    12d4:	13 06       	cpc	r1, r19
    12d6:	14 06       	cpc	r1, r20
    12d8:	55 1f       	adc	r21, r21
    12da:	f2 cf       	rjmp	.-28     	; 0x12c0 <__fp_split3+0xe>
    12dc:	46 95       	lsr	r20
    12de:	f1 df       	rcall	.-30     	; 0x12c2 <__fp_splitA>
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <__fp_splitA+0x30>
    12e2:	16 16       	cp	r1, r22
    12e4:	17 06       	cpc	r1, r23
    12e6:	18 06       	cpc	r1, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	f1 cf       	rjmp	.-30     	; 0x12ce <__fp_splitA+0xc>
    12ec:	86 95       	lsr	r24
    12ee:	71 05       	cpc	r23, r1
    12f0:	61 05       	cpc	r22, r1
    12f2:	08 94       	sec
    12f4:	08 95       	ret

000012f6 <__fp_zero>:
    12f6:	e8 94       	clt

000012f8 <__fp_szero>:
    12f8:	bb 27       	eor	r27, r27
    12fa:	66 27       	eor	r22, r22
    12fc:	77 27       	eor	r23, r23
    12fe:	cb 01       	movw	r24, r22
    1300:	97 f9       	bld	r25, 7
    1302:	08 95       	ret

00001304 <__mulsf3>:
    1304:	0a d0       	rcall	.+20     	; 0x131a <__mulsf3x>
    1306:	80 c0       	rjmp	.+256    	; 0x1408 <__fp_round>
    1308:	71 d0       	rcall	.+226    	; 0x13ec <__fp_pscA>
    130a:	28 f0       	brcs	.+10     	; 0x1316 <__mulsf3+0x12>
    130c:	76 d0       	rcall	.+236    	; 0x13fa <__fp_pscB>
    130e:	18 f0       	brcs	.+6      	; 0x1316 <__mulsf3+0x12>
    1310:	95 23       	and	r25, r21
    1312:	09 f0       	breq	.+2      	; 0x1316 <__mulsf3+0x12>
    1314:	62 c0       	rjmp	.+196    	; 0x13da <__fp_inf>
    1316:	67 c0       	rjmp	.+206    	; 0x13e6 <__fp_nan>
    1318:	ef cf       	rjmp	.-34     	; 0x12f8 <__fp_szero>

0000131a <__mulsf3x>:
    131a:	cb df       	rcall	.-106    	; 0x12b2 <__fp_split3>
    131c:	a8 f3       	brcs	.-22     	; 0x1308 <__mulsf3+0x4>

0000131e <__mulsf3_pse>:
    131e:	99 23       	and	r25, r25
    1320:	d9 f3       	breq	.-10     	; 0x1318 <__mulsf3+0x14>
    1322:	55 23       	and	r21, r21
    1324:	c9 f3       	breq	.-14     	; 0x1318 <__mulsf3+0x14>
    1326:	95 0f       	add	r25, r21
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	55 1f       	adc	r21, r21
    132c:	aa 27       	eor	r26, r26
    132e:	ee 27       	eor	r30, r30
    1330:	ff 27       	eor	r31, r31
    1332:	bb 27       	eor	r27, r27
    1334:	00 24       	eor	r0, r0
    1336:	08 94       	sec
    1338:	67 95       	ror	r22
    133a:	20 f4       	brcc	.+8      	; 0x1344 <__mulsf3_pse+0x26>
    133c:	e2 0f       	add	r30, r18
    133e:	f3 1f       	adc	r31, r19
    1340:	b4 1f       	adc	r27, r20
    1342:	0a 1e       	adc	r0, r26
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	44 1f       	adc	r20, r20
    134a:	aa 1f       	adc	r26, r26
    134c:	66 95       	lsr	r22
    134e:	a9 f7       	brne	.-22     	; 0x133a <__mulsf3_pse+0x1c>
    1350:	77 95       	ror	r23
    1352:	30 f4       	brcc	.+12     	; 0x1360 <__mulsf3_pse+0x42>
    1354:	f3 0f       	add	r31, r19
    1356:	b4 1f       	adc	r27, r20
    1358:	0a 1e       	adc	r0, r26
    135a:	12 1e       	adc	r1, r18
    135c:	08 f4       	brcc	.+2      	; 0x1360 <__mulsf3_pse+0x42>
    135e:	63 95       	inc	r22
    1360:	33 0f       	add	r19, r19
    1362:	44 1f       	adc	r20, r20
    1364:	aa 1f       	adc	r26, r26
    1366:	22 1f       	adc	r18, r18
    1368:	76 95       	lsr	r23
    136a:	99 f7       	brne	.-26     	; 0x1352 <__mulsf3_pse+0x34>
    136c:	87 95       	ror	r24
    136e:	20 f4       	brcc	.+8      	; 0x1378 <__mulsf3_pse+0x5a>
    1370:	b4 0f       	add	r27, r20
    1372:	0a 1e       	adc	r0, r26
    1374:	12 1e       	adc	r1, r18
    1376:	63 1f       	adc	r22, r19
    1378:	44 0f       	add	r20, r20
    137a:	aa 1f       	adc	r26, r26
    137c:	22 1f       	adc	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	86 95       	lsr	r24
    1382:	a9 f7       	brne	.-22     	; 0x136e <__mulsf3_pse+0x50>
    1384:	86 2f       	mov	r24, r22
    1386:	71 2d       	mov	r23, r1
    1388:	60 2d       	mov	r22, r0
    138a:	11 24       	eor	r1, r1
    138c:	9f 57       	subi	r25, 0x7F	; 127
    138e:	50 40       	sbci	r21, 0x00	; 0
    1390:	8a f0       	brmi	.+34     	; 0x13b4 <__mulsf3_pse+0x96>
    1392:	e1 f0       	breq	.+56     	; 0x13cc <__mulsf3_pse+0xae>
    1394:	88 23       	and	r24, r24
    1396:	4a f0       	brmi	.+18     	; 0x13aa <__mulsf3_pse+0x8c>
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	bb 1f       	adc	r27, r27
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	91 50       	subi	r25, 0x01	; 1
    13a6:	50 40       	sbci	r21, 0x00	; 0
    13a8:	a9 f7       	brne	.-22     	; 0x1394 <__mulsf3_pse+0x76>
    13aa:	9e 3f       	cpi	r25, 0xFE	; 254
    13ac:	51 05       	cpc	r21, r1
    13ae:	70 f0       	brcs	.+28     	; 0x13cc <__mulsf3_pse+0xae>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <__fp_inf>
    13b2:	a2 cf       	rjmp	.-188    	; 0x12f8 <__fp_szero>
    13b4:	5f 3f       	cpi	r21, 0xFF	; 255
    13b6:	ec f3       	brlt	.-6      	; 0x13b2 <__mulsf3_pse+0x94>
    13b8:	98 3e       	cpi	r25, 0xE8	; 232
    13ba:	dc f3       	brlt	.-10     	; 0x13b2 <__mulsf3_pse+0x94>
    13bc:	86 95       	lsr	r24
    13be:	77 95       	ror	r23
    13c0:	67 95       	ror	r22
    13c2:	b7 95       	ror	r27
    13c4:	f7 95       	ror	r31
    13c6:	e7 95       	ror	r30
    13c8:	9f 5f       	subi	r25, 0xFF	; 255
    13ca:	c1 f7       	brne	.-16     	; 0x13bc <__mulsf3_pse+0x9e>
    13cc:	fe 2b       	or	r31, r30
    13ce:	88 0f       	add	r24, r24
    13d0:	91 1d       	adc	r25, r1
    13d2:	96 95       	lsr	r25
    13d4:	87 95       	ror	r24
    13d6:	97 f9       	bld	r25, 7
    13d8:	08 95       	ret

000013da <__fp_inf>:
    13da:	97 f9       	bld	r25, 7
    13dc:	9f 67       	ori	r25, 0x7F	; 127
    13de:	80 e8       	ldi	r24, 0x80	; 128
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	08 95       	ret

000013e6 <__fp_nan>:
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	80 ec       	ldi	r24, 0xC0	; 192
    13ea:	08 95       	ret

000013ec <__fp_pscA>:
    13ec:	00 24       	eor	r0, r0
    13ee:	0a 94       	dec	r0
    13f0:	16 16       	cp	r1, r22
    13f2:	17 06       	cpc	r1, r23
    13f4:	18 06       	cpc	r1, r24
    13f6:	09 06       	cpc	r0, r25
    13f8:	08 95       	ret

000013fa <__fp_pscB>:
    13fa:	00 24       	eor	r0, r0
    13fc:	0a 94       	dec	r0
    13fe:	12 16       	cp	r1, r18
    1400:	13 06       	cpc	r1, r19
    1402:	14 06       	cpc	r1, r20
    1404:	05 06       	cpc	r0, r21
    1406:	08 95       	ret

00001408 <__fp_round>:
    1408:	09 2e       	mov	r0, r25
    140a:	03 94       	inc	r0
    140c:	00 0c       	add	r0, r0
    140e:	11 f4       	brne	.+4      	; 0x1414 <__fp_round+0xc>
    1410:	88 23       	and	r24, r24
    1412:	52 f0       	brmi	.+20     	; 0x1428 <__fp_round+0x20>
    1414:	bb 0f       	add	r27, r27
    1416:	40 f4       	brcc	.+16     	; 0x1428 <__fp_round+0x20>
    1418:	bf 2b       	or	r27, r31
    141a:	11 f4       	brne	.+4      	; 0x1420 <__fp_round+0x18>
    141c:	60 ff       	sbrs	r22, 0
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <__fp_round+0x20>
    1420:	6f 5f       	subi	r22, 0xFF	; 255
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	08 95       	ret

0000142a <__mulhi3>:
    142a:	55 27       	eor	r21, r21
    142c:	00 24       	eor	r0, r0

0000142e <__mulhi3_loop>:
    142e:	80 ff       	sbrs	r24, 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <__mulhi3_skip1>
    1432:	06 0e       	add	r0, r22
    1434:	57 1f       	adc	r21, r23

00001436 <__mulhi3_skip1>:
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	61 15       	cp	r22, r1
    143c:	71 05       	cpc	r23, r1
    143e:	21 f0       	breq	.+8      	; 0x1448 <__mulhi3_exit>
    1440:	96 95       	lsr	r25
    1442:	87 95       	ror	r24
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	99 f7       	brne	.-26     	; 0x142e <__mulhi3_loop>

00001448 <__mulhi3_exit>:
    1448:	95 2f       	mov	r25, r21
    144a:	80 2d       	mov	r24, r0
    144c:	08 95       	ret

0000144e <__prologue_saves__>:
    144e:	2f 92       	push	r2
    1450:	3f 92       	push	r3
    1452:	4f 92       	push	r4
    1454:	5f 92       	push	r5
    1456:	6f 92       	push	r6
    1458:	7f 92       	push	r7
    145a:	8f 92       	push	r8
    145c:	9f 92       	push	r9
    145e:	af 92       	push	r10
    1460:	bf 92       	push	r11
    1462:	cf 92       	push	r12
    1464:	df 92       	push	r13
    1466:	ef 92       	push	r14
    1468:	ff 92       	push	r15
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	ca 1b       	sub	r28, r26
    1478:	db 0b       	sbc	r29, r27
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	09 94       	ijmp

00001486 <__epilogue_restores__>:
    1486:	2a 88       	ldd	r2, Y+18	; 0x12
    1488:	39 88       	ldd	r3, Y+17	; 0x11
    148a:	48 88       	ldd	r4, Y+16	; 0x10
    148c:	5f 84       	ldd	r5, Y+15	; 0x0f
    148e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1490:	7d 84       	ldd	r7, Y+13	; 0x0d
    1492:	8c 84       	ldd	r8, Y+12	; 0x0c
    1494:	9b 84       	ldd	r9, Y+11	; 0x0b
    1496:	aa 84       	ldd	r10, Y+10	; 0x0a
    1498:	b9 84       	ldd	r11, Y+9	; 0x09
    149a:	c8 84       	ldd	r12, Y+8	; 0x08
    149c:	df 80       	ldd	r13, Y+7	; 0x07
    149e:	ee 80       	ldd	r14, Y+6	; 0x06
    14a0:	fd 80       	ldd	r15, Y+5	; 0x05
    14a2:	0c 81       	ldd	r16, Y+4	; 0x04
    14a4:	1b 81       	ldd	r17, Y+3	; 0x03
    14a6:	aa 81       	ldd	r26, Y+2	; 0x02
    14a8:	b9 81       	ldd	r27, Y+1	; 0x01
    14aa:	ce 0f       	add	r28, r30
    14ac:	d1 1d       	adc	r29, r1
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	ed 01       	movw	r28, r26
    14ba:	08 95       	ret

000014bc <_exit>:
    14bc:	f8 94       	cli

000014be <__stop_program>:
    14be:	ff cf       	rjmp	.-2      	; 0x14be <__stop_program>
