
Touch_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00001e22  00001eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00800100  00800100  00001f56  2**0
                  ALLOC
  3 .stab         00001758  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000052e  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  00003be0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002720  00000000  00000000  00003d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000505  00000000  00000000  00006468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5b  00000000  00000000  0000696d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000076c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d8  00000000  00000000  00007874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c7  00000000  00000000  00007e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009513  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
       2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
       6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
       8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
       a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
       c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
       e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
      10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
      12:	f8 c1       	rjmp	.+1008   	; 0x404 <__vector_9>
      14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
      16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
      18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
      1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
      1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
      1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
      20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
      22:	11 24       	eor	r1, r1
      24:	1f be       	out	0x3f, r1	; 63
      26:	cf e5       	ldi	r28, 0x5F	; 95
      28:	d2 e0       	ldi	r29, 0x02	; 2
      2a:	de bf       	out	0x3e, r29	; 62
      2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
      2e:	11 e0       	ldi	r17, 0x01	; 1
      30:	a0 e6       	ldi	r26, 0x60	; 96
      32:	b0 e0       	ldi	r27, 0x00	; 0
      34:	e2 e2       	ldi	r30, 0x22	; 34
      36:	fe e1       	ldi	r31, 0x1E	; 30
      38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
      3a:	05 90       	lpm	r0, Z+
      3c:	0d 92       	st	X+, r0
      3e:	a0 30       	cpi	r26, 0x00	; 0
      40:	b1 07       	cpc	r27, r17
      42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
      44:	11 e0       	ldi	r17, 0x01	; 1
      46:	a0 e0       	ldi	r26, 0x00	; 0
      48:	b1 e0       	ldi	r27, 0x01	; 1
      4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
      4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
      4e:	a4 35       	cpi	r26, 0x54	; 84
      50:	b1 07       	cpc	r27, r17
      52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
      54:	d0 d8       	rcall	.-3680   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
      56:	e3 ce       	rjmp	.-570    	; 0xfffffe1e <__eeprom_end+0xff7efe1e>

00000058 <__bad_interrupt>:
      58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
      5a:	00 c0       	rjmp	.+0      	; 0x5c <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
      5c:	00 c0       	rjmp	.+0      	; 0x5e <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
      5e:	00 c0       	rjmp	.+0      	; 0x60 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
      60:	00 c0       	rjmp	.+0      	; 0x62 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
      62:	00 c0       	rjmp	.+0      	; 0x64 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
      64:	00 c0       	rjmp	.+0      	; 0x66 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
      66:	00 00       	nop
	ret          ; 3   "
      68:	08 95       	ret

0000006a <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
      6a:	d6 98       	cbi	0x1a, 6	; 26
	cbi SCL_DDR,SCL		;release SCL
      6c:	d4 98       	cbi	0x1a, 4	; 26
	cbi SDA_OUT,SDA
      6e:	de 98       	cbi	0x1b, 6	; 27
	cbi SCL_OUT,SCL
      70:	dc 98       	cbi	0x1b, 4	; 27
	ret
      72:	08 95       	ret

00000074 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
      74:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay T/2
      76:	f1 df       	rcall	.-30     	; 0x5a <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
      78:	1d d0       	rcall	.+58     	; 0xb4 <i2c_write>
	ret
      7a:	08 95       	ret

0000007c <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
      7c:	d4 9a       	sbi	0x1a, 4	; 26
	rcall 	i2c_delay_T2	;delay  T/2
      7e:	ed df       	rcall	.-38     	; 0x5a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
      80:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      82:	eb df       	rcall	.-42     	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      84:	d4 98       	cbi	0x1a, 4	; 26
	rcall 	i2c_delay_T2	;delay  T/2
      86:	e9 df       	rcall	.-46     	; 0x5a <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
      88:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay	T/2
      8a:	e7 df       	rcall	.-50     	; 0x5a <i2c_delay_T2>
	
	rcall	i2c_write	;write address
      8c:	13 d0       	rcall	.+38     	; 0xb4 <i2c_write>
	ret
      8e:	08 95       	ret

00000090 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
      90:	08 2e       	mov	r0, r24

00000092 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
      92:	d6 9a       	sbi	0x1a, 6	; 26
	rcall 	i2c_delay_T2	;delay T/2
      94:	e2 df       	rcall	.-60     	; 0x5a <i2c_delay_T2>
	mov	r24,__tmp_reg__
      96:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
      98:	0d d0       	rcall	.+26     	; 0xb4 <i2c_write>
	tst	r24		;if device not busy -> done
      9a:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
      9c:	11 f0       	breq	.+4      	; 0xa2 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
      9e:	02 d0       	rcall	.+4      	; 0xa4 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
      a0:	f8 cf       	rjmp	.-16     	; 0x92 <i2c_start_wait1>

000000a2 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
      a2:	08 95       	ret

000000a4 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
      a4:	d4 9a       	sbi	0x1a, 4	; 26
	sbi	SDA_DDR,SDA	;force SDA low
      a6:	d6 9a       	sbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      a8:	d8 df       	rcall	.-80     	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      aa:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
      ac:	d6 df       	rcall	.-84     	; 0x5a <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
      ae:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      b0:	d4 df       	rcall	.-88     	; 0x5a <i2c_delay_T2>
	ret
      b2:	08 95       	ret

000000b4 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
      b4:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
      b6:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
      b8:	01 c0       	rjmp	.+2      	; 0xbc <i2c_write_first>

000000ba <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
      ba:	88 0f       	add	r24, r24

000000bc <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
      bc:	59 f0       	breq	.+22     	; 0xd4 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
      be:	d4 9a       	sbi	0x1a, 4	; 26
	brcc	i2c_write_low
      c0:	18 f4       	brcc	.+6      	; 0xc8 <i2c_write_low>
	nop
      c2:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
      c4:	d6 98       	cbi	0x1a, 6	; 26
	rjmp	i2c_write_high
      c6:	02 c0       	rjmp	.+4      	; 0xcc <i2c_write_high>

000000c8 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
      c8:	d6 9a       	sbi	0x1a, 6	; 26
	rjmp	i2c_write_high
      ca:	00 c0       	rjmp	.+0      	; 0xcc <i2c_write_high>

000000cc <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
      cc:	c6 df       	rcall	.-116    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      ce:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
      d0:	c4 df       	rcall	.-120    	; 0x5a <i2c_delay_T2>
	rjmp	i2c_write_bit
      d2:	f3 cf       	rjmp	.-26     	; 0xba <i2c_write_bit>

000000d4 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
      d4:	d4 9a       	sbi	0x1a, 4	; 26
	cbi	SDA_DDR,SDA	;release SDA
      d6:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      d8:	c0 df       	rcall	.-128    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
      da:	d4 98       	cbi	0x1a, 4	; 26

000000dc <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
      dc:	cc 9b       	sbis	0x19, 4	; 25
	rjmp	i2c_ack_wait
      de:	fe cf       	rjmp	.-4      	; 0xdc <i2c_ack_wait>
	
	clr	r24		;return 0
      e0:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
      e2:	ce 99       	sbic	0x19, 6	; 25
	ldi	r24,1
      e4:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
      e6:	b9 df       	rcall	.-142    	; 0x5a <i2c_delay_T2>
	clr	r25
      e8:	99 27       	eor	r25, r25
	ret
      ea:	08 95       	ret

000000ec <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
      ec:	88 27       	eor	r24, r24
	rjmp	i2c_read
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <i2c_read>

000000f0 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
      f0:	81 e0       	ldi	r24, 0x01	; 1

000000f2 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
      f2:	71 e0       	ldi	r23, 0x01	; 1

000000f4 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
      f4:	d4 9a       	sbi	0x1a, 4	; 26
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
      f6:	d6 98       	cbi	0x1a, 6	; 26
	rcall	i2c_delay_T2	;delay T/2
      f8:	b0 df       	rcall	.-160    	; 0x5a <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
      fa:	d4 98       	cbi	0x1a, 4	; 26
	rcall	i2c_delay_T2	;delay T/2
      fc:	ae df       	rcall	.-164    	; 0x5a <i2c_delay_T2>

000000fe <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
      fe:	cc 9b       	sbis	0x19, 4	; 25
    rjmp	i2c_read_stretch
     100:	fe cf       	rjmp	.-4      	; 0xfe <i2c_read_stretch>
    	
	clc			;clear carry flag
     102:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     104:	ce 99       	sbic	0x19, 6	; 25
	sec			;  set carry flag
     106:	08 94       	sec
	
	rol	r23		;store bit
     108:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     10a:	a0 f7       	brcc	.-24     	; 0xf4 <i2c_read_bit>

0000010c <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     10c:	d4 9a       	sbi	0x1a, 4	; 26
	cpi	r24,1
     10e:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     110:	11 f0       	breq	.+4      	; 0x116 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     112:	d6 98       	cbi	0x1a, 6	; 26
	rjmp	i2c_put_ack_high
     114:	01 c0       	rjmp	.+2      	; 0x118 <i2c_put_ack_high>

00000116 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     116:	d6 9a       	sbi	0x1a, 6	; 26

00000118 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     118:	a0 df       	rcall	.-192    	; 0x5a <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     11a:	d4 98       	cbi	0x1a, 4	; 26

0000011c <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     11c:	cc 9b       	sbis	0x19, 4	; 25
	rjmp	i2c_put_ack_wait
     11e:	fe cf       	rjmp	.-4      	; 0x11c <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     120:	9c df       	rcall	.-200    	; 0x5a <i2c_delay_T2>
	mov	r24,r23
     122:	87 2f       	mov	r24, r23
	clr	r25
     124:	99 27       	eor	r25, r25
	ret
     126:	08 95       	ret

00000128 <pca9685_init2>:
	12,    // Channel 0
};


void pca9685_init2(int address)
{
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	18 2f       	mov	r17, r24
	/********************************************/
	/* Init code for the PCA9685                */
	/* Input:[address of the pc9685 to init]    */
	/* Output:[void]                            */
	/********************************************/
	i2c_start(address);                // Start
     132:	a0 df       	rcall	.-192    	; 0x74 <i2c_start>
	i2c_write(MODE1);           // Mode 1 address
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	be df       	rcall	.-132    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_RESTART);      // Setting mode to sleep so we can change the default PWM frequency
     138:	80 e8       	ldi	r24, 0x80	; 128
     13a:	bc df       	rcall	.-136    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
     13c:	b3 df       	rcall	.-154    	; 0xa4 <i2c_stop>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     13e:	c6 e9       	ldi	r28, 0x96	; 150
     140:	d0 e0       	ldi	r29, 0x00	; 0
     142:	ce 01       	movw	r24, r28
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <pca9685_init2+0x1c>
	
	_delay_loop_2(150);           // Required 50 us delay
	
	i2c_start(address);                // Start
     148:	81 2f       	mov	r24, r17
     14a:	94 df       	rcall	.-216    	; 0x74 <i2c_start>
	i2c_write(MODE1);            // PWM frequency PRE_SCALE address
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	b2 df       	rcall	.-156    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_AI);            // osc_clk/(4096*update_rate) // 25000000/(4096*1500)= 4.069 ~4
     150:	80 e2       	ldi	r24, 0x20	; 32
     152:	b0 df       	rcall	.-160    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
     154:	a7 df       	rcall	.-178    	; 0xa4 <i2c_stop>
     156:	21 97       	sbiw	r28, 0x01	; 1
     158:	f1 f7       	brne	.-4      	; 0x156 <pca9685_init2+0x2e>
	
	_delay_loop_2(150);           // delay at least 500 us
	
	i2c_start(address);                // Start
     15a:	81 2f       	mov	r24, r17
     15c:	8b df       	rcall	.-234    	; 0x74 <i2c_start>
	i2c_write(MODE2);           // Mode 1 register address
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	a9 df       	rcall	.-174    	; 0xb4 <i2c_write>
	i2c_write(PCA9685_INVRT);            // Set to our preferred mode[ Reset, INT_CLK, Auto-Increment, Normal Mode]
     162:	80 e1       	ldi	r24, 0x10	; 16
     164:	a7 df       	rcall	.-178    	; 0xb4 <i2c_write>
	i2c_stop();                 // Stop
     166:	9e df       	rcall	.-196    	; 0xa4 <i2c_stop>
     168:	80 e1       	ldi	r24, 0x10	; 16
     16a:	97 e2       	ldi	r25, 0x27	; 39
     16c:	fc 01       	movw	r30, r24
     16e:	31 97       	sbiw	r30, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <pca9685_init2+0x46>
     172:	01 97       	sbiw	r24, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <pca9685_init2+0x4a>
     176:	06 e0       	ldi	r16, 0x06	; 6
     178:	c0 e1       	ldi	r28, 0x10	; 16
     17a:	d7 e2       	ldi	r29, 0x27	; 39
	_delay_loop_2(10000);           // delay at least 500 us
	
	
	for(int i = 0; i <= LEDCOUNT; i++)
	{
		i2c_start(address);                // Start
     17c:	81 2f       	mov	r24, r17
     17e:	7a df       	rcall	.-268    	; 0x74 <i2c_start>
		i2c_write(LED0_ON_L + 4 * i);
     180:	80 2f       	mov	r24, r16
     182:	98 df       	rcall	.-208    	; 0xb4 <i2c_write>
		i2c_write(0x00);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	96 df       	rcall	.-212    	; 0xb4 <i2c_write>
		i2c_write(0x00);
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	94 df       	rcall	.-216    	; 0xb4 <i2c_write>
		i2c_write(0x10);
     18c:	80 e1       	ldi	r24, 0x10	; 16
     18e:	92 df       	rcall	.-220    	; 0xb4 <i2c_write>
		i2c_write(0x50);
     190:	80 e5       	ldi	r24, 0x50	; 80
     192:	90 df       	rcall	.-224    	; 0xb4 <i2c_write>
		i2c_stop();                 // Stop
     194:	87 df       	rcall	.-242    	; 0xa4 <i2c_stop>
     196:	fe 01       	movw	r30, r28
     198:	31 97       	sbiw	r30, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <pca9685_init2+0x70>
     19c:	fe 01       	movw	r30, r28
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <pca9685_init2+0x76>
     1a2:	0c 5f       	subi	r16, 0xFC	; 252
	
	_delay_loop_2(10000);           // delay at least 500 us
	_delay_loop_2(10000);           // delay at least 500 us
	
	
	for(int i = 0; i <= LEDCOUNT; i++)
     1a4:	06 34       	cpi	r16, 0x46	; 70
     1a6:	51 f7       	brne	.-44     	; 0x17c <pca9685_init2+0x54>
		_delay_loop_2(10000);           // delay at least 500 us
		_delay_loop_2(10000);           // delay at least 500 us
		
	}
	
}
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	08 95       	ret

000001b2 <pca9685_send_all>:



void pca9685_send_all(int address) 
{ 
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	c8 2e       	mov	r12, r24
     1c4:	0c e9       	ldi	r16, 0x9C	; 156
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	86 e0       	ldi	r24, 0x06	; 6
     1ca:	d8 2e       	mov	r13, r24
     1cc:	96 e9       	ldi	r25, 0x96	; 150
     1ce:	e9 2e       	mov	r14, r25
     1d0:	f1 2c       	mov	r15, r1
    int i = 0;                  // temp register for LEDCOUNT 
    int pwm;                    // temp register for PWM 
    for(i=0; i<=LEDCOUNT; i++)  // cycle through all 16 LED 
   
	 {
		 i2c_start(address);            // Start
     1d2:	8c 2d       	mov	r24, r12
     1d4:	4f df       	rcall	.-354    	; 0x74 <i2c_start>
		 i2c_write(LED0_ON_L + 4 * i);// start from LED0 address, each pwm constructed from
     1d6:	8d 2d       	mov	r24, r13
     1d8:	6d df       	rcall	.-294    	; 0xb4 <i2c_write>
		 i2c_write(0x00);        // 4 12bit register, LED_ON_L
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	6b df       	rcall	.-298    	; 0xb4 <i2c_write>
		 i2c_write(0x00);        // LED_ON_H
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	69 df       	rcall	.-302    	; 0xb4 <i2c_write>
	
}



void pca9685_send_all(int address) 
     1e2:	e8 01       	movw	r28, r16
		 i2c_start(address);            // Start
		 i2c_write(LED0_ON_L + 4 * i);// start from LED0 address, each pwm constructed from
		 i2c_write(0x00);        // 4 12bit register, LED_ON_L
		 i2c_write(0x00);        // LED_ON_H
		 pwm = PWMData[i];       // update selected LED data in the array
		 i2c_write(pwm);         // LED_OFF_L
     1e4:	88 81       	ld	r24, Y
     1e6:	66 df       	rcall	.-308    	; 0xb4 <i2c_write>
     1e8:	0c 5f       	subi	r16, 0xFC	; 252
     1ea:	1f 4f       	sbci	r17, 0xFF	; 255
		 pwm = PWMData[i]>>8;    // update selected LED data in the array
		 i2c_write(pwm);         // LED_OFF_H
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	62 df       	rcall	.-316    	; 0xb4 <i2c_write>
		 i2c_stop();             // Stop
     1f0:	59 df       	rcall	.-334    	; 0xa4 <i2c_stop>
     1f2:	f7 01       	movw	r30, r14
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <pca9685_send_all+0x42>
     1f8:	84 e0       	ldi	r24, 0x04	; 4
     1fa:	d8 0e       	add	r13, r24
/* Input:[address of the pc9685 to update]  */ 
/* Output:[void]                            */ 
/********************************************/ 
    int i = 0;                  // temp register for LEDCOUNT 
    int pwm;                    // temp register for PWM 
    for(i=0; i<=LEDCOUNT; i++)  // cycle through all 16 LED 
     1fc:	e6 e4       	ldi	r30, 0x46	; 70
     1fe:	de 16       	cp	r13, r30
     200:	41 f7       	brne	.-48     	; 0x1d2 <pca9685_send_all+0x20>
		 i2c_stop();             // Stop
		 _delay_loop_2(150);           // delay at least 500 us

	 }
	 
} 
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	ff 90       	pop	r15
     20c:	ef 90       	pop	r14
     20e:	df 90       	pop	r13
     210:	cf 90       	pop	r12
     212:	08 95       	ret

00000214 <pca9685_send>:

void pca9685_send(int address, long value, int led) 
{ 
     214:	cf 92       	push	r12
     216:	df 92       	push	r13
     218:	ef 92       	push	r14
     21a:	ff 92       	push	r15
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	00 d0       	rcall	.+0      	; 0x222 <pca9685_send+0xe>
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
     226:	6a 01       	movw	r12, r20
     228:	7b 01       	movw	r14, r22
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	c9 16       	cp	r12, r25
     22e:	90 e1       	ldi	r25, 0x10	; 16
     230:	d9 06       	cpc	r13, r25
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	e9 06       	cpc	r14, r25
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	f9 06       	cpc	r15, r25
     23a:	34 f0       	brlt	.+12     	; 0x248 <pca9685_send+0x34>
     23c:	4f ef       	ldi	r20, 0xFF	; 255
     23e:	c4 2e       	mov	r12, r20
     240:	4f e0       	ldi	r20, 0x0F	; 15
     242:	d4 2e       	mov	r13, r20
     244:	e1 2c       	mov	r14, r1
     246:	f1 2c       	mov	r15, r1
    int pwm;                    // temp variable for PWM 
    if(value > 4095)            // if larger than 4095 than full on 
            value = 4095;       // cant be larger than 4095 
    if(led > 15)                // if LED larger than 15 than on other chip 
            led = 15;           //***** need to implement to select next pcs9685 
    i2c_start(address);                // Start 
     248:	29 83       	std	Y+1, r18	; 0x01
     24a:	3a 83       	std	Y+2, r19	; 0x02
     24c:	13 df       	rcall	.-474    	; 0x74 <i2c_start>
    i2c_write(LED0_ON_L + 4 * led);  // select selected LED address 
     24e:	29 81       	ldd	r18, Y+1	; 0x01
     250:	82 2f       	mov	r24, r18
     252:	3a 81       	ldd	r19, Y+2	; 0x02
     254:	93 2f       	mov	r25, r19
     256:	80 31       	cpi	r24, 0x10	; 16
     258:	91 05       	cpc	r25, r1
     25a:	14 f0       	brlt	.+4      	; 0x260 <__stack+0x1>
     25c:	8f e0       	ldi	r24, 0x0F	; 15
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	88 0f       	add	r24, r24
     262:	88 0f       	add	r24, r24
     264:	8a 5f       	subi	r24, 0xFA	; 250
     266:	26 df       	rcall	.-436    	; 0xb4 <i2c_write>
    i2c_write(0x00);            // LED_ON_L 
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	24 df       	rcall	.-440    	; 0xb4 <i2c_write>
    i2c_write(0x00);            // LED_ON_H 
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	22 df       	rcall	.-444    	; 0xb4 <i2c_write>
    pwm = value;                // PWM value lo byte 
    i2c_write(pwm);             // LED_OFF_L 
     270:	8c 2d       	mov	r24, r12
     272:	20 df       	rcall	.-448    	; 0xb4 <i2c_write>
    pwm = value>>8;             // pwm 16 bit long, now shift upper 8 to lower 8 
    i2c_write(pwm);             // LED_OFF_H 
     274:	8d 2d       	mov	r24, r13
     276:	1e df       	rcall	.-452    	; 0xb4 <i2c_write>
    i2c_stop();                 // STop 
     278:	15 df       	rcall	.-470    	; 0xa4 <i2c_stop>
} 
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	df 90       	pop	r13
     288:	cf 90       	pop	r12
     28a:	08 95       	ret

0000028c <pca9685_brightness.constprop.1>:


void pca9685_brightness(int address, int percent, int led) 
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	eb 01       	movw	r28, r22
/* LED to set brightness 0to15]             */ 
/* Output:[void]                            */ 
/********************************************/ 
    float off;                          // temp variable 
    const float onePercent = 40.96; 
    if (percent < 1) {                  // if % less than 1 than LED OFF 
     292:	18 16       	cp	r1, r24
     294:	19 06       	cpc	r1, r25
     296:	d4 f5       	brge	.+116    	; 0x30c <pca9685_brightness.constprop.1+0x80>
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
    pca9685_send(address,0,led);        // update selected LED 
    return;                             // return from function 
    } 
    if (percent >= 100) {               // if % greater than 100 than LED ON 
     298:	84 36       	cpi	r24, 0x64	; 100
     29a:	91 05       	cpc	r25, r1
     29c:	0c f5       	brge	.+66     	; 0x2e0 <pca9685_brightness.constprop.1+0x54>
    PWMData[led] = PCA9685_LED_ON>>8;   // update data in array 
    pca9685_send(address,4095,led);     // update selected LED 
    return;                             // return from function 
    } 
    off = onePercent * percent;         // different approach with float need to check if code faster than int32 way ? 
     29e:	9c 01       	movw	r18, r24
     2a0:	b9 01       	movw	r22, r18
     2a2:	88 27       	eor	r24, r24
     2a4:	77 fd       	sbrc	r23, 7
     2a6:	80 95       	com	r24
     2a8:	98 2f       	mov	r25, r24
     2aa:	79 dc       	rcall	.-1806   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     2ac:	2a e0       	ldi	r18, 0x0A	; 10
     2ae:	37 ed       	ldi	r19, 0xD7	; 215
     2b0:	43 e2       	ldi	r20, 0x23	; 35
     2b2:	52 e4       	ldi	r21, 0x42	; 66
     2b4:	d8 dc       	rcall	.-1616   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
//    off = (int32)4096 * percent;        // calculate percent (max*percent)/100 
//    off = off / 100;                    // ex (4096*50%)=204800/100=2048 
//    x = make16(off>>8,off);             // make 16 of 32 ?! why.. dont care at this time 
    PWMData[led] = off;                 // update data array in case we update all LED next 
     2b6:	40 dc       	rcall	.-1920   	; 0xfffffb38 <__eeprom_end+0xff7efb38>
     2b8:	ab 01       	movw	r20, r22
     2ba:	bc 01       	movw	r22, r24
     2bc:	fe 01       	movw	r30, r28
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	ee 0f       	add	r30, r30
     2c4:	ff 1f       	adc	r31, r31
     2c6:	e4 56       	subi	r30, 0x64	; 100
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ca:	40 83       	st	Z, r20
     2cc:	51 83       	std	Z+1, r21	; 0x01
     2ce:	62 83       	std	Z+2, r22	; 0x02
     2d0:	73 83       	std	Z+3, r23	; 0x03
    pca9685_send(address,off,led);      // send it to pca9685 
     2d2:	8a ea       	ldi	r24, 0xAA	; 170
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	9e 01       	movw	r18, r28
     2d8:	9d df       	rcall	.-198    	; 0x214 <pca9685_send>
} 
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
    pca9685_send(address,0,led);        // update selected LED 
    return;                             // return from function 
    } 
    if (percent >= 100) {               // if % greater than 100 than LED ON 
    PWMData[led] = PCA9685_LED_ON>>8;   // update data in array 
     2e0:	fb 01       	movw	r30, r22
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	e4 56       	subi	r30, 0x64	; 100
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	10 82       	st	Z, r1
     2f0:	11 82       	std	Z+1, r1	; 0x01
     2f2:	12 82       	std	Z+2, r1	; 0x02
     2f4:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,4095,led);     // update selected LED 
     2f6:	8a ea       	ldi	r24, 0xAA	; 170
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	4f ef       	ldi	r20, 0xFF	; 255
     2fc:	5f e0       	ldi	r21, 0x0F	; 15
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	9e 01       	movw	r18, r28
     304:	87 df       	rcall	.-242    	; 0x214 <pca9685_send>
//    off = (int32)4096 * percent;        // calculate percent (max*percent)/100 
//    off = off / 100;                    // ex (4096*50%)=204800/100=2048 
//    x = make16(off>>8,off);             // make 16 of 32 ?! why.. dont care at this time 
    PWMData[led] = off;                 // update data array in case we update all LED next 
    pca9685_send(address,off,led);      // send it to pca9685 
} 
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret
/* Output:[void]                            */ 
/********************************************/ 
    float off;                          // temp variable 
    const float onePercent = 40.96; 
    if (percent < 1) {                  // if % less than 1 than LED OFF 
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
     30c:	fb 01       	movw	r30, r22
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	e4 56       	subi	r30, 0x64	; 100
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	10 82       	st	Z, r1
     31c:	11 82       	std	Z+1, r1	; 0x01
     31e:	12 82       	std	Z+2, r1	; 0x02
     320:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,0,led);        // update selected LED 
     322:	8a ea       	ldi	r24, 0xAA	; 170
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	ba 01       	movw	r22, r20
     32c:	9e 01       	movw	r18, r28
     32e:	72 df       	rcall	.-284    	; 0x214 <pca9685_send>
     330:	d4 cf       	rjmp	.-88     	; 0x2da <pca9685_brightness.constprop.1+0x4e>

00000332 <pca9685_brightness>:
    i2c_stop();                 // STop 
} 


void pca9685_brightness(int address, int percent, int led) 
{ 
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	8c 01       	movw	r16, r24
     33c:	ea 01       	movw	r28, r20
/* LED to set brightness 0to15]             */ 
/* Output:[void]                            */ 
/********************************************/ 
    float off;                          // temp variable 
    const float onePercent = 40.96; 
    if (percent < 1) {                  // if % less than 1 than LED OFF 
     33e:	16 16       	cp	r1, r22
     340:	17 06       	cpc	r1, r23
     342:	cc f5       	brge	.+114    	; 0x3b6 <pca9685_brightness+0x84>
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
    pca9685_send(address,0,led);        // update selected LED 
    return;                             // return from function 
    } 
    if (percent >= 100) {               // if % greater than 100 than LED ON 
     344:	64 36       	cpi	r22, 0x64	; 100
     346:	71 05       	cpc	r23, r1
     348:	04 f5       	brge	.+64     	; 0x38a <pca9685_brightness+0x58>
    PWMData[led] = PCA9685_LED_ON>>8;   // update data in array 
    pca9685_send(address,4095,led);     // update selected LED 
    return;                             // return from function 
    } 
    off = onePercent * percent;         // different approach with float need to check if code faster than int32 way ? 
     34a:	88 27       	eor	r24, r24
     34c:	77 fd       	sbrc	r23, 7
     34e:	80 95       	com	r24
     350:	98 2f       	mov	r25, r24
     352:	25 dc       	rcall	.-1974   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     354:	2a e0       	ldi	r18, 0x0A	; 10
     356:	37 ed       	ldi	r19, 0xD7	; 215
     358:	43 e2       	ldi	r20, 0x23	; 35
     35a:	52 e4       	ldi	r21, 0x42	; 66
     35c:	84 dc       	rcall	.-1784   	; 0xfffffc66 <__eeprom_end+0xff7efc66>
//    off = (int32)4096 * percent;        // calculate percent (max*percent)/100 
//    off = off / 100;                    // ex (4096*50%)=204800/100=2048 
//    x = make16(off>>8,off);             // make 16 of 32 ?! why.. dont care at this time 
    PWMData[led] = off;                 // update data array in case we update all LED next 
     35e:	ec db       	rcall	.-2088   	; 0xfffffb38 <__eeprom_end+0xff7efb38>
     360:	ab 01       	movw	r20, r22
     362:	bc 01       	movw	r22, r24
     364:	fe 01       	movw	r30, r28
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	ee 0f       	add	r30, r30
     36c:	ff 1f       	adc	r31, r31
     36e:	e4 56       	subi	r30, 0x64	; 100
     370:	ff 4f       	sbci	r31, 0xFF	; 255
     372:	40 83       	st	Z, r20
     374:	51 83       	std	Z+1, r21	; 0x01
     376:	62 83       	std	Z+2, r22	; 0x02
     378:	73 83       	std	Z+3, r23	; 0x03
    pca9685_send(address,off,led);      // send it to pca9685 
     37a:	c8 01       	movw	r24, r16
     37c:	9e 01       	movw	r18, r28
     37e:	4a df       	rcall	.-364    	; 0x214 <pca9685_send>
} 
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	08 95       	ret
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
    pca9685_send(address,0,led);        // update selected LED 
    return;                             // return from function 
    } 
    if (percent >= 100) {               // if % greater than 100 than LED ON 
    PWMData[led] = PCA9685_LED_ON>>8;   // update data in array 
     38a:	fa 01       	movw	r30, r20
     38c:	ee 0f       	add	r30, r30
     38e:	ff 1f       	adc	r31, r31
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	e4 56       	subi	r30, 0x64	; 100
     396:	ff 4f       	sbci	r31, 0xFF	; 255
     398:	10 82       	st	Z, r1
     39a:	11 82       	std	Z+1, r1	; 0x01
     39c:	12 82       	std	Z+2, r1	; 0x02
     39e:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,4095,led);     // update selected LED 
     3a0:	4f ef       	ldi	r20, 0xFF	; 255
     3a2:	5f e0       	ldi	r21, 0x0F	; 15
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	9e 01       	movw	r18, r28
     3aa:	34 df       	rcall	.-408    	; 0x214 <pca9685_send>
//    off = (int32)4096 * percent;        // calculate percent (max*percent)/100 
//    off = off / 100;                    // ex (4096*50%)=204800/100=2048 
//    x = make16(off>>8,off);             // make 16 of 32 ?! why.. dont care at this time 
    PWMData[led] = off;                 // update data array in case we update all LED next 
    pca9685_send(address,off,led);      // send it to pca9685 
} 
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret
/* Output:[void]                            */ 
/********************************************/ 
    float off;                          // temp variable 
    const float onePercent = 40.96; 
    if (percent < 1) {                  // if % less than 1 than LED OFF 
    PWMData[led] = PCA9685_LED_OFF>>8;  // update data in array in case we use update all LED next 
     3b6:	fa 01       	movw	r30, r20
     3b8:	ee 0f       	add	r30, r30
     3ba:	ff 1f       	adc	r31, r31
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	e4 56       	subi	r30, 0x64	; 100
     3c2:	ff 4f       	sbci	r31, 0xFF	; 255
     3c4:	10 82       	st	Z, r1
     3c6:	11 82       	std	Z+1, r1	; 0x01
     3c8:	12 82       	std	Z+2, r1	; 0x02
     3ca:	13 82       	std	Z+3, r1	; 0x03
    pca9685_send(address,0,led);        // update selected LED 
     3cc:	c8 01       	movw	r24, r16
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	ba 01       	movw	r22, r20
     3d4:	9e 01       	movw	r18, r28
     3d6:	1e df       	rcall	.-452    	; 0x214 <pca9685_send>
     3d8:	d3 cf       	rjmp	.-90     	; 0x380 <pca9685_brightness+0x4e>

000003da <PCA9685AllLedOff>:
    pca9685_send(address,off,led);      // send it to pca9685 
} 

void PCA9685AllLedOff(int address) 
{ 
    i2c_start(address);                        // Start 
     3da:	4c de       	rcall	.-872    	; 0x74 <i2c_start>
    i2c_write(ALL_LED_OFF_L);         // AllLED Off register 
     3dc:	8c ef       	ldi	r24, 0xFC	; 252
     3de:	6a de       	rcall	.-812    	; 0xb4 <i2c_write>
    i2c_write(0b00000000);              // data 
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	68 de       	rcall	.-816    	; 0xb4 <i2c_write>
    i2c_write(0b00010000);              // data 
     3e4:	80 e1       	ldi	r24, 0x10	; 16
     3e6:	66 de       	rcall	.-820    	; 0xb4 <i2c_write>
    i2c_stop();                         // Stop 
     3e8:	5d de       	rcall	.-838    	; 0xa4 <i2c_stop>
} 
     3ea:	08 95       	ret

000003ec <init_timer_isr>:
============================================================================*/
void init_timer_isr( void )
{
   /*  set timer compare value (how often timer ISR will fire set to 1 ms timer interrupt) */

   OCR0A = ( TICKS_PER_MS * 1);
     3ec:	84 e0       	ldi	r24, 0x04	; 4
     3ee:	86 bf       	out	0x36, r24	; 54

   /*  enable timer ISR on compare A */
   TIMSK0 |= 0x02u; // Caution
     3f0:	89 b7       	in	r24, 0x39	; 57
     3f2:	82 60       	ori	r24, 0x02	; 2
     3f4:	89 bf       	out	0x39, r24	; 57
   /*  timer prescaler = system clock / 1024  */
   TCCR0B |= 0x05u; // Caution
     3f6:	83 b7       	in	r24, 0x33	; 51
     3f8:	85 60       	ori	r24, 0x05	; 5
     3fa:	83 bf       	out	0x33, r24	; 51
   /*  timer mode = CTC (count up to compare value, then reset)    */
   TCCR0A |= 0x02u; // Caution
     3fc:	80 b7       	in	r24, 0x30	; 48
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	80 bf       	out	0x30, r24	; 48
}
     402:	08 95       	ret

00000404 <__vector_9>:

ISR(TIM0_COMPA_vect)
{
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	8f 93       	push	r24
     414:	9f 93       	push	r25
  time_ms_inc++;
     416:	80 91 03 01 	lds	r24, 0x0103
     41a:	90 91 04 01 	lds	r25, 0x0104
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	90 93 04 01 	sts	0x0104, r25
     424:	80 93 03 01 	sts	0x0103, r24

  if(time_ms_inc >= qt_measurement_period_msec)
     428:	20 91 dc 00 	lds	r18, 0x00DC
     42c:	30 91 dd 00 	lds	r19, 0x00DD
     430:	82 17       	cp	r24, r18
     432:	93 07       	cpc	r25, r19
     434:	38 f0       	brcs	.+14     	; 0x444 <__vector_9+0x40>
  {
    time_ms_inc =0;
     436:	10 92 04 01 	sts	0x0104, r1
     43a:	10 92 03 01 	sts	0x0103, r1
   /*  set flag: it's time to measure touch    */
   time_to_measure_touch = 1u;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	80 93 02 01 	sts	0x0102, r24
  else
  {

  }
  /*  update the current time */
   current_time_ms_touch++;;
     444:	80 91 00 01 	lds	r24, 0x0100
     448:	90 91 01 01 	lds	r25, 0x0101
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	90 93 01 01 	sts	0x0101, r25
     452:	80 93 00 01 	sts	0x0100, r24
}
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	3f 91       	pop	r19
     45c:	2f 91       	pop	r18
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <set_timer_period>:
------------------------------------------------------------------------------
Purpose :   set the timer period
============================================================================*/
void set_timer_period(uint16_t qt_measurement_period_msec)
{
	OCR0A = ( TICKS_PER_MS * 1);
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	86 bf       	out	0x36, r24	; 54
}
     46c:	08 95       	ret

0000046e <init_system>:
Purpose :   initialise host app, pins, watchdog, etc
============================================================================*/
void init_system( void )
{
    /*  run at 4MHz (assuming internal clock is set to 8MHz)*/
    CLKPR = 0x80u;
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	86 bd       	out	0x26, r24	; 38
    CLKPR = 0x01u;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	86 bd       	out	0x26, r24	; 38

    /*  disable pull-ups    */
    MCUCR |= (1u << PUD);
     476:	85 b7       	in	r24, 0x35	; 53
     478:	80 64       	ori	r24, 0x40	; 64
     47a:	85 bf       	out	0x35, r24	; 53

}
     47c:	08 95       	ret

0000047e <_00110000001_>:
EXTERN reg_clyb;
EXTERN reg_flyab;
#endif
GLOBAL_FUNCTION _00110000001_
_00110000001_:
    push usr_1
     47e:	7f 93       	push	r23
    push usr_2
     480:	9f 93       	push	r25
    in   usr_1,REG(PORT,PORT_YB)
     482:	7b b3       	in	r23, 0x1b	; 27
    mov  usr_2,p_1
     484:	98 2f       	mov	r25, r24
    com  usr_2
     486:	90 95       	com	r25
    and  usr_1,usr_2
     488:	79 23       	and	r23, r25
    out  REG(PORT,PORT_YB),usr_1
     48a:	7b bb       	out	0x1b, r23	; 27
    in   usr_1,REG(PORT,PORT_YA)
     48c:	7b b3       	in	r23, 0x1b	; 27
    mov  usr_2,p_2
     48e:	96 2f       	mov	r25, r22
    com  usr_2
     490:	90 95       	com	r25
    and  usr_1,usr_2
     492:	79 23       	and	r23, r25
    out  REG(PORT,PORT_YA),usr_1
     494:	7b bb       	out	0x1b, r23	; 27
    mov  usr_2,p_1
     496:	98 2f       	mov	r25, r24
    in   usr_1,REG(DDR,PORT_YB)
     498:	7a b3       	in	r23, 0x1a	; 26
    or   usr_1,usr_2
     49a:	79 2b       	or	r23, r25
    out  REG(DDR,PORT_YB),usr_1
     49c:	7a bb       	out	0x1a, r23	; 26
    in   usr_1,REG(DDR,PORT_YA)
     49e:	7a b3       	in	r23, 0x1a	; 26
    mov  usr_2,p_2
     4a0:	96 2f       	mov	r25, r22
    or   usr_1,usr_2
     4a2:	79 2b       	or	r23, r25
    out  REG(DDR,PORT_YA),usr_1
     4a4:	7a bb       	out	0x1a, r23	; 26
#if (NUM_X_PORTS>=1)
    mov  usr_2,p_3
     4a6:	94 2f       	mov	r25, r20
    com  usr_2
     4a8:	90 95       	com	r25
    in   usr_1,REG(PORT,PORT_X_1)
     4aa:	78 b3       	in	r23, 0x18	; 24
    and  usr_1,usr_2
     4ac:	79 23       	and	r23, r25
    out  REG(PORT,PORT_X_1),usr_1
     4ae:	78 bb       	out	0x18, r23	; 24
    in   usr_1, REG(DDR,PORT_X_1)
     4b0:	77 b3       	in	r23, 0x17	; 23
    mov  usr_2,p_3
     4b2:	94 2f       	mov	r25, r20
    or   usr_1, usr_2
     4b4:	79 2b       	or	r23, r25
    out  REG(DDR,PORT_X_1), usr_1    
     4b6:	77 bb       	out	0x17, r23	; 23
    in   usr_1, REG(DDR,PORT_X_3)
    mov  usr_2,p_5
    or   usr_1, usr_2
    out  REG(DDR,PORT_X_3), usr_1    
#endif
    cbi  REG( PORT, PORT_SMP ),SMP_BIT 
     4b8:	db 98       	cbi	0x1b, 3	; 27
    sbi  REG( DDR, PORT_SMP ),SMP_BIT
     4ba:	d3 9a       	sbi	0x1a, 3	; 26
    pop  usr_2
     4bc:	9f 91       	pop	r25
    pop  usr_1
     4be:	7f 91       	pop	r23
    ret
     4c0:	08 95       	ret

000004c2 <_00110000100_>:

GLOBAL_FUNCTION _00110000100_
_00110000100_:
    push usr_1
     4c2:	7f 93       	push	r23
    push usr_2
     4c4:	9f 93       	push	r25
    in   usr_1, REG( DDR, PORT_YA ) 
     4c6:	7a b3       	in	r23, 0x1a	; 26
    sts  reg_clya, usr_1
     4c8:	70 93 49 01 	sts	0x0149, r23
    sts  reg_flya, usr_1
     4cc:	70 93 53 01 	sts	0x0153, r23
    in   usr_1, REG( DDR, PORT_YB )
     4d0:	7a b3       	in	r23, 0x1a	; 26
    sts  reg_clyb, usr_1
     4d2:	70 93 4c 01 	sts	0x014C, r23
    sts  reg_flyb, usr_1    
     4d6:	70 93 4d 01 	sts	0x014D, r23

	mov  usr_1, p_1
     4da:	78 2f       	mov	r23, r24
    com  usr_1
     4dc:	70 95       	com	r23
  	lds  usr_2, reg_flya
     4de:	90 91 53 01 	lds	r25, 0x0153
    and  usr_2,usr_1
     4e2:	97 23       	and	r25, r23
    sts  reg_flya, usr_2
     4e4:	90 93 53 01 	sts	0x0153, r25
  	mov  usr_1, p_2
     4e8:	76 2f       	mov	r23, r22
    com  usr_1
     4ea:	70 95       	com	r23
  	lds  usr_2, reg_flyb
     4ec:	90 91 4d 01 	lds	r25, 0x014D
	and  usr_2,usr_1
     4f0:	97 23       	and	r25, r23
    sts  reg_flyb, usr_2
     4f2:	90 93 4d 01 	sts	0x014D, r25
#if (SHARED_YAYB == 1) 
#elif (SHARED_YAYB == 0)
  clr  r_v
#endif  	
#if (SHARED_YAYB == 1)    
    push usr_3
     4f6:	5f 93       	push	r21
    mov  usr_1, p_1
     4f8:	78 2f       	mov	r23, r24
    mov  usr_2, p_2
     4fa:	96 2f       	mov	r25, r22
    or   usr_2, usr_1
     4fc:	97 2b       	or	r25, r23
    com  usr_2
     4fe:	90 95       	com	r25
    in   usr_1, REG( DDR, PORT_YA ) 
     500:	7a b3       	in	r23, 0x1a	; 26
    and  usr_2, usr_1
     502:	97 23       	and	r25, r23
    sts  reg_flyab, usr_2
     504:	90 93 4b 01 	sts	0x014B, r25
    mov  usr_3,usr_2
     508:	59 2f       	mov	r21, r25
    or   usr_2, p_2
     50a:	96 2b       	or	r25, r22
    sts  reg_clyb, usr_2
     50c:	90 93 4c 01 	sts	0x014C, r25
    mov  usr_2, usr_3
     510:	95 2f       	mov	r25, r21
    or   usr_2, p_1
     512:	98 2b       	or	r25, r24
    sts  reg_clya, usr_2
     514:	90 93 49 01 	sts	0x0149, r25
    lds  r_v, reg_flyab
     518:	80 91 4b 01 	lds	r24, 0x014B
    pop  usr_3
     51c:	5f 91       	pop	r21
	_10100001_
	_01101001_
	_00011001_
	_00011001_
#endif
    lds  usr_1, reg_flyb 
     51e:	70 91 4d 01 	lds	r23, 0x014D
    out  REG( DDR, PORT_YB ), usr_1
     522:	7a bb       	out	0x1a, r23	; 26
    pop  usr_2
     524:	9f 91       	pop	r25
    pop  usr_1
     526:	7f 91       	pop	r23
    ret
     528:	08 95       	ret

0000052a <_00110000010_>:

#if (NUM_X_PORTS>=1)
GLOBAL_FUNCTION _00110000010_
_00110000010_:
#if (SHARED_YAYB == 1)
    out  REG( DDR, PORT_YA ), p_2
     52a:	6a bb       	out	0x1a, r22	; 26
#elif (SHARED_YAYB == 0)
    out  REG( DDR, PORT_YA ), p_3
#endif
    out  REG( PIN, PORT_X_1 ), p_1  
     52c:	86 bb       	out	0x16, r24	; 22
	_10100010_
	_01101010_
	_00011001_
	_00011001_
#endif
    out  REG( DDR, PORT_YB ), p_6
     52e:	ea ba       	out	0x1a, r14	; 26
	_01101011_
	_00011001_
	_00011001_
#endif
#if (SHARED_YAYB == 1)
    out  REG( DDR, PORT_YB ), p_2
     530:	6a bb       	out	0x1a, r22	; 26
#elif (SHARED_YAYB == 0)
    out  REG( DDR, PORT_YB ), p_4
#endif    
    out  REG( DDR, PORT_YA ), p_5
     532:	0a bb       	out	0x1a, r16	; 26
    out  REG( PIN, PORT_X_1 ), p_1      
     534:	86 bb       	out	0x16, r24	; 22
	_10100100_
	_01101100_
	_00011001_
	_00011001_
#endif
    ret
     536:	08 95       	ret

00000538 <_00110000011_>:
/*//////////////////////////////////////////////////////////////////////////////////    */


GLOBAL_FUNCTION _00110000011_
_00110000011_:
    sbi  REG( PORT, PORT_SMP ),SMP_BIT  
     538:	db 9a       	sbi	0x1b, 3	; 27
    ret
     53a:	08 95       	ret

0000053c <_00110000110_>:
   
GLOBAL_FUNCTION _00110000110_
_00110000110_:
    cbi  REG( PORT, PORT_SMP ),SMP_BIT  
     53c:	db 98       	cbi	0x1b, 3	; 27
    lds  usr_1,reg_clyb 
     53e:	70 91 4c 01 	lds	r23, 0x014C
    out  REG( DDR, PORT_YB ), usr_1 
     542:	7a bb       	out	0x1a, r23	; 26
	_10100101_
	_01101101_
	_00011001_
	_00011001_
#endif
    ret
     544:	08 95       	ret

00000546 <touch_init>:
Output  :   n/a
Notes   :   Generated code from QTouch Studio. Do not change
============================================================================*/
static void config_sensors(void)
{
	qt_enable_key( CHANNEL_0, NO_AKS_GROUP, 10u, HYST_6_25 );
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	4a e0       	ldi	r20, 0x0A	; 10
     54c:	23 e0       	ldi	r18, 0x03	; 3
     54e:	6b d1       	rcall	.+726    	; 0x826 <qt_enable_key>

    /* Configure the Sensors as keys or Keys With Rotor/Sliders in this function */
    config_sensors();

    /* initialise touch sensing */
    qt_init_sensing();
     550:	ac d0       	rcall	.+344    	; 0x6aa <qt_init_sensing_with_burst>

static void qt_set_parameters( void )
{

/*  This will be modified by the user to different values   */
qt_config_data.qt_di              = 2;
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	80 93 14 01 	sts	0x0114, r24
qt_config_data.qt_neg_drift_rate  = 20;
     558:	84 e1       	ldi	r24, 0x14	; 20
     55a:	80 93 17 01 	sts	0x0117, r24
qt_config_data.qt_pos_drift_rate  = 5;
     55e:	95 e0       	ldi	r25, 0x05	; 5
     560:	90 93 18 01 	sts	0x0118, r25
qt_config_data.qt_max_on_duration = 0;
     564:	10 92 16 01 	sts	0x0116, r1
qt_config_data.qt_drift_hold_time = 20;
     568:	80 93 15 01 	sts	0x0115, r24
qt_config_data.qt_recal_threshold = 1;
     56c:	e4 e1       	ldi	r30, 0x14	; 20
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	82 93       	st	-Z, r24
qt_config_data.qt_pos_recal_delay = 0;
     574:	16 82       	std	Z+6, r1	; 0x06
              qt_filter_callback = &set_timestamp1;
       #else
              qt_filter_callback = 0;
       #endif
       #else
              qt_filter_callback = 0;
     576:	10 92 1b 01 	sts	0x011B, r1
     57a:	10 92 1a 01 	sts	0x011A, r1
    /* Initialize debug protocol */
    QDebug_Init();
#endif

    /* enable interrupts */
    __enable_interrupt();
     57e:	78 94       	sei
#ifdef _DEBUG_INTERFACE_
    /* Process commands from PC */
    QDebug_ProcessCommands();
#endif

}
     580:	08 95       	ret

00000582 <touch_measure>:
{
   /*status flags to indicate the re-burst for library*/
   static uint16_t status_flag = 0u;
   static uint16_t burst_flag = 0u;

	  if( time_to_measure_touch )
     582:	80 91 02 01 	lds	r24, 0x0102
     586:	88 23       	and	r24, r24
     588:	99 f0       	breq	.+38     	; 0x5b0 <touch_measure+0x2e>
        {

            /*  clear flag: it's time to measure touch  */
            time_to_measure_touch = 0u;
     58a:	10 92 02 01 	sts	0x0102, r1
				#ifdef _QDEBUG_TIME_STAMPS_
						TIMESTAMP0;
				#endif
				#endif
                /*  one time measure touch sensors    */
                status_flag = qt_measure_sensors( current_time_ms_touch );
     58e:	80 91 00 01 	lds	r24, 0x0100
     592:	90 91 01 01 	lds	r25, 0x0101
     596:	cf d0       	rcall	.+414    	; 0x736 <qt_measure_sensors>
     598:	90 93 06 01 	sts	0x0106, r25
     59c:	80 93 05 01 	sts	0x0105, r24
				#ifdef _DEBUG_INTERFACE_
				#ifdef _QDEBUG_TIME_STAMPS_
					  TIMESTAMP2;
				#endif
				#endif
                burst_flag = status_flag & QTLIB_BURST_AGAIN;
     5a0:	80 70       	andi	r24, 0x00	; 0
     5a2:	91 70       	andi	r25, 0x01	; 1
     5a4:	90 93 08 01 	sts	0x0108, r25
     5a8:	80 93 07 01 	sts	0x0107, r24
				#endif
				#endif

                /* Time-critical host application code goes here */

            }while (burst_flag) ;
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	79 f7       	brne	.-34     	; 0x58e <touch_measure+0xc>
     5b0:	08 95       	ret

000005b2 <burst_qm_1>:
     5b2:	a0 e0       	ldi	r26, 0x00	; 0
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	ee ed       	ldi	r30, 0xDE	; 222
     5b8:	f2 e0       	ldi	r31, 0x02	; 2
     5ba:	03 cc       	rjmp	.-2042   	; 0xfffffdc2 <__eeprom_end+0xff7efdc2>
     5bc:	c8 2f       	mov	r28, r24
     5be:	16 2f       	mov	r17, r22
     5c0:	f8 94       	cli
     5c2:	00 98       	cbi	0x00, 0	; 0
     5c4:	e8 2f       	mov	r30, r24
     5c6:	e6 95       	lsr	r30
     5c8:	e6 95       	lsr	r30
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	ee 0f       	add	r30, r30
     5ce:	ff 1f       	adc	r31, r31
     5d0:	df 01       	movw	r26, r30
     5d2:	ac 51       	subi	r26, 0x1C	; 28
     5d4:	bf 4f       	sbci	r27, 0xFF	; 255
     5d6:	8c 91       	ld	r24, X
     5d8:	87 b9       	out	0x07, r24	; 7
     5da:	00 9a       	sbi	0x00, 0	; 0
     5dc:	df 01       	movw	r26, r30
     5de:	a9 51       	subi	r26, 0x19	; 25
     5e0:	bf 4f       	sbci	r27, 0xFF	; 255
     5e2:	eb 51       	subi	r30, 0x1B	; 27
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	8c 91       	ld	r24, X
     5e8:	60 81       	ld	r22, Z
     5ea:	6b df       	rcall	.-298    	; 0x4c2 <_00110000100_>
     5ec:	f8 2e       	mov	r15, r24
     5ee:	d0 e0       	ldi	r29, 0x00	; 0
     5f0:	fe 01       	movw	r30, r28
     5f2:	e5 50       	subi	r30, 0x05	; 5
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	b0 80       	ld	r11, Z
     5f8:	dd 24       	eor	r13, r13
     5fa:	cc 24       	eor	r12, r12
     5fc:	c3 94       	inc	r12
     5fe:	1e c0       	rjmp	.+60     	; 0x63c <burst_qm_1+0x8a>
     600:	81 2f       	mov	r24, r17
     602:	6f 2d       	mov	r22, r15
     604:	40 91 53 01 	lds	r20, 0x0153
     608:	20 91 4d 01 	lds	r18, 0x014D
     60c:	00 91 49 01 	lds	r16, 0x0149
     610:	e0 90 4c 01 	lds	r14, 0x014C
     614:	8a df       	rcall	.-236    	; 0x52a <_00110000010_>
     616:	8f b7       	in	r24, 0x3f	; 63
     618:	90 91 4a 01 	lds	r25, 0x014A
     61c:	89 2b       	or	r24, r25
     61e:	8f bf       	out	0x3f, r24	; 63
     620:	80 91 fa 00 	lds	r24, 0x00FA
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 93 fa 00 	sts	0x00FA, r24
     62a:	82 30       	cpi	r24, 0x02	; 2
     62c:	30 f0       	brcs	.+12     	; 0x63a <burst_qm_1+0x88>
     62e:	82 30       	cpi	r24, 0x02	; 2
     630:	21 f0       	breq	.+8      	; 0x63a <burst_qm_1+0x88>
     632:	83 30       	cpi	r24, 0x03	; 3
     634:	11 f0       	breq	.+4      	; 0x63a <burst_qm_1+0x88>
     636:	c0 92 fa 00 	sts	0x00FA, r12
     63a:	d3 94       	inc	r13
     63c:	f8 94       	cli
     63e:	db 14       	cp	r13, r11
     640:	f9 f6       	brne	.-66     	; 0x600 <burst_qm_1+0x4e>
     642:	7a df       	rcall	.-268    	; 0x538 <_00110000011_>
     644:	1d bc       	out	0x2d, r1	; 45
     646:	1c bc       	out	0x2c, r1	; 44
     648:	5d 9a       	sbi	0x0b, 5	; 11
     64a:	45 9b       	sbis	0x08, 5	; 8
     64c:	15 c0       	rjmp	.+42     	; 0x678 <burst_qm_1+0xc6>
     64e:	8f b7       	in	r24, 0x3f	; 63
     650:	90 91 4a 01 	lds	r25, 0x014A
     654:	89 2b       	or	r24, r25
     656:	8f bf       	out	0x3f, r24	; 63
     658:	06 c0       	rjmp	.+12     	; 0x666 <burst_qm_1+0xb4>
     65a:	8c b5       	in	r24, 0x2c	; 44
     65c:	9d b5       	in	r25, 0x2d	; 45
     65e:	20 e2       	ldi	r18, 0x20	; 32
     660:	80 30       	cpi	r24, 0x00	; 0
     662:	92 07       	cpc	r25, r18
     664:	80 f4       	brcc	.+32     	; 0x686 <burst_qm_1+0xd4>
     666:	5d 9b       	sbis	0x0b, 5	; 11
     668:	f8 cf       	rjmp	.-16     	; 0x65a <burst_qm_1+0xa8>
     66a:	84 b5       	in	r24, 0x24	; 36
     66c:	95 b5       	in	r25, 0x25	; 37
     66e:	cc 0f       	add	r28, r28
     670:	dd 1f       	adc	r29, r29
     672:	c4 5e       	subi	r28, 0xE4	; 228
     674:	de 4f       	sbci	r29, 0xFE	; 254
     676:	0d c0       	rjmp	.+26     	; 0x692 <burst_qm_1+0xe0>
     678:	cc 0f       	add	r28, r28
     67a:	dd 1f       	adc	r29, r29
     67c:	c4 5e       	subi	r28, 0xE4	; 228
     67e:	de 4f       	sbci	r29, 0xFE	; 254
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	06 c0       	rjmp	.+12     	; 0x692 <burst_qm_1+0xe0>
     686:	cc 0f       	add	r28, r28
     688:	dd 1f       	adc	r29, r29
     68a:	c4 5e       	subi	r28, 0xE4	; 228
     68c:	de 4f       	sbci	r29, 0xFE	; 254
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e2       	ldi	r25, 0x20	; 32
     692:	99 83       	std	Y+1, r25	; 0x01
     694:	88 83       	st	Y, r24
     696:	52 df       	rcall	.-348    	; 0x53c <_00110000110_>
     698:	8f b7       	in	r24, 0x3f	; 63
     69a:	90 91 4a 01 	lds	r25, 0x014A
     69e:	89 2b       	or	r24, r25
     6a0:	8f bf       	out	0x3f, r24	; 63
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	e9 e0       	ldi	r30, 0x09	; 9
     6a8:	a8 cb       	rjmp	.-2224   	; 0xfffffdfa <__eeprom_end+0xff7efdfa>

000006aa <qt_init_sensing_with_burst>:
     6aa:	cf 93       	push	r28
     6ac:	c0 e0       	ldi	r28, 0x00	; 0
     6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <qt_init_sensing_with_burst+0xc>
     6b0:	8c 2f       	mov	r24, r28
     6b2:	9a d1       	rcall	.+820    	; 0x9e8 <start_cal_sensor>
     6b4:	cf 5f       	subi	r28, 0xFF	; 255
     6b6:	80 91 30 01 	lds	r24, 0x0130
     6ba:	c8 17       	cp	r28, r24
     6bc:	c8 f3       	brcs	.-14     	; 0x6b0 <qt_init_sensing_with_burst+0x6>
     6be:	10 92 0c 01 	sts	0x010C, r1
     6c2:	10 92 0b 01 	sts	0x010B, r1
     6c6:	da d4       	rcall	.+2484   	; 0x107c <burst_init>
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <qt_get_library_sig>:
     6cc:	fc 01       	movw	r30, r24
     6ce:	81 e2       	ldi	r24, 0x21	; 33
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	91 83       	std	Z+1, r25	; 0x01
     6d4:	80 83       	st	Z, r24
     6d6:	84 e2       	ldi	r24, 0x24	; 36
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	93 83       	std	Z+3, r25	; 0x03
     6dc:	82 83       	std	Z+2, r24	; 0x02
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	95 e0       	ldi	r25, 0x05	; 5
     6e2:	95 83       	std	Z+5, r25	; 0x05
     6e4:	84 83       	std	Z+4, r24	; 0x04
     6e6:	08 95       	ret

000006e8 <qt_calibrate_sensing>:
     6e8:	cf 93       	push	r28
     6ea:	c0 e0       	ldi	r28, 0x00	; 0
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <qt_calibrate_sensing+0xc>
     6ee:	8c 2f       	mov	r24, r28
     6f0:	7b d1       	rcall	.+758    	; 0x9e8 <start_cal_sensor>
     6f2:	cf 5f       	subi	r28, 0xFF	; 255
     6f4:	80 91 30 01 	lds	r24, 0x0130
     6f8:	c8 17       	cp	r28, r24
     6fa:	c8 f3       	brcs	.-14     	; 0x6ee <qt_calibrate_sensing+0x6>
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <qt_reset_sensing>:
     700:	10 92 30 01 	sts	0x0130, r1
     704:	84 e0       	ldi	r24, 0x04	; 4
     706:	80 93 14 01 	sts	0x0114, r24
     70a:	84 e1       	ldi	r24, 0x14	; 20
     70c:	80 93 17 01 	sts	0x0117, r24
     710:	95 e0       	ldi	r25, 0x05	; 5
     712:	90 93 18 01 	sts	0x0118, r25
     716:	10 92 16 01 	sts	0x0116, r1
     71a:	80 93 15 01 	sts	0x0115, r24
     71e:	e4 e1       	ldi	r30, 0x14	; 20
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	82 93       	st	-Z, r24
     726:	83 e0       	ldi	r24, 0x03	; 3
     728:	86 83       	std	Z+6, r24	; 0x06
     72a:	09 d5       	rcall	.+2578   	; 0x113e <burst_reset>
     72c:	10 92 1b 01 	sts	0x011B, r1
     730:	10 92 1a 01 	sts	0x011A, r1
     734:	08 95       	ret

00000736 <qt_measure_sensors>:
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	10 92 2e 01 	sts	0x012E, r1
     740:	10 92 2d 01 	sts	0x012D, r1
     744:	40 91 0b 01 	lds	r20, 0x010B
     748:	50 91 0c 01 	lds	r21, 0x010C
     74c:	90 93 0c 01 	sts	0x010C, r25
     750:	80 93 0b 01 	sts	0x010B, r24
     754:	20 91 0d 01 	lds	r18, 0x010D
     758:	30 91 0e 01 	lds	r19, 0x010E
     75c:	24 1b       	sub	r18, r20
     75e:	35 0b       	sbc	r19, r21
     760:	28 0f       	add	r18, r24
     762:	39 1f       	adc	r19, r25
     764:	c0 e0       	ldi	r28, 0x00	; 0
     766:	03 c0       	rjmp	.+6      	; 0x76e <qt_measure_sensors+0x38>
     768:	28 5c       	subi	r18, 0xC8	; 200
     76a:	30 40       	sbci	r19, 0x00	; 0
     76c:	cf 5f       	subi	r28, 0xFF	; 255
     76e:	28 3c       	cpi	r18, 0xC8	; 200
     770:	31 05       	cpc	r19, r1
     772:	d0 f7       	brcc	.-12     	; 0x768 <qt_measure_sensors+0x32>
     774:	30 93 0e 01 	sts	0x010E, r19
     778:	20 93 0d 01 	sts	0x010D, r18
     77c:	80 91 2f 01 	lds	r24, 0x012F
     780:	88 23       	and	r24, r24
     782:	41 f0       	breq	.+16     	; 0x794 <qt_measure_sensors+0x5e>
     784:	8c 17       	cp	r24, r28
     786:	18 f4       	brcc	.+6      	; 0x78e <qt_measure_sensors+0x58>
     788:	10 92 2f 01 	sts	0x012F, r1
     78c:	03 c0       	rjmp	.+6      	; 0x794 <qt_measure_sensors+0x5e>
     78e:	8c 1b       	sub	r24, r28
     790:	80 93 2f 01 	sts	0x012F, r24
     794:	de d4       	rcall	.+2492   	; 0x1152 <burst>
     796:	e0 91 1a 01 	lds	r30, 0x011A
     79a:	f0 91 1b 01 	lds	r31, 0x011B
     79e:	30 97       	sbiw	r30, 0x00	; 0
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <qt_measure_sensors+0x6e>
     7a2:	09 95       	icall
     7a4:	10 e0       	ldi	r17, 0x00	; 0
     7a6:	d0 e0       	ldi	r29, 0x00	; 0
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <qt_measure_sensors+0x7e>
     7aa:	8d 2f       	mov	r24, r29
     7ac:	6c 2f       	mov	r22, r28
     7ae:	37 d1       	rcall	.+622    	; 0xa1e <process_sensor>
     7b0:	18 2b       	or	r17, r24
     7b2:	df 5f       	subi	r29, 0xFF	; 255
     7b4:	50 91 30 01 	lds	r21, 0x0130
     7b8:	d5 17       	cp	r29, r21
     7ba:	b8 f3       	brcs	.-18     	; 0x7aa <qt_measure_sensors+0x74>
     7bc:	11 23       	and	r17, r17
     7be:	49 f0       	breq	.+18     	; 0x7d2 <qt_measure_sensors+0x9c>
     7c0:	80 91 2d 01 	lds	r24, 0x012D
     7c4:	90 91 2e 01 	lds	r25, 0x012E
     7c8:	91 60       	ori	r25, 0x01	; 1
     7ca:	90 93 2e 01 	sts	0x012E, r25
     7ce:	80 93 2d 01 	sts	0x012D, r24
     7d2:	10 92 2c 01 	sts	0x012C, r1
     7d6:	a1 e3       	ldi	r26, 0x31	; 49
     7d8:	b1 e0       	ldi	r27, 0x01	; 1
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	18 c0       	rjmp	.+48     	; 0x812 <qt_measure_sensors+0xdc>
     7e2:	2c 91       	ld	r18, X
     7e4:	28 71       	andi	r18, 0x18	; 24
     7e6:	99 f0       	breq	.+38     	; 0x80e <qt_measure_sensors+0xd8>
     7e8:	e4 2f       	mov	r30, r20
     7ea:	e6 95       	lsr	r30
     7ec:	e6 95       	lsr	r30
     7ee:	e6 95       	lsr	r30
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	e4 5e       	subi	r30, 0xE4	; 228
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	24 2f       	mov	r18, r20
     7f8:	27 70       	andi	r18, 0x07	; 7
     7fa:	bc 01       	movw	r22, r24
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <qt_measure_sensors+0xcc>
     7fe:	66 0f       	add	r22, r22
     800:	77 1f       	adc	r23, r23
     802:	2a 95       	dec	r18
     804:	e2 f7       	brpl	.-8      	; 0x7fe <qt_measure_sensors+0xc8>
     806:	9b 01       	movw	r18, r22
     808:	30 89       	ldd	r19, Z+16	; 0x10
     80a:	32 2b       	or	r19, r18
     80c:	30 8b       	std	Z+16, r19	; 0x10
     80e:	4f 5f       	subi	r20, 0xFF	; 255
     810:	16 96       	adiw	r26, 0x06	; 6
     812:	45 17       	cp	r20, r21
     814:	31 f7       	brne	.-52     	; 0x7e2 <qt_measure_sensors+0xac>
     816:	80 91 2d 01 	lds	r24, 0x012D
     81a:	90 91 2e 01 	lds	r25, 0x012E
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	08 95       	ret

00000826 <qt_enable_key>:
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	c8 2f       	mov	r28, r24
     82c:	d6 2f       	mov	r29, r22
     82e:	30 91 30 01 	lds	r19, 0x0130
     832:	e1 e3       	ldi	r30, 0x31	; 49
     834:	f1 e0       	ldi	r31, 0x01	; 1
     836:	83 2f       	mov	r24, r19
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	66 e0       	ldi	r22, 0x06	; 6
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	a6 da       	rcall	.-2740   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     840:	df 01       	movw	r26, r30
     842:	a8 0f       	add	r26, r24
     844:	b9 1f       	adc	r27, r25
     846:	13 96       	adiw	r26, 0x03	; 3
     848:	4c 93       	st	X, r20
     84a:	83 2f       	mov	r24, r19
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	66 e0       	ldi	r22, 0x06	; 6
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	9c da       	rcall	.-2760   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     854:	df 01       	movw	r26, r30
     856:	a8 0f       	add	r26, r24
     858:	b9 1f       	adc	r27, r25
     85a:	d7 70       	andi	r29, 0x07	; 7
     85c:	dd 0f       	add	r29, r29
     85e:	dd 0f       	add	r29, r29
     860:	dd 0f       	add	r29, r29
     862:	14 96       	adiw	r26, 0x04	; 4
     864:	dc 93       	st	X, r29
     866:	83 2f       	mov	r24, r19
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	66 e0       	ldi	r22, 0x06	; 6
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	8e da       	rcall	.-2788   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     870:	df 01       	movw	r26, r30
     872:	a8 0f       	add	r26, r24
     874:	b9 1f       	adc	r27, r25
     876:	15 96       	adiw	r26, 0x05	; 5
     878:	cc 93       	st	X, r28
     87a:	83 2f       	mov	r24, r19
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	66 e0       	ldi	r22, 0x06	; 6
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	84 da       	rcall	.-2808   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     884:	df 01       	movw	r26, r30
     886:	a8 0f       	add	r26, r24
     888:	b9 1f       	adc	r27, r25
     88a:	23 70       	andi	r18, 0x03	; 3
     88c:	83 2f       	mov	r24, r19
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	66 e0       	ldi	r22, 0x06	; 6
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	7b da       	rcall	.-2826   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     896:	e8 0f       	add	r30, r24
     898:	f9 1f       	adc	r31, r25
     89a:	84 81       	ldd	r24, Z+4	; 0x04
     89c:	8c 7f       	andi	r24, 0xFC	; 252
     89e:	28 2b       	or	r18, r24
     8a0:	14 96       	adiw	r26, 0x04	; 4
     8a2:	2c 93       	st	X, r18
     8a4:	14 97       	sbiw	r26, 0x04	; 4
     8a6:	3f 5f       	subi	r19, 0xFF	; 255
     8a8:	30 93 30 01 	sts	0x0130, r19
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <qt_get_sensor_delta>:
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	c8 2f       	mov	r28, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	66 e0       	ldi	r22, 0x06	; 6
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	65 da       	rcall	.-2870   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     8c2:	fc 01       	movw	r30, r24
     8c4:	ef 5c       	subi	r30, 0xCF	; 207
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	45 81       	ldd	r20, Z+5	; 0x05
     8ca:	8c 2f       	mov	r24, r28
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	66 e0       	ldi	r22, 0x06	; 6
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	5c da       	rcall	.-2888   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     8d4:	fc 01       	movw	r30, r24
     8d6:	ef 5c       	subi	r30, 0xCF	; 207
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	23 81       	ldd	r18, Z+3	; 0x03
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	00 90 13 01 	lds	r0, 0x0113
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <qt_get_sensor_delta+0x36>
     8e4:	35 95       	asr	r19
     8e6:	27 95       	ror	r18
     8e8:	0a 94       	dec	r0
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <qt_get_sensor_delta+0x32>
     8ec:	02 2f       	mov	r16, r18
     8ee:	24 30       	cpi	r18, 0x04	; 4
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <qt_get_sensor_delta+0x42>
     8f2:	04 e0       	ldi	r16, 0x04	; 4
     8f4:	80 91 30 01 	lds	r24, 0x0130
     8f8:	c8 17       	cp	r28, r24
     8fa:	f0 f5       	brcc	.+124    	; 0x978 <qt_get_sensor_delta+0xc6>
     8fc:	84 2f       	mov	r24, r20
     8fe:	a8 d3       	rcall	.+1872   	; 0x1050 <get_channel_delta>
     900:	9c 01       	movw	r18, r24
     902:	a0 2f       	mov	r26, r16
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	06 95       	lsr	r16
     908:	06 95       	lsr	r16
     90a:	80 2f       	mov	r24, r16
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	8a 1b       	sub	r24, r26
     910:	9b 0b       	sbc	r25, r27
     912:	82 17       	cp	r24, r18
     914:	93 07       	cpc	r25, r19
     916:	a4 f4       	brge	.+40     	; 0x940 <qt_get_sensor_delta+0x8e>
     918:	8c 2f       	mov	r24, r28
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	66 e0       	ldi	r22, 0x06	; 6
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	35 da       	rcall	.-2966   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     922:	8c 01       	movw	r16, r24
     924:	0f 5c       	subi	r16, 0xCF	; 207
     926:	1e 4f       	sbci	r17, 0xFE	; 254
     928:	8c 2f       	mov	r24, r28
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	66 e0       	ldi	r22, 0x06	; 6
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	2d da       	rcall	.-2982   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     932:	fc 01       	movw	r30, r24
     934:	ef 5c       	subi	r30, 0xCF	; 207
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	84 81       	ldd	r24, Z+4	; 0x04
     93a:	8b 7f       	andi	r24, 0xFB	; 251
     93c:	f8 01       	movw	r30, r16
     93e:	84 83       	std	Z+4, r24	; 0x04
     940:	b0 95       	com	r27
     942:	a1 95       	neg	r26
     944:	bf 4f       	sbci	r27, 0xFF	; 255
     946:	a2 17       	cp	r26, r18
     948:	b3 07       	cpc	r27, r19
     94a:	c4 f0       	brlt	.+48     	; 0x97c <qt_get_sensor_delta+0xca>
     94c:	8c 2f       	mov	r24, r28
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	66 e0       	ldi	r22, 0x06	; 6
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	1b da       	rcall	.-3018   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     956:	fc 01       	movw	r30, r24
     958:	ef 5c       	subi	r30, 0xCF	; 207
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	8c 2f       	mov	r24, r28
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	66 e0       	ldi	r22, 0x06	; 6
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	13 da       	rcall	.-3034   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     966:	dc 01       	movw	r26, r24
     968:	af 5c       	subi	r26, 0xCF	; 207
     96a:	be 4f       	sbci	r27, 0xFE	; 254
     96c:	14 96       	adiw	r26, 0x04	; 4
     96e:	8c 91       	ld	r24, X
     970:	14 97       	sbiw	r26, 0x04	; 4
     972:	84 60       	ori	r24, 0x04	; 4
     974:	84 83       	std	Z+4, r24	; 0x04
     976:	02 c0       	rjmp	.+4      	; 0x97c <qt_get_sensor_delta+0xca>
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	c9 01       	movw	r24, r18
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <goto_no_detect>:
     986:	cf 93       	push	r28
     988:	c8 2f       	mov	r28, r24
     98a:	21 e3       	ldi	r18, 0x31	; 49
     98c:	31 e0       	ldi	r19, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	66 e0       	ldi	r22, 0x06	; 6
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	fb d9       	rcall	.-3082   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     996:	f9 01       	movw	r30, r18
     998:	e8 0f       	add	r30, r24
     99a:	f9 1f       	adc	r31, r25
     99c:	e5 81       	ldd	r30, Z+5	; 0x05
     99e:	8c 2f       	mov	r24, r28
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	66 e0       	ldi	r22, 0x06	; 6
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	f2 d9       	rcall	.-3100   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     9a8:	d9 01       	movw	r26, r18
     9aa:	a8 0f       	add	r26, r24
     9ac:	b9 1f       	adc	r27, r25
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	8c 93       	st	X, r24
     9b2:	40 91 2d 01 	lds	r20, 0x012D
     9b6:	50 91 2e 01 	lds	r21, 0x012E
     9ba:	42 60       	ori	r20, 0x02	; 2
     9bc:	50 93 2e 01 	sts	0x012E, r21
     9c0:	40 93 2d 01 	sts	0x012D, r20
     9c4:	8c 2f       	mov	r24, r28
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	66 e0       	ldi	r22, 0x06	; 6
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	df d9       	rcall	.-3138   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     9ce:	28 0f       	add	r18, r24
     9d0:	39 1f       	adc	r19, r25
     9d2:	d9 01       	movw	r26, r18
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	1c 92       	st	X, r1
     9d8:	12 97       	sbiw	r26, 0x02	; 2
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	e1 5f       	subi	r30, 0xF1	; 241
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	80 e8       	ldi	r24, 0x80	; 128
     9e2:	80 83       	st	Z, r24
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <start_cal_sensor>:
     9e8:	cf 93       	push	r28
     9ea:	c8 2f       	mov	r28, r24
     9ec:	cc df       	rcall	.-104    	; 0x986 <goto_no_detect>
     9ee:	21 e3       	ldi	r18, 0x31	; 49
     9f0:	31 e0       	ldi	r19, 0x01	; 1
     9f2:	8c 2f       	mov	r24, r28
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	66 e0       	ldi	r22, 0x06	; 6
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	c8 d9       	rcall	.-3184   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     9fc:	f9 01       	movw	r30, r18
     9fe:	e8 0f       	add	r30, r24
     a00:	f9 1f       	adc	r31, r25
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 83       	st	Z, r24
     a06:	8c 2f       	mov	r24, r28
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	66 e0       	ldi	r22, 0x06	; 6
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	be d9       	rcall	.-3204   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     a10:	28 0f       	add	r18, r24
     a12:	39 1f       	adc	r19, r25
     a14:	8f e0       	ldi	r24, 0x0F	; 15
     a16:	f9 01       	movw	r30, r18
     a18:	81 83       	std	Z+1, r24	; 0x01
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <process_sensor>:
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	c8 2f       	mov	r28, r24
     a2c:	d6 2f       	mov	r29, r22
     a2e:	41 df       	rcall	.-382    	; 0x8b2 <qt_get_sensor_delta>
     a30:	7c 01       	movw	r14, r24
     a32:	8c 2f       	mov	r24, r28
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	66 e0       	ldi	r22, 0x06	; 6
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	a8 d9       	rcall	.-3248   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     a3c:	fc 01       	movw	r30, r24
     a3e:	ef 5c       	subi	r30, 0xCF	; 207
     a40:	fe 4f       	sbci	r31, 0xFE	; 254
     a42:	24 81       	ldd	r18, Z+4	; 0x04
     a44:	8c 2f       	mov	r24, r28
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	66 e0       	ldi	r22, 0x06	; 6
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	9f d9       	rcall	.-3266   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     a4e:	fc 01       	movw	r30, r24
     a50:	ef 5c       	subi	r30, 0xCF	; 207
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	a3 81       	ldd	r26, Z+3	; 0x03
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	82 2f       	mov	r24, r18
     a5a:	83 70       	andi	r24, 0x03	; 3
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	ad 01       	movw	r20, r26
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <process_sensor+0x4a>
     a64:	55 95       	asr	r21
     a66:	47 95       	ror	r20
     a68:	8a 95       	dec	r24
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <process_sensor+0x46>
     a6c:	ca 01       	movw	r24, r20
     a6e:	42 30       	cpi	r20, 0x02	; 2
     a70:	08 f4       	brcc	.+2      	; 0xa74 <process_sensor+0x56>
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	8d 01       	movw	r16, r26
     a76:	08 1b       	sub	r16, r24
     a78:	11 09       	sbc	r17, r1
     a7a:	8c 2f       	mov	r24, r28
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	66 e0       	ldi	r22, 0x06	; 6
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	84 d9       	rcall	.-3320   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     a84:	fc 01       	movw	r30, r24
     a86:	ef 5c       	subi	r30, 0xCF	; 207
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	80 81       	ld	r24, Z
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	09 f4       	brne	.+2      	; 0xa92 <process_sensor+0x74>
     a90:	09 c1       	rjmp	.+530    	; 0xca4 <process_sensor+0x286>
     a92:	85 30       	cpi	r24, 0x05	; 5
     a94:	30 f4       	brcc	.+12     	; 0xaa2 <process_sensor+0x84>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	71 f0       	breq	.+28     	; 0xab6 <process_sensor+0x98>
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <process_sensor+0x82>
     a9e:	d2 c2       	rjmp	.+1444   	; 0x1044 <process_sensor+0x626>
     aa0:	70 c0       	rjmp	.+224    	; 0xb82 <process_sensor+0x164>
     aa2:	80 31       	cpi	r24, 0x10	; 16
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <process_sensor+0x8a>
     aa6:	c5 c1       	rjmp	.+906    	; 0xe32 <process_sensor+0x414>
     aa8:	80 32       	cpi	r24, 0x20	; 32
     aaa:	09 f4       	brne	.+2      	; 0xaae <process_sensor+0x90>
     aac:	93 c2       	rjmp	.+1318   	; 0xfd4 <process_sensor+0x5b6>
     aae:	88 30       	cpi	r24, 0x08	; 8
     ab0:	09 f0       	breq	.+2      	; 0xab4 <process_sensor+0x96>
     ab2:	c8 c2       	rjmp	.+1424   	; 0x1044 <process_sensor+0x626>
     ab4:	42 c2       	rjmp	.+1156   	; 0xf3a <process_sensor+0x51c>
     ab6:	00 91 2d 01 	lds	r16, 0x012D
     aba:	10 91 2e 01 	lds	r17, 0x012E
     abe:	c8 01       	movw	r24, r16
     ac0:	92 60       	ori	r25, 0x02	; 2
     ac2:	90 93 2e 01 	sts	0x012E, r25
     ac6:	80 93 2d 01 	sts	0x012D, r24
     aca:	8c 2f       	mov	r24, r28
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	5c d9       	rcall	.-3400   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     ad4:	fc 01       	movw	r30, r24
     ad6:	ef 5c       	subi	r30, 0xCF	; 207
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	25 81       	ldd	r18, Z+5	; 0x05
     adc:	8c 2f       	mov	r24, r28
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	66 e0       	ldi	r22, 0x06	; 6
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	53 d9       	rcall	.-3418   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     ae6:	fc 01       	movw	r30, r24
     ae8:	ef 5c       	subi	r30, 0xCF	; 207
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	41 81       	ldd	r20, Z+1	; 0x01
     aee:	82 2f       	mov	r24, r18
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	4a 30       	cpi	r20, 0x0A	; 10
     af4:	80 f0       	brcs	.+32     	; 0xb16 <process_sensor+0xf8>
     af6:	fc 01       	movw	r30, r24
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	ec 5d       	subi	r30, 0xDC	; 220
     afe:	fe 4f       	sbci	r31, 0xFE	; 254
     b00:	dc 01       	movw	r26, r24
     b02:	aa 0f       	add	r26, r26
     b04:	bb 1f       	adc	r27, r27
     b06:	a4 5e       	subi	r26, 0xE4	; 228
     b08:	be 4f       	sbci	r27, 0xFE	; 254
     b0a:	8d 91       	ld	r24, X+
     b0c:	9c 91       	ld	r25, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	91 83       	std	Z+1, r25	; 0x01
     b12:	80 83       	st	Z, r24
     b14:	1d c0       	rjmp	.+58     	; 0xb50 <process_sensor+0x132>
     b16:	dc 01       	movw	r26, r24
     b18:	aa 0f       	add	r26, r26
     b1a:	bb 1f       	adc	r27, r27
     b1c:	ac 5d       	subi	r26, 0xDC	; 220
     b1e:	be 4f       	sbci	r27, 0xFE	; 254
     b20:	2d 91       	ld	r18, X+
     b22:	3c 91       	ld	r19, X
     b24:	11 97       	sbiw	r26, 0x01	; 1
     b26:	fc 01       	movw	r30, r24
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	e4 5e       	subi	r30, 0xE4	; 228
     b2e:	fe 4f       	sbci	r31, 0xFE	; 254
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	82 17       	cp	r24, r18
     b36:	93 07       	cpc	r25, r19
     b38:	18 f4       	brcc	.+6      	; 0xb40 <process_sensor+0x122>
     b3a:	21 50       	subi	r18, 0x01	; 1
     b3c:	30 40       	sbci	r19, 0x00	; 0
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <process_sensor+0x12c>
     b40:	28 17       	cp	r18, r24
     b42:	39 07       	cpc	r19, r25
     b44:	58 f4       	brcc	.+22     	; 0xb5c <process_sensor+0x13e>
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	11 96       	adiw	r26, 0x01	; 1
     b4c:	3c 93       	st	X, r19
     b4e:	2e 93       	st	-X, r18
     b50:	08 60       	ori	r16, 0x08	; 8
     b52:	12 60       	ori	r17, 0x02	; 2
     b54:	10 93 2e 01 	sts	0x012E, r17
     b58:	00 93 2d 01 	sts	0x012D, r16
     b5c:	41 50       	subi	r20, 0x01	; 1
     b5e:	8c 2f       	mov	r24, r28
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	66 e0       	ldi	r22, 0x06	; 6
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	12 d9       	rcall	.-3548   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     b68:	fc 01       	movw	r30, r24
     b6a:	ef 5c       	subi	r30, 0xCF	; 207
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	41 83       	std	Z+1, r20	; 0x01
     b70:	44 23       	and	r20, r20
     b72:	11 f4       	brne	.+4      	; 0xb78 <process_sensor+0x15a>
     b74:	8c 2f       	mov	r24, r28
     b76:	07 df       	rcall	.-498    	; 0x986 <goto_no_detect>
     b78:	80 91 15 01 	lds	r24, 0x0115
     b7c:	80 93 2f 01 	sts	0x012F, r24
     b80:	59 c2       	rjmp	.+1202   	; 0x1034 <process_sensor+0x616>
     b82:	22 ff       	sbrs	r18, 2
     b84:	18 c0       	rjmp	.+48     	; 0xbb6 <process_sensor+0x198>
     b86:	8c 2f       	mov	r24, r28
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	66 e0       	ldi	r22, 0x06	; 6
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	fe d8       	rcall	.-3588   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     b90:	fc 01       	movw	r30, r24
     b92:	ef 5c       	subi	r30, 0xCF	; 207
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	e5 81       	ldd	r30, Z+5	; 0x05
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	e1 5f       	subi	r30, 0xF1	; 241
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	10 82       	st	Z, r1
     ba0:	8c 2f       	mov	r24, r28
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	66 e0       	ldi	r22, 0x06	; 6
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	f1 d8       	rcall	.-3614   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     baa:	fc 01       	movw	r30, r24
     bac:	ef 5c       	subi	r30, 0xCF	; 207
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
     bb0:	80 e2       	ldi	r24, 0x20	; 32
     bb2:	80 83       	st	Z, r24
     bb4:	36 c2       	rjmp	.+1132   	; 0x1022 <process_sensor+0x604>
     bb6:	c7 01       	movw	r24, r14
     bb8:	f7 fe       	sbrs	r15, 7
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <process_sensor+0x1a2>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	8a 17       	cp	r24, r26
     bc2:	9b 07       	cpc	r25, r27
     bc4:	a0 f0       	brcs	.+40     	; 0xbee <process_sensor+0x1d0>
     bc6:	8c 2f       	mov	r24, r28
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	66 e0       	ldi	r22, 0x06	; 6
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	de d8       	rcall	.-3652   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     bd0:	fc 01       	movw	r30, r24
     bd2:	ef 5c       	subi	r30, 0xCF	; 207
     bd4:	fe 4f       	sbci	r31, 0xFE	; 254
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	80 83       	st	Z, r24
     bda:	8c 2f       	mov	r24, r28
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	66 e0       	ldi	r22, 0x06	; 6
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	d4 d8       	rcall	.-3672   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     be4:	fc 01       	movw	r30, r24
     be6:	ef 5c       	subi	r30, 0xCF	; 207
     be8:	fe 4f       	sbci	r31, 0xFE	; 254
     bea:	12 82       	std	Z+2, r1	; 0x02
     bec:	25 c2       	rjmp	.+1098   	; 0x1038 <process_sensor+0x61a>
     bee:	dd 23       	and	r29, r29
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <process_sensor+0x1d6>
     bf2:	28 c2       	rjmp	.+1104   	; 0x1044 <process_sensor+0x626>
     bf4:	80 91 2f 01 	lds	r24, 0x012F
     bf8:	88 23       	and	r24, r24
     bfa:	09 f0       	breq	.+2      	; 0xbfe <process_sensor+0x1e0>
     bfc:	23 c2       	rjmp	.+1094   	; 0x1044 <process_sensor+0x626>
     bfe:	8c 2f       	mov	r24, r28
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	66 e0       	ldi	r22, 0x06	; 6
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	c2 d8       	rcall	.-3708   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     c08:	fc 01       	movw	r30, r24
     c0a:	ef 5c       	subi	r30, 0xCF	; 207
     c0c:	fe 4f       	sbci	r31, 0xFE	; 254
     c0e:	25 81       	ldd	r18, Z+5	; 0x05
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	d9 01       	movw	r26, r18
     c14:	aa 0f       	add	r26, r26
     c16:	bb 1f       	adc	r27, r27
     c18:	ac 5d       	subi	r26, 0xDC	; 220
     c1a:	be 4f       	sbci	r27, 0xFE	; 254
     c1c:	8d 91       	ld	r24, X+
     c1e:	9c 91       	ld	r25, X
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	f9 01       	movw	r30, r18
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e4 5e       	subi	r30, 0xE4	; 228
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	40 81       	ld	r20, Z
     c2e:	51 81       	ldd	r21, Z+1	; 0x01
     c30:	f9 01       	movw	r30, r18
     c32:	e1 5f       	subi	r30, 0xF1	; 241
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	84 17       	cp	r24, r20
     c38:	95 07       	cpc	r25, r21
     c3a:	68 f4       	brcc	.+26     	; 0xc56 <process_sensor+0x238>
     c3c:	20 81       	ld	r18, Z
     c3e:	2d 0f       	add	r18, r29
     c40:	20 83       	st	Z, r18
     c42:	30 91 18 01 	lds	r19, 0x0118
     c46:	30 58       	subi	r19, 0x80	; 128
     c48:	23 17       	cp	r18, r19
     c4a:	08 f4       	brcc	.+2      	; 0xc4e <process_sensor+0x230>
     c4c:	fb c1       	rjmp	.+1014   	; 0x1044 <process_sensor+0x626>
     c4e:	20 e8       	ldi	r18, 0x80	; 128
     c50:	20 83       	st	Z, r18
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <process_sensor+0x258>
     c56:	48 17       	cp	r20, r24
     c58:	59 07       	cpc	r21, r25
     c5a:	d0 f4       	brcc	.+52     	; 0xc90 <process_sensor+0x272>
     c5c:	20 81       	ld	r18, Z
     c5e:	2d 1b       	sub	r18, r29
     c60:	20 83       	st	Z, r18
     c62:	30 e8       	ldi	r19, 0x80	; 128
     c64:	40 91 17 01 	lds	r20, 0x0117
     c68:	53 2f       	mov	r21, r19
     c6a:	54 1b       	sub	r21, r20
     c6c:	52 17       	cp	r21, r18
     c6e:	08 f4       	brcc	.+2      	; 0xc72 <process_sensor+0x254>
     c70:	e9 c1       	rjmp	.+978    	; 0x1044 <process_sensor+0x626>
     c72:	30 83       	st	Z, r19
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	11 96       	adiw	r26, 0x01	; 1
     c78:	9c 93       	st	X, r25
     c7a:	8e 93       	st	-X, r24
     c7c:	80 91 2d 01 	lds	r24, 0x012D
     c80:	90 91 2e 01 	lds	r25, 0x012E
     c84:	88 60       	ori	r24, 0x08	; 8
     c86:	90 93 2e 01 	sts	0x012E, r25
     c8a:	80 93 2d 01 	sts	0x012D, r24
     c8e:	da c1       	rjmp	.+948    	; 0x1044 <process_sensor+0x626>
     c90:	80 81       	ld	r24, Z
     c92:	81 38       	cpi	r24, 0x81	; 129
     c94:	10 f0       	brcs	.+4      	; 0xc9a <process_sensor+0x27c>
     c96:	81 50       	subi	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
     c9a:	80 81       	ld	r24, Z
     c9c:	87 fd       	sbrc	r24, 7
     c9e:	d2 c1       	rjmp	.+932    	; 0x1044 <process_sensor+0x626>
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	b4 c1       	rjmp	.+872    	; 0x100c <process_sensor+0x5ee>
     ca4:	c7 01       	movw	r24, r14
     ca6:	f7 fe       	sbrs	r15, 7
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <process_sensor+0x290>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	8a 17       	cp	r24, r26
     cb0:	9b 07       	cpc	r25, r27
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <process_sensor+0x298>
     cb4:	ad c1       	rjmp	.+858    	; 0x1010 <process_sensor+0x5f2>
     cb6:	80 91 15 01 	lds	r24, 0x0115
     cba:	80 93 2f 01 	sts	0x012F, r24
     cbe:	8c 2f       	mov	r24, r28
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	66 e0       	ldi	r22, 0x06	; 6
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	62 d8       	rcall	.-3900   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     cc8:	fc 01       	movw	r30, r24
     cca:	ef 5c       	subi	r30, 0xCF	; 207
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	8c 2f       	mov	r24, r28
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	66 e0       	ldi	r22, 0x06	; 6
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	5a d8       	rcall	.-3916   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     cd8:	dc 01       	movw	r26, r24
     cda:	af 5c       	subi	r26, 0xCF	; 207
     cdc:	be 4f       	sbci	r27, 0xFE	; 254
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	8c 91       	ld	r24, X
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	8f 5f       	subi	r24, 0xFF	; 255
     ce6:	82 83       	std	Z+2, r24	; 0x02
     ce8:	8c 2f       	mov	r24, r28
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	66 e0       	ldi	r22, 0x06	; 6
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	4d d8       	rcall	.-3942   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     cf2:	fc 01       	movw	r30, r24
     cf4:	ef 5c       	subi	r30, 0xCF	; 207
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	04 81       	ldd	r16, Z+4	; 0x04
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	08 73       	andi	r16, 0x38	; 56
     cfe:	10 70       	andi	r17, 0x00	; 0
     d00:	33 e0       	ldi	r19, 0x03	; 3
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	3a 95       	dec	r19
     d08:	e1 f7       	brne	.-8      	; 0xd02 <process_sensor+0x2e4>
     d0a:	00 23       	and	r16, r16
     d0c:	09 f0       	breq	.+2      	; 0xd10 <process_sensor+0x2f2>
     d0e:	4d c0       	rjmp	.+154    	; 0xdaa <process_sensor+0x38c>
     d10:	55 c0       	rjmp	.+170    	; 0xdbc <process_sensor+0x39e>
     d12:	dc 17       	cp	r29, r28
     d14:	09 f4       	brne	.+2      	; 0xd18 <process_sensor+0x2fa>
     d16:	47 c0       	rjmp	.+142    	; 0xda6 <process_sensor+0x388>
     d18:	8d 2f       	mov	r24, r29
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	66 e0       	ldi	r22, 0x06	; 6
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	35 d8       	rcall	.-3990   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     d22:	fc 01       	movw	r30, r24
     d24:	ef 5c       	subi	r30, 0xCF	; 207
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	84 81       	ldd	r24, Z+4	; 0x04
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	88 73       	andi	r24, 0x38	; 56
     d2e:	90 70       	andi	r25, 0x00	; 0
     d30:	23 e0       	ldi	r18, 0x03	; 3
     d32:	96 95       	lsr	r25
     d34:	87 95       	ror	r24
     d36:	2a 95       	dec	r18
     d38:	e1 f7       	brne	.-8      	; 0xd32 <process_sensor+0x314>
     d3a:	08 17       	cp	r16, r24
     d3c:	a1 f5       	brne	.+104    	; 0xda6 <process_sensor+0x388>
     d3e:	8d 2f       	mov	r24, r29
     d40:	b8 dd       	rcall	.-1168   	; 0x8b2 <qt_get_sensor_delta>
     d42:	9c 01       	movw	r18, r24
     d44:	8d 2f       	mov	r24, r29
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	66 e0       	ldi	r22, 0x06	; 6
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	1f d8       	rcall	.-4034   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     d4e:	fc 01       	movw	r30, r24
     d50:	ef 5c       	subi	r30, 0xCF	; 207
     d52:	fe 4f       	sbci	r31, 0xFE	; 254
     d54:	83 81       	ldd	r24, Z+3	; 0x03
     d56:	28 1b       	sub	r18, r24
     d58:	31 09       	sbc	r19, r1
     d5a:	8c 2f       	mov	r24, r28
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	66 e0       	ldi	r22, 0x06	; 6
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	14 d8       	rcall	.-4056   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     d64:	fc 01       	movw	r30, r24
     d66:	ef 5c       	subi	r30, 0xCF	; 207
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	83 81       	ldd	r24, Z+3	; 0x03
     d6c:	a7 01       	movw	r20, r14
     d6e:	48 1b       	sub	r20, r24
     d70:	51 09       	sbc	r21, r1
     d72:	42 17       	cp	r20, r18
     d74:	53 07       	cpc	r21, r19
     d76:	6c f0       	brlt	.+26     	; 0xd92 <process_sensor+0x374>
     d78:	8d 2f       	mov	r24, r29
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	66 e0       	ldi	r22, 0x06	; 6
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 d8       	rcall	.-4086   	; 0xfffffd8c <__eeprom_end+0xff7efd8c>
     d82:	fc 01       	movw	r30, r24
     d84:	ef 5c       	subi	r30, 0xCF	; 207
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
     d88:	80 81       	ld	r24, Z
     d8a:	80 31       	cpi	r24, 0x10	; 16
     d8c:	11 f0       	breq	.+4      	; 0xd92 <process_sensor+0x374>
     d8e:	88 30       	cpi	r24, 0x08	; 8
     d90:	51 f4       	brne	.+20     	; 0xda6 <process_sensor+0x388>
     d92:	8c 2f       	mov	r24, r28
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	66 e0       	ldi	r22, 0x06	; 6
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	f8 d7       	rcall	.+4080   	; 0x1d8c <__mulhi3>
     d9c:	fc 01       	movw	r30, r24
     d9e:	ef 5c       	subi	r30, 0xCF	; 207
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	12 82       	std	Z+2, r1	; 0x02
     da4:	11 e0       	ldi	r17, 0x01	; 1
     da6:	df 5f       	subi	r29, 0xFF	; 255
     da8:	02 c0       	rjmp	.+4      	; 0xdae <process_sensor+0x390>
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	d0 e0       	ldi	r29, 0x00	; 0
     dae:	80 91 30 01 	lds	r24, 0x0130
     db2:	d8 17       	cp	r29, r24
     db4:	08 f4       	brcc	.+2      	; 0xdb8 <process_sensor+0x39a>
     db6:	ad cf       	rjmp	.-166    	; 0xd12 <process_sensor+0x2f4>
     db8:	11 23       	and	r17, r17
     dba:	79 f4       	brne	.+30     	; 0xdda <process_sensor+0x3bc>
     dbc:	80 91 14 01 	lds	r24, 0x0114
     dc0:	88 23       	and	r24, r24
     dc2:	59 f0       	breq	.+22     	; 0xdda <process_sensor+0x3bc>
     dc4:	80 91 2d 01 	lds	r24, 0x012D
     dc8:	90 91 2e 01 	lds	r25, 0x012E
     dcc:	98 60       	ori	r25, 0x08	; 8
     dce:	90 93 2e 01 	sts	0x012E, r25
     dd2:	80 93 2d 01 	sts	0x012D, r24
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <process_sensor+0x3be>
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	8c 2f       	mov	r24, r28
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	66 e0       	ldi	r22, 0x06	; 6
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	d3 d7       	rcall	.+4006   	; 0x1d8c <__mulhi3>
     de6:	fc 01       	movw	r30, r24
     de8:	ef 5c       	subi	r30, 0xCF	; 207
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	92 81       	ldd	r25, Z+2	; 0x02
     dee:	80 91 14 01 	lds	r24, 0x0114
     df2:	98 17       	cp	r25, r24
     df4:	08 f4       	brcc	.+2      	; 0xdf8 <process_sensor+0x3da>
     df6:	27 c1       	rjmp	.+590    	; 0x1046 <process_sensor+0x628>
     df8:	20 91 2d 01 	lds	r18, 0x012D
     dfc:	30 91 2e 01 	lds	r19, 0x012E
     e00:	23 60       	ori	r18, 0x03	; 3
     e02:	30 93 2e 01 	sts	0x012E, r19
     e06:	20 93 2d 01 	sts	0x012D, r18
     e0a:	8c 2f       	mov	r24, r28
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	66 e0       	ldi	r22, 0x06	; 6
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	bc d7       	rcall	.+3960   	; 0x1d8c <__mulhi3>
     e14:	fc 01       	movw	r30, r24
     e16:	ef 5c       	subi	r30, 0xCF	; 207
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	80 e1       	ldi	r24, 0x10	; 16
     e1c:	80 83       	st	Z, r24
     e1e:	8c 2f       	mov	r24, r28
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	66 e0       	ldi	r22, 0x06	; 6
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	b2 d7       	rcall	.+3940   	; 0x1d8c <__mulhi3>
     e28:	fc 01       	movw	r30, r24
     e2a:	ef 5c       	subi	r30, 0xCF	; 207
     e2c:	fe 4f       	sbci	r31, 0xFE	; 254
     e2e:	11 82       	std	Z+1, r1	; 0x01
     e30:	0a c1       	rjmp	.+532    	; 0x1046 <process_sensor+0x628>
     e32:	22 ff       	sbrs	r18, 2
     e34:	1e c0       	rjmp	.+60     	; 0xe72 <process_sensor+0x454>
     e36:	8c 2f       	mov	r24, r28
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	66 e0       	ldi	r22, 0x06	; 6
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	a6 d7       	rcall	.+3916   	; 0x1d8c <__mulhi3>
     e40:	fc 01       	movw	r30, r24
     e42:	ef 5c       	subi	r30, 0xCF	; 207
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	e5 81       	ldd	r30, Z+5	; 0x05
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	e1 5f       	subi	r30, 0xF1	; 241
     e4c:	fe 4f       	sbci	r31, 0xFE	; 254
     e4e:	80 e8       	ldi	r24, 0x80	; 128
     e50:	80 83       	st	Z, r24
     e52:	8c 2f       	mov	r24, r28
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	66 e0       	ldi	r22, 0x06	; 6
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	98 d7       	rcall	.+3888   	; 0x1d8c <__mulhi3>
     e5c:	fc 01       	movw	r30, r24
     e5e:	ef 5c       	subi	r30, 0xCF	; 207
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	80 83       	st	Z, r24
     e66:	80 91 2d 01 	lds	r24, 0x012D
     e6a:	90 91 2e 01 	lds	r25, 0x012E
     e6e:	90 61       	ori	r25, 0x10	; 16
     e70:	58 c0       	rjmp	.+176    	; 0xf22 <process_sensor+0x504>
     e72:	c7 01       	movw	r24, r14
     e74:	f7 fe       	sbrs	r15, 7
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <process_sensor+0x45e>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	80 17       	cp	r24, r16
     e7e:	91 07       	cpc	r25, r17
     e80:	80 f4       	brcc	.+32     	; 0xea2 <process_sensor+0x484>
     e82:	8c 2f       	mov	r24, r28
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	66 e0       	ldi	r22, 0x06	; 6
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	80 d7       	rcall	.+3840   	; 0x1d8c <__mulhi3>
     e8c:	fc 01       	movw	r30, r24
     e8e:	ef 5c       	subi	r30, 0xCF	; 207
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	88 e0       	ldi	r24, 0x08	; 8
     e94:	80 83       	st	Z, r24
     e96:	80 91 2d 01 	lds	r24, 0x012D
     e9a:	90 91 2e 01 	lds	r25, 0x012E
     e9e:	94 60       	ori	r25, 0x04	; 4
     ea0:	40 c0       	rjmp	.+128    	; 0xf22 <process_sensor+0x504>
     ea2:	80 91 2d 01 	lds	r24, 0x012D
     ea6:	90 91 2e 01 	lds	r25, 0x012E
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	90 93 2e 01 	sts	0x012E, r25
     eb0:	80 93 2d 01 	sts	0x012D, r24
     eb4:	8c 2f       	mov	r24, r28
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	66 e0       	ldi	r22, 0x06	; 6
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	67 d7       	rcall	.+3790   	; 0x1d8c <__mulhi3>
     ebe:	fc 01       	movw	r30, r24
     ec0:	ef 5c       	subi	r30, 0xCF	; 207
     ec2:	fe 4f       	sbci	r31, 0xFE	; 254
     ec4:	22 81       	ldd	r18, Z+2	; 0x02
     ec6:	80 91 14 01 	lds	r24, 0x0114
     eca:	28 17       	cp	r18, r24
     ecc:	50 f4       	brcc	.+20     	; 0xee2 <process_sensor+0x4c4>
     ece:	8c 2f       	mov	r24, r28
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	66 e0       	ldi	r22, 0x06	; 6
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	5a d7       	rcall	.+3764   	; 0x1d8c <__mulhi3>
     ed8:	fc 01       	movw	r30, r24
     eda:	ef 5c       	subi	r30, 0xCF	; 207
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	2f 5f       	subi	r18, 0xFF	; 255
     ee0:	22 83       	std	Z+2, r18	; 0x02
     ee2:	30 91 16 01 	lds	r19, 0x0116
     ee6:	33 23       	and	r19, r19
     ee8:	11 f1       	breq	.+68     	; 0xf2e <process_sensor+0x510>
     eea:	8c 2f       	mov	r24, r28
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	66 e0       	ldi	r22, 0x06	; 6
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	4c d7       	rcall	.+3736   	; 0x1d8c <__mulhi3>
     ef4:	fc 01       	movw	r30, r24
     ef6:	ef 5c       	subi	r30, 0xCF	; 207
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	21 81       	ldd	r18, Z+1	; 0x01
     efc:	8c 2f       	mov	r24, r28
     efe:	23 17       	cp	r18, r19
     f00:	50 f4       	brcc	.+20     	; 0xf16 <process_sensor+0x4f8>
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	66 e0       	ldi	r22, 0x06	; 6
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	41 d7       	rcall	.+3714   	; 0x1d8c <__mulhi3>
     f0a:	fc 01       	movw	r30, r24
     f0c:	ef 5c       	subi	r30, 0xCF	; 207
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	d2 0f       	add	r29, r18
     f12:	d1 83       	std	Z+1, r29	; 0x01
     f14:	0c c0       	rjmp	.+24     	; 0xf2e <process_sensor+0x510>
     f16:	68 dd       	rcall	.-1328   	; 0x9e8 <start_cal_sensor>
     f18:	80 91 2d 01 	lds	r24, 0x012D
     f1c:	90 91 2e 01 	lds	r25, 0x012E
     f20:	92 60       	ori	r25, 0x02	; 2
     f22:	90 93 2e 01 	sts	0x012E, r25
     f26:	80 93 2d 01 	sts	0x012D, r24
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <process_sensor+0x512>
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	80 91 15 01 	lds	r24, 0x0115
     f34:	80 93 2f 01 	sts	0x012F, r24
     f38:	86 c0       	rjmp	.+268    	; 0x1046 <process_sensor+0x628>
     f3a:	80 91 15 01 	lds	r24, 0x0115
     f3e:	80 93 2f 01 	sts	0x012F, r24
     f42:	8c 2f       	mov	r24, r28
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	66 e0       	ldi	r22, 0x06	; 6
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	20 d7       	rcall	.+3648   	; 0x1d8c <__mulhi3>
     f4c:	fc 01       	movw	r30, r24
     f4e:	ef 5c       	subi	r30, 0xCF	; 207
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <process_sensor+0x53c>
     f58:	5b c0       	rjmp	.+182    	; 0x1010 <process_sensor+0x5f2>
     f5a:	c7 01       	movw	r24, r14
     f5c:	f7 fe       	sbrs	r15, 7
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <process_sensor+0x546>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	08 17       	cp	r16, r24
     f66:	19 07       	cpc	r17, r25
     f68:	a8 f4       	brcc	.+42     	; 0xf94 <process_sensor+0x576>
     f6a:	8c 2f       	mov	r24, r28
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	66 e0       	ldi	r22, 0x06	; 6
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	0c d7       	rcall	.+3608   	; 0x1d8c <__mulhi3>
     f74:	fc 01       	movw	r30, r24
     f76:	ef 5c       	subi	r30, 0xCF	; 207
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	80 e1       	ldi	r24, 0x10	; 16
     f7c:	80 83       	st	Z, r24
     f7e:	80 91 2d 01 	lds	r24, 0x012D
     f82:	90 91 2e 01 	lds	r25, 0x012E
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	90 93 2e 01 	sts	0x012E, r25
     f8c:	80 93 2d 01 	sts	0x012D, r24
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	0a c0       	rjmp	.+20     	; 0xfa8 <process_sensor+0x58a>
     f94:	80 91 2d 01 	lds	r24, 0x012D
     f98:	90 91 2e 01 	lds	r25, 0x012E
     f9c:	94 60       	ori	r25, 0x04	; 4
     f9e:	90 93 2e 01 	sts	0x012E, r25
     fa2:	80 93 2d 01 	sts	0x012D, r24
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	8c 2f       	mov	r24, r28
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	66 e0       	ldi	r22, 0x06	; 6
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	ed d6       	rcall	.+3546   	; 0x1d8c <__mulhi3>
     fb2:	fc 01       	movw	r30, r24
     fb4:	ef 5c       	subi	r30, 0xCF	; 207
     fb6:	fe 4f       	sbci	r31, 0xFE	; 254
     fb8:	8c 2f       	mov	r24, r28
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	66 e0       	ldi	r22, 0x06	; 6
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	e5 d6       	rcall	.+3530   	; 0x1d8c <__mulhi3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	af 5c       	subi	r26, 0xCF	; 207
     fc6:	be 4f       	sbci	r27, 0xFE	; 254
     fc8:	12 96       	adiw	r26, 0x02	; 2
     fca:	8c 91       	ld	r24, X
     fcc:	12 97       	sbiw	r26, 0x02	; 2
     fce:	81 50       	subi	r24, 0x01	; 1
     fd0:	82 83       	std	Z+2, r24	; 0x02
     fd2:	39 c0       	rjmp	.+114    	; 0x1046 <process_sensor+0x628>
     fd4:	8c 2f       	mov	r24, r28
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	66 e0       	ldi	r22, 0x06	; 6
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	d7 d6       	rcall	.+3502   	; 0x1d8c <__mulhi3>
     fde:	fc 01       	movw	r30, r24
     fe0:	ef 5c       	subi	r30, 0xCF	; 207
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	e5 81       	ldd	r30, Z+5	; 0x05
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	e1 5f       	subi	r30, 0xF1	; 241
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	80 81       	ld	r24, Z
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 83       	st	Z, r24
     ff2:	22 fd       	sbrc	r18, 2
     ff4:	10 c0       	rjmp	.+32     	; 0x1016 <process_sensor+0x5f8>
     ff6:	87 ff       	sbrs	r24, 7
     ff8:	0b c0       	rjmp	.+22     	; 0x1010 <process_sensor+0x5f2>
     ffa:	8c 2f       	mov	r24, r28
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	66 e0       	ldi	r22, 0x06	; 6
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	c4 d6       	rcall	.+3464   	; 0x1d8c <__mulhi3>
    1004:	fc 01       	movw	r30, r24
    1006:	ef 5c       	subi	r30, 0xCF	; 207
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	80 e1       	ldi	r24, 0x10	; 16
    100c:	80 83       	st	Z, r24
    100e:	1a c0       	rjmp	.+52     	; 0x1044 <process_sensor+0x626>
    1010:	8c 2f       	mov	r24, r28
    1012:	b9 dc       	rcall	.-1678   	; 0x986 <goto_no_detect>
    1014:	17 c0       	rjmp	.+46     	; 0x1044 <process_sensor+0x626>
    1016:	90 91 19 01 	lds	r25, 0x0119
    101a:	89 17       	cp	r24, r25
    101c:	68 f0       	brcs	.+26     	; 0x1038 <process_sensor+0x61a>
    101e:	8c 2f       	mov	r24, r28
    1020:	e3 dc       	rcall	.-1594   	; 0x9e8 <start_cal_sensor>
    1022:	80 91 2d 01 	lds	r24, 0x012D
    1026:	90 91 2e 01 	lds	r25, 0x012E
    102a:	90 61       	ori	r25, 0x10	; 16
    102c:	90 93 2e 01 	sts	0x012E, r25
    1030:	80 93 2d 01 	sts	0x012D, r24
    1034:	41 e0       	ldi	r20, 0x01	; 1
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <process_sensor+0x628>
    1038:	80 91 2d 01 	lds	r24, 0x012D
    103c:	90 91 2e 01 	lds	r25, 0x012E
    1040:	94 60       	ori	r25, 0x04	; 4
    1042:	f4 cf       	rjmp	.-24     	; 0x102c <process_sensor+0x60e>
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	84 2f       	mov	r24, r20
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	e6 e0       	ldi	r30, 0x06	; 6
    104e:	d8 c6       	rjmp	.+3504   	; 0x1e00 <__epilogue_restores__+0x18>

00001050 <get_channel_delta>:
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	34 96       	adiw	r30, 0x04	; 4
    1056:	2c e1       	ldi	r18, 0x1C	; 28
    1058:	31 e0       	ldi	r19, 0x01	; 1
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	dc 01       	movw	r26, r24
    1064:	aa 0f       	add	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	a2 0f       	add	r26, r18
    106a:	b3 1f       	adc	r27, r19
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	2d 91       	ld	r18, X+
    1072:	3c 91       	ld	r19, X
    1074:	11 97       	sbiw	r26, 0x01	; 1
    1076:	82 1b       	sub	r24, r18
    1078:	93 0b       	sbc	r25, r19
    107a:	08 95       	ret

0000107c <burst_init>:
    107c:	0f 93       	push	r16
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	80 93 fa 00 	sts	0x00FA, r24
    1088:	10 92 4e 01 	sts	0x014E, r1
    108c:	10 92 4f 01 	sts	0x014F, r1
    1090:	10 92 50 01 	sts	0x0150, r1
    1094:	10 92 51 01 	sts	0x0151, r1
    1098:	10 92 52 01 	sts	0x0152, r1
    109c:	30 91 30 01 	lds	r19, 0x0130
    10a0:	c6 e3       	ldi	r28, 0x36	; 54
    10a2:	d1 e0       	ldi	r29, 0x01	; 1
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	38 c0       	rjmp	.+112    	; 0x111c <burst_init+0xa0>
    10ac:	e8 81       	ld	r30, Y
    10ae:	8e 2f       	mov	r24, r30
    10b0:	86 95       	lsr	r24
    10b2:	86 95       	lsr	r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	dc 01       	movw	r26, r24
    10bc:	aa 51       	subi	r26, 0x1A	; 26
    10be:	bf 4f       	sbci	r27, 0xFF	; 255
    10c0:	ab 01       	movw	r20, r22
    10c2:	0c 90       	ld	r0, X
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <burst_init+0x4e>
    10c6:	44 0f       	add	r20, r20
    10c8:	55 1f       	adc	r21, r21
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <burst_init+0x4a>
    10ce:	50 91 4e 01 	lds	r21, 0x014E
    10d2:	54 2b       	or	r21, r20
    10d4:	50 93 4e 01 	sts	0x014E, r21
    10d8:	8c 51       	subi	r24, 0x1C	; 28
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	ab 01       	movw	r20, r22
    10de:	dc 01       	movw	r26, r24
    10e0:	0c 90       	ld	r0, X
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <burst_init+0x6c>
    10e4:	44 0f       	add	r20, r20
    10e6:	55 1f       	adc	r21, r21
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <burst_init+0x68>
    10ec:	ca 01       	movw	r24, r20
    10ee:	90 91 4f 01 	lds	r25, 0x014F
    10f2:	98 2b       	or	r25, r24
    10f4:	90 93 4f 01 	sts	0x014F, r25
    10f8:	e3 70       	andi	r30, 0x03	; 3
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	e8 51       	subi	r30, 0x18	; 24
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	a3 81       	ldd	r26, Z+3	; 0x03
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	a2 5b       	subi	r26, 0xB2	; 178
    110e:	be 4f       	sbci	r27, 0xFE	; 254
    1110:	8c 91       	ld	r24, X
    1112:	92 81       	ldd	r25, Z+2	; 0x02
    1114:	89 2b       	or	r24, r25
    1116:	8c 93       	st	X, r24
    1118:	2f 5f       	subi	r18, 0xFF	; 255
    111a:	26 96       	adiw	r28, 0x06	; 6
    111c:	23 17       	cp	r18, r19
    111e:	31 f6       	brne	.-116    	; 0x10ac <burst_init+0x30>
    1120:	80 91 4f 01 	lds	r24, 0x014F
    1124:	60 91 4e 01 	lds	r22, 0x014E
    1128:	40 91 50 01 	lds	r20, 0x0150
    112c:	20 91 51 01 	lds	r18, 0x0151
    1130:	00 91 52 01 	lds	r16, 0x0152
    1134:	a4 d9       	rcall	.-3256   	; 0x47e <_00110000001_>
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	0f 91       	pop	r16
    113c:	08 95       	ret

0000113e <burst_reset>:
    113e:	80 e4       	ldi	r24, 0x40	; 64
    1140:	80 93 fb 00 	sts	0x00FB, r24
    1144:	80 93 fc 00 	sts	0x00FC, r24
    1148:	80 93 fd 00 	sts	0x00FD, r24
    114c:	80 93 fe 00 	sts	0x00FE, r24
    1150:	08 95       	ret

00001152 <burst>:
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee ea       	ldi	r30, 0xAE	; 174
    1158:	f8 e0       	ldi	r31, 0x08	; 8
    115a:	32 c6       	rjmp	.+3172   	; 0x1dc0 <__prologue_saves__+0x10>
    115c:	8f b7       	in	r24, 0x3f	; 63
    115e:	80 78       	andi	r24, 0x80	; 128
    1160:	80 93 4a 01 	sts	0x014A, r24
    1164:	d3 b1       	in	r29, 0x03	; 3
    1166:	18 b1       	in	r17, 0x08	; 8
    1168:	0f b5       	in	r16, 0x2f	; 47
    116a:	fe b4       	in	r15, 0x2e	; 46
    116c:	eb b0       	in	r14, 0x0b	; 11
    116e:	ac b4       	in	r10, 0x2c	; 44
    1170:	bd b4       	in	r11, 0x2d	; 45
    1172:	d0 b0       	in	r13, 0x00	; 0
    1174:	c7 b0       	in	r12, 0x07	; 7
    1176:	80 e4       	ldi	r24, 0x40	; 64
    1178:	83 b9       	out	0x03, r24	; 3
    117a:	84 e0       	ldi	r24, 0x04	; 4
    117c:	88 b9       	out	0x08, r24	; 8
    117e:	1f bc       	out	0x2f, r1	; 47
    1180:	81 e8       	ldi	r24, 0x81	; 129
    1182:	8e bd       	out	0x2e, r24	; 46
    1184:	f8 94       	cli
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	20 c0       	rjmp	.+64     	; 0x11ca <burst+0x78>
    118a:	8c 2f       	mov	r24, r28
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	66 e0       	ldi	r22, 0x06	; 6
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	fc d5       	rcall	.+3064   	; 0x1d8c <__mulhi3>
    1194:	fc 01       	movw	r30, r24
    1196:	ef 5c       	subi	r30, 0xCF	; 207
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	85 81       	ldd	r24, Z+5	; 0x05
    119c:	a8 2f       	mov	r26, r24
    119e:	a3 70       	andi	r26, 0x03	; 3
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	aa 0f       	add	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	aa 0f       	add	r26, r26
    11a8:	bb 1f       	adc	r27, r27
    11aa:	a8 51       	subi	r26, 0x18	; 24
    11ac:	bf 4f       	sbci	r27, 0xFF	; 255
    11ae:	ed 91       	ld	r30, X+
    11b0:	fc 91       	ld	r31, X
    11b2:	11 97       	sbiw	r26, 0x01	; 1
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	19 f0       	breq	.+6      	; 0x11be <burst+0x6c>
    11b8:	12 96       	adiw	r26, 0x02	; 2
    11ba:	6c 91       	ld	r22, X
    11bc:	09 95       	icall
    11be:	8f b7       	in	r24, 0x3f	; 63
    11c0:	90 91 4a 01 	lds	r25, 0x014A
    11c4:	89 2b       	or	r24, r25
    11c6:	8f bf       	out	0x3f, r24	; 63
    11c8:	cf 5f       	subi	r28, 0xFF	; 255
    11ca:	80 91 30 01 	lds	r24, 0x0130
    11ce:	c8 17       	cp	r28, r24
    11d0:	e0 f2       	brcs	.-72     	; 0x118a <burst+0x38>
    11d2:	d3 b9       	out	0x03, r29	; 3
    11d4:	18 b9       	out	0x08, r17	; 8
    11d6:	0f bd       	out	0x2f, r16	; 47
    11d8:	fe bc       	out	0x2e, r15	; 46
    11da:	eb b8       	out	0x0b, r14	; 11
    11dc:	bd bc       	out	0x2d, r11	; 45
    11de:	ac bc       	out	0x2c, r10	; 44
    11e0:	d0 b8       	out	0x00, r13	; 0
    11e2:	c7 b8       	out	0x07, r12	; 7
    11e4:	8f b7       	in	r24, 0x3f	; 63
    11e6:	90 91 4a 01 	lds	r25, 0x014A
    11ea:	89 2b       	or	r24, r25
    11ec:	8f bf       	out	0x3f, r24	; 63
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	ea e0       	ldi	r30, 0x0A	; 10
    11f4:	01 c6       	rjmp	.+3074   	; 0x1df8 <__epilogue_restores__+0x10>

000011f6 <main>:
{
	char modeStatus = 2; // Startup Mode
		

   /* initialize host app, pins, watchdog, etc */
    init_system();
    11f6:	3b d9       	rcall	.-3466   	; 0x46e <init_system>

    /* configure timer ISR to fire regularly */
    init_timer_isr();
    11f8:	f9 d8       	rcall	.-3598   	; 0x3ec <init_timer_isr>

	/* Initialize Touch sensors */
	touch_init();
    11fa:	a5 d9       	rcall	.-3254   	; 0x546 <touch_init>

		i2c_init();                             // initialize I2C library
    11fc:	36 d7       	rcall	.+3692   	; 0x206a <__data_load_end+0x1a8>
    11fe:	84 e6       	ldi	r24, 0x64	; 100
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <main+0xc>
		_delay_loop_2(100);           // delay
		
		pca9685_init2(PCA9685);
    1206:	8a ea       	ldi	r24, 0xAA	; 170
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	8e d7       	rcall	.+3868   	; 0x2128 <__data_load_end+0x266>
    120c:	80 e1       	ldi	r24, 0x10	; 16
    120e:	97 e2       	ldi	r25, 0x27	; 39
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <main+0x1a>
		_delay_loop_2(10000);           // delay

		pca9685_brightness(PCA9685,50,15);
    1214:	82 e3       	ldi	r24, 0x32	; 50
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	6f e0       	ldi	r22, 0x0F	; 15
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	37 d8       	rcall	.-3986   	; 0x28c <pca9685_brightness.constprop.1>
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
{
	char modeStatus = 2; // Startup Mode
    121e:	22 e0       	ldi	r18, 0x02	; 2
    1220:	b2 2e       	mov	r11, r18
    1222:	00 e1       	ldi	r16, 0x10	; 16
    1224:	17 e2       	ldi	r17, 0x27	; 39
    1226:	30 e3       	ldi	r19, 0x30	; 48
    1228:	e3 2e       	mov	r14, r19
    122a:	35 e7       	ldi	r19, 0x75	; 117
    122c:	f3 2e       	mov	r15, r19
    122e:	48 ee       	ldi	r20, 0xE8	; 232
    1230:	c4 2e       	mov	r12, r20
    1232:	43 e0       	ldi	r20, 0x03	; 3
    1234:	d4 2e       	mov	r13, r20

    /* loop forever */
    for( ; ; )
    {
		
		touch_measure();
    1236:	a5 d9       	rcall	.-3254   	; 0x582 <touch_measure>
	
	
	// Check the current status of modeStatus (the mode button)
	// set port pin PORTA7 as input and leave the others pins
	// in their original state (inputs or outputs, it doesn't matter)
	DDRA &= ~(1 << PA7);
    1238:	d7 98       	cbi	0x1a, 7	; 26
	
	if (PINA & (1<<PA7))
    123a:	cf 99       	sbic	0x19, 7	; 25
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <main+0x5a>
    123e:	85 e0       	ldi	r24, 0x05	; 5
    1240:	8b 15       	cp	r24, r11
    1242:	08 f4       	brcc	.+2      	; 0x1246 <main+0x50>
    1244:	7b c0       	rjmp	.+246    	; 0x133c <main+0x146>
    1246:	eb 2d       	mov	r30, r11
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	e2 52       	subi	r30, 0x22	; 34
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	b0 80       	ld	r11, Z
	
	int mode5State = 0;
	
	
	
	if (modeStatus == 0) // check what the current mode is, and modify the animation based on that
    1250:	bb 20       	and	r11, r11
    1252:	09 f0       	breq	.+2      	; 0x1256 <main+0x60>
    1254:	24 c2       	rjmp	.+1096   	; 0x169e <main+0x4a8>
    1256:	c3 e0       	ldi	r28, 0x03	; 3
    1258:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		for(int i = 3; i <= 5; i++)
		{
			pca9685_brightness(PCA9685,1,i);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	be 01       	movw	r22, r28
    1260:	15 d8       	rcall	.-4054   	; 0x28c <pca9685_brightness.constprop.1>
    1262:	c8 01       	movw	r24, r16
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <main+0x6e>
    1268:	c8 01       	movw	r24, r16
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	f1 f7       	brne	.-4      	; 0x126a <main+0x74>
    126e:	c8 01       	movw	r24, r16
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <main+0x7a>
	
	
	if (modeStatus == 0) // check what the current mode is, and modify the animation based on that
	{
		
		for(int i = 3; i <= 5; i++)
    1274:	21 96       	adiw	r28, 0x01	; 1
    1276:	c6 30       	cpi	r28, 0x06	; 6
    1278:	d1 05       	cpc	r29, r1
    127a:	79 f7       	brne	.-34     	; 0x125a <main+0x64>
    127c:	c0 e0       	ldi	r28, 0x00	; 0
    127e:	d0 e0       	ldi	r29, 0x00	; 0

		}
		
		for(int i = 0; i <= 2; i++)
		{
			pca9685_brightness(PCA9685,1,i);
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	be 01       	movw	r22, r28
    1286:	02 d8       	rcall	.-4092   	; 0x28c <pca9685_brightness.constprop.1>
    1288:	c8 01       	movw	r24, r16
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <main+0x94>
    128e:	c8 01       	movw	r24, r16
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <main+0x9a>
    1294:	c8 01       	movw	r24, r16
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <main+0xa0>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay

		}
		
		for(int i = 0; i <= 2; i++)
    129a:	21 96       	adiw	r28, 0x01	; 1
    129c:	c3 30       	cpi	r28, 0x03	; 3
    129e:	d1 05       	cpc	r29, r1
    12a0:	79 f7       	brne	.-34     	; 0x1280 <main+0x8a>
    12a2:	c6 e0       	ldi	r28, 0x06	; 6
    12a4:	d0 e0       	ldi	r29, 0x00	; 0

		}
		
		for(int i = 6; i <= LEDCOUNT - 1; i++)
		{
			pca9685_brightness(PCA9685,1,i);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	be 01       	movw	r22, r28
    12ac:	ef d7       	rcall	.+4062   	; 0x228c <__data_load_end+0x3ca>
    12ae:	c8 01       	movw	r24, r16
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <main+0xba>
    12b4:	c8 01       	movw	r24, r16
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <main+0xc0>
    12ba:	c8 01       	movw	r24, r16
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <main+0xc6>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay

		}
		
		for(int i = 6; i <= LEDCOUNT - 1; i++)
    12c0:	21 96       	adiw	r28, 0x01	; 1
    12c2:	cf 30       	cpi	r28, 0x0F	; 15
    12c4:	d1 05       	cpc	r29, r1
    12c6:	79 f7       	brne	.-34     	; 0x12a6 <main+0xb0>
    12c8:	c3 e0       	ldi	r28, 0x03	; 3
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
		
		///////////////////////////////
		
		for(int i = 3; i <= 5; i++)
		{
			pca9685_brightness(PCA9685,25,i);
    12cc:	89 e1       	ldi	r24, 0x19	; 25
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	be 01       	movw	r22, r28
    12d2:	dc d7       	rcall	.+4024   	; 0x228c <__data_load_end+0x3ca>
    12d4:	c8 01       	movw	r24, r16
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <main+0xe0>
    12da:	c8 01       	movw	r24, r16
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <main+0xe6>
    12e0:	c8 01       	movw	r24, r16
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <main+0xec>

		}
		
		///////////////////////////////
		
		for(int i = 3; i <= 5; i++)
    12e6:	21 96       	adiw	r28, 0x01	; 1
    12e8:	c6 30       	cpi	r28, 0x06	; 6
    12ea:	d1 05       	cpc	r29, r1
    12ec:	79 f7       	brne	.-34     	; 0x12cc <main+0xd6>
    12ee:	c0 e0       	ldi	r28, 0x00	; 0
    12f0:	d0 e0       	ldi	r29, 0x00	; 0

		}
		
		for(int i = 0; i <= 2; i++)
		{
			pca9685_brightness(PCA9685,25,i);
    12f2:	89 e1       	ldi	r24, 0x19	; 25
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	be 01       	movw	r22, r28
    12f8:	c9 d7       	rcall	.+3986   	; 0x228c <__data_load_end+0x3ca>
    12fa:	c8 01       	movw	r24, r16
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <main+0x106>
    1300:	c8 01       	movw	r24, r16
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <main+0x10c>
    1306:	c8 01       	movw	r24, r16
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <main+0x112>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay

		}
		
		for(int i = 0; i <= 2; i++)
    130c:	21 96       	adiw	r28, 0x01	; 1
    130e:	c3 30       	cpi	r28, 0x03	; 3
    1310:	d1 05       	cpc	r29, r1
    1312:	79 f7       	brne	.-34     	; 0x12f2 <main+0xfc>
    1314:	c6 e0       	ldi	r28, 0x06	; 6
    1316:	d0 e0       	ldi	r29, 0x00	; 0

		}
		
		for(int i = 6; i <= LEDCOUNT - 1; i++)
		{
			pca9685_brightness(PCA9685,25,i);
    1318:	89 e1       	ldi	r24, 0x19	; 25
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	be 01       	movw	r22, r28
    131e:	b6 d7       	rcall	.+3948   	; 0x228c <__data_load_end+0x3ca>
    1320:	c8 01       	movw	r24, r16
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <main+0x12c>
    1326:	c8 01       	movw	r24, r16
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <main+0x132>
    132c:	c6 01       	movw	r24, r12
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <main+0x138>
			_delay_loop_2(10000);           // delay
			_delay_loop_2(10000);           // delay

		}
		
		for(int i = 6; i <= LEDCOUNT - 1; i++)
    1332:	21 96       	adiw	r28, 0x01	; 1
    1334:	cf 30       	cpi	r28, 0x0F	; 15
    1336:	d1 05       	cpc	r29, r1
    1338:	79 f7       	brne	.-34     	; 0x1318 <main+0x122>
    133a:	7d cf       	rjmp	.-262    	; 0x1236 <main+0x40>
	// Check the current status of modeStatus (the mode button)
	// set port pin PORTA7 as input and leave the others pins
	// in their original state (inputs or outputs, it doesn't matter)
	DDRA &= ~(1 << PA7);
	
	if (PINA & (1<<PA7))
    133c:	c1 e0       	ldi	r28, 0x01	; 1
    133e:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		// Turn off all LEDs
		for(int i = 1; i <= LEDCOUNT - 1; i++)
		{
			pca9685_brightness(PCA9685,0,i);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	be 01       	movw	r22, r28
    1346:	a2 d7       	rcall	.+3908   	; 0x228c <__data_load_end+0x3ca>
		
		// Blink Low Power
		
		
		// Turn off all LEDs
		for(int i = 1; i <= LEDCOUNT - 1; i++)
    1348:	21 96       	adiw	r28, 0x01	; 1
    134a:	cf 30       	cpi	r28, 0x0F	; 15
    134c:	d1 05       	cpc	r29, r1
    134e:	c1 f7       	brne	.-16     	; 0x1340 <main+0x14a>
		{
			pca9685_brightness(PCA9685,0,i);
		}
		
		//Sequence through turning one LED chip on, then off, and proceeding
		pca9685_brightness(PCA9685,1,3);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	63 e0       	ldi	r22, 0x03	; 3
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	99 d7       	rcall	.+3890   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,4);
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	64 e0       	ldi	r22, 0x04	; 4
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	94 d7       	rcall	.+3880   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,5);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	65 e0       	ldi	r22, 0x05	; 5
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	8f d7       	rcall	.+3870   	; 0x228c <__data_load_end+0x3ca>
    136e:	c8 01       	movw	r24, r16
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <main+0x17a>
    1374:	c8 01       	movw	r24, r16
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <main+0x180>
    137a:	c8 01       	movw	r24, r16
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <main+0x186>
    1380:	c8 01       	movw	r24, r16
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <main+0x18c>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,3);
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	63 e0       	ldi	r22, 0x03	; 3
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	7e d7       	rcall	.+3836   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,4);
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	64 e0       	ldi	r22, 0x04	; 4
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	79 d7       	rcall	.+3826   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,5);
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	65 e0       	ldi	r22, 0x05	; 5
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	74 d7       	rcall	.+3816   	; 0x228c <__data_load_end+0x3ca>
    13a4:	c8 01       	movw	r24, r16
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	f1 f7       	brne	.-4      	; 0x13a6 <main+0x1b0>
    13aa:	c8 01       	movw	r24, r16
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <main+0x1b6>
    13b0:	c8 01       	movw	r24, r16
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <main+0x1bc>
    13b6:	c8 01       	movw	r24, r16
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <main+0x1c2>
    13bc:	c8 01       	movw	r24, r16
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <main+0x1c8>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		
		pca9685_brightness(PCA9685,1,0);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	60 d7       	rcall	.+3776   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,1);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	5b d7       	rcall	.+3766   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,2);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	62 e0       	ldi	r22, 0x02	; 2
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	56 d7       	rcall	.+3756   	; 0x228c <__data_load_end+0x3ca>
    13e0:	c8 01       	movw	r24, r16
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <main+0x1ec>
    13e6:	c8 01       	movw	r24, r16
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <main+0x1f2>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,0);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	4b d7       	rcall	.+3734   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,1);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	46 d7       	rcall	.+3724   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,2);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	62 e0       	ldi	r22, 0x02	; 2
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	41 d7       	rcall	.+3714   	; 0x228c <__data_load_end+0x3ca>
    140a:	c8 01       	movw	r24, r16
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <main+0x216>
    1410:	c8 01       	movw	r24, r16
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <main+0x21c>
    1416:	c8 01       	movw	r24, r16
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <main+0x222>
    141c:	c8 01       	movw	r24, r16
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <main+0x228>
    1422:	c8 01       	movw	r24, r16
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <main+0x22e>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay

		pca9685_brightness(PCA9685,1,6);
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	66 e0       	ldi	r22, 0x06	; 6
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	2d d7       	rcall	.+3674   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,7);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	67 e0       	ldi	r22, 0x07	; 7
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	28 d7       	rcall	.+3664   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,8);
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	68 e0       	ldi	r22, 0x08	; 8
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	23 d7       	rcall	.+3654   	; 0x228c <__data_load_end+0x3ca>
    1446:	c8 01       	movw	r24, r16
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <main+0x252>
    144c:	c8 01       	movw	r24, r16
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <main+0x258>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,6);
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	66 e0       	ldi	r22, 0x06	; 6
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	18 d7       	rcall	.+3632   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,7);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	67 e0       	ldi	r22, 0x07	; 7
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	13 d7       	rcall	.+3622   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,8);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	68 e0       	ldi	r22, 0x08	; 8
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	0e d7       	rcall	.+3612   	; 0x228c <__data_load_end+0x3ca>
    1470:	c8 01       	movw	r24, r16
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <main+0x27c>
    1476:	c8 01       	movw	r24, r16
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <main+0x282>
    147c:	c8 01       	movw	r24, r16
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <main+0x288>
    1482:	c8 01       	movw	r24, r16
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <main+0x28e>
    1488:	c8 01       	movw	r24, r16
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <main+0x294>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay


		pca9685_brightness(PCA9685,1,9);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	69 e0       	ldi	r22, 0x09	; 9
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	fa d6       	rcall	.+3572   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,10);
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	6a e0       	ldi	r22, 0x0A	; 10
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	f5 d6       	rcall	.+3562   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,11);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	6b e0       	ldi	r22, 0x0B	; 11
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	f0 d6       	rcall	.+3552   	; 0x228c <__data_load_end+0x3ca>
    14ac:	c8 01       	movw	r24, r16
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <main+0x2b8>
    14b2:	c8 01       	movw	r24, r16
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <main+0x2be>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,9);
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	69 e0       	ldi	r22, 0x09	; 9
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	e5 d6       	rcall	.+3530   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,10);
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	6a e0       	ldi	r22, 0x0A	; 10
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	e0 d6       	rcall	.+3520   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,11);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	6b e0       	ldi	r22, 0x0B	; 11
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	db d6       	rcall	.+3510   	; 0x228c <__data_load_end+0x3ca>
    14d6:	c8 01       	movw	r24, r16
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <main+0x2e2>
    14dc:	c8 01       	movw	r24, r16
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <main+0x2e8>
    14e2:	c8 01       	movw	r24, r16
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <main+0x2ee>
    14e8:	c8 01       	movw	r24, r16
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <main+0x2f4>
    14ee:	c8 01       	movw	r24, r16
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <main+0x2fa>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay


		pca9685_brightness(PCA9685,1,12);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	6c e0       	ldi	r22, 0x0C	; 12
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	c7 d6       	rcall	.+3470   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,13);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	6d e0       	ldi	r22, 0x0D	; 13
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	c2 d6       	rcall	.+3460   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,14);
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	6e e0       	ldi	r22, 0x0E	; 14
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	bd d6       	rcall	.+3450   	; 0x228c <__data_load_end+0x3ca>
    1512:	c8 01       	movw	r24, r16
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <main+0x31e>
    1518:	c8 01       	movw	r24, r16
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	f1 f7       	brne	.-4      	; 0x151a <main+0x324>
    151e:	c8 01       	movw	r24, r16
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <main+0x32a>
    1524:	c8 01       	movw	r24, r16
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <main+0x330>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,12);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	6c e0       	ldi	r22, 0x0C	; 12
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	ac d6       	rcall	.+3416   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,13);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	6d e0       	ldi	r22, 0x0D	; 13
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	a7 d6       	rcall	.+3406   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,14);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	6e e0       	ldi	r22, 0x0E	; 14
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	a2 d6       	rcall	.+3396   	; 0x228c <__data_load_end+0x3ca>
    1548:	c8 01       	movw	r24, r16
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <main+0x354>
    154e:	c8 01       	movw	r24, r16
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <main+0x35a>
    1554:	c8 01       	movw	r24, r16
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	f1 f7       	brne	.-4      	; 0x1556 <main+0x360>
    155a:	c8 01       	movw	r24, r16
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <main+0x366>
    1560:	c8 01       	movw	r24, r16
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <main+0x36c>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		
		
		pca9685_brightness(PCA9685,1,9);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	69 e0       	ldi	r22, 0x09	; 9
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	8e d6       	rcall	.+3356   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,10);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	6a e0       	ldi	r22, 0x0A	; 10
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	89 d6       	rcall	.+3346   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,11);
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	6b e0       	ldi	r22, 0x0B	; 11
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	84 d6       	rcall	.+3336   	; 0x228c <__data_load_end+0x3ca>
    1584:	c8 01       	movw	r24, r16
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <main+0x390>
    158a:	c8 01       	movw	r24, r16
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <main+0x396>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,9);
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	69 e0       	ldi	r22, 0x09	; 9
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	79 d6       	rcall	.+3314   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,10);
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	6a e0       	ldi	r22, 0x0A	; 10
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	74 d6       	rcall	.+3304   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,11);
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	6b e0       	ldi	r22, 0x0B	; 11
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	6f d6       	rcall	.+3294   	; 0x228c <__data_load_end+0x3ca>
    15ae:	c8 01       	movw	r24, r16
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <main+0x3ba>
    15b4:	c8 01       	movw	r24, r16
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <main+0x3c0>
    15ba:	c8 01       	movw	r24, r16
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <main+0x3c6>
    15c0:	c8 01       	movw	r24, r16
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <main+0x3cc>
    15c6:	c8 01       	movw	r24, r16
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <main+0x3d2>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		
		
		pca9685_brightness(PCA9685,1,6);
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	66 e0       	ldi	r22, 0x06	; 6
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	5b d6       	rcall	.+3254   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,7);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	67 e0       	ldi	r22, 0x07	; 7
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	56 d6       	rcall	.+3244   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,8);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	68 e0       	ldi	r22, 0x08	; 8
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	51 d6       	rcall	.+3234   	; 0x228c <__data_load_end+0x3ca>
    15ea:	c8 01       	movw	r24, r16
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <main+0x3f6>
    15f0:	c8 01       	movw	r24, r16
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <main+0x3fc>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,6);
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	66 e0       	ldi	r22, 0x06	; 6
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	46 d6       	rcall	.+3212   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,7);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	67 e0       	ldi	r22, 0x07	; 7
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	41 d6       	rcall	.+3202   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,8);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	68 e0       	ldi	r22, 0x08	; 8
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	3c d6       	rcall	.+3192   	; 0x228c <__data_load_end+0x3ca>
    1614:	c8 01       	movw	r24, r16
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <main+0x420>
    161a:	c8 01       	movw	r24, r16
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <main+0x426>
    1620:	c8 01       	movw	r24, r16
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <main+0x42c>
    1626:	c8 01       	movw	r24, r16
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <main+0x432>
    162c:	c8 01       	movw	r24, r16
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <main+0x438>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		
		
		pca9685_brightness(PCA9685,1,0);
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	28 d6       	rcall	.+3152   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,1);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	23 d6       	rcall	.+3142   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,1,2);
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	62 e0       	ldi	r22, 0x02	; 2
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	1e d6       	rcall	.+3132   	; 0x228c <__data_load_end+0x3ca>
    1650:	c8 01       	movw	r24, r16
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <main+0x45c>
    1656:	c8 01       	movw	r24, r16
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <main+0x462>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		pca9685_brightness(PCA9685,0,0);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	13 d6       	rcall	.+3110   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,1);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	0e d6       	rcall	.+3100   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,2);
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	62 e0       	ldi	r22, 0x02	; 2
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	09 d6       	rcall	.+3090   	; 0x228c <__data_load_end+0x3ca>
    167a:	c8 01       	movw	r24, r16
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <main+0x486>
    1680:	c8 01       	movw	r24, r16
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <main+0x48c>
    1686:	c8 01       	movw	r24, r16
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <main+0x492>
    168c:	c8 01       	movw	r24, r16
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <main+0x498>
    1692:	c8 01       	movw	r24, r16
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <main+0x49e>
    1698:	92 e0       	ldi	r25, 0x02	; 2
    169a:	b9 2e       	mov	r11, r25
    169c:	cc cd       	rjmp	.-1128   	; 0x1236 <main+0x40>

		}
		
		
	}
	else if(modeStatus == 1)
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	b8 16       	cp	r11, r24
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <main+0x4b0>
    16a4:	27 c1       	rjmp	.+590    	; 0x18f4 <main+0x6fe>
    16a6:	c0 e0       	ldi	r28, 0x00	; 0
    16a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		// Blink Red
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,20,i);
    16aa:	84 e1       	ldi	r24, 0x14	; 20
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	be 01       	movw	r22, r28
    16b0:	ed d5       	rcall	.+3034   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    16b2:	be 01       	movw	r22, r28
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
		
		// Blink Red
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,20,i);
			pca9685_brightness(PCA9685,0,i+1);
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	e7 d5       	rcall	.+3022   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    16be:	be 01       	movw	r22, r28
    16c0:	6e 5f       	subi	r22, 0xFE	; 254
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
		// Blink Red
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,20,i);
			pca9685_brightness(PCA9685,0,i+1);
			pca9685_brightness(PCA9685,0,i+2);
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	e1 d5       	rcall	.+3010   	; 0x228c <__data_load_end+0x3ca>
	}
	else if(modeStatus == 1)
	{
		
		// Blink Red
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    16ca:	23 96       	adiw	r28, 0x03	; 3
    16cc:	cf 30       	cpi	r28, 0x0F	; 15
    16ce:	d1 05       	cpc	r29, r1
    16d0:	61 f7       	brne	.-40     	; 0x16aa <main+0x4b4>
    16d2:	c7 01       	movw	r24, r14
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <main+0x4de>
    16d8:	c7 01       	movw	r24, r14
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <main+0x4e4>
    16de:	c7 01       	movw	r24, r14
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <main+0x4ea>
    16e4:	c7 01       	movw	r24, r14
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <main+0x4f0>
    16ea:	c7 01       	movw	r24, r14
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <main+0x4f6>
    16f0:	c7 01       	movw	r24, r14
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <main+0x4fc>
    16f6:	c7 01       	movw	r24, r14
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <main+0x502>
    16fc:	c7 01       	movw	r24, r14
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	f1 f7       	brne	.-4      	; 0x16fe <main+0x508>
    1702:	c7 01       	movw	r24, r14
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <main+0x50e>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    1708:	c0 e0       	ldi	r28, 0x00	; 0
    170a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pca9685_brightness(PCA9685,0,i);
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	be 01       	movw	r22, r28
    1712:	bc d5       	rcall	.+2936   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1714:	be 01       	movw	r22, r28
    1716:	6f 5f       	subi	r22, 0xFF	; 255
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	b6 d5       	rcall	.+2924   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1720:	be 01       	movw	r22, r28
    1722:	6e 5f       	subi	r22, 0xFE	; 254
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
			pca9685_brightness(PCA9685,0,i+2);
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	b0 d5       	rcall	.+2912   	; 0x228c <__data_load_end+0x3ca>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    172c:	23 96       	adiw	r28, 0x03	; 3
    172e:	cf 30       	cpi	r28, 0x0F	; 15
    1730:	d1 05       	cpc	r29, r1
    1732:	61 f7       	brne	.-40     	; 0x170c <main+0x516>
    1734:	c7 01       	movw	r24, r14
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <main+0x540>
    173a:	c7 01       	movw	r24, r14
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <main+0x546>
    1740:	c7 01       	movw	r24, r14
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <main+0x54c>
    1746:	c7 01       	movw	r24, r14
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <main+0x552>
    174c:	c7 01       	movw	r24, r14
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <main+0x558>
    1752:	c7 01       	movw	r24, r14
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <main+0x55e>
    1758:	c7 01       	movw	r24, r14
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <main+0x564>
    175e:	c7 01       	movw	r24, r14
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <main+0x56a>
    1764:	c7 01       	movw	r24, r14
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <main+0x570>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		// Blink Blue
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    176a:	c0 e0       	ldi	r28, 0x00	; 0
    176c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pca9685_brightness(PCA9685,0,i);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	be 01       	movw	r22, r28
    1774:	8b d5       	rcall	.+2838   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1776:	be 01       	movw	r22, r28
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
		
		// Blink Blue
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,20,i+1);
    177c:	84 e1       	ldi	r24, 0x14	; 20
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	85 d5       	rcall	.+2826   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1782:	be 01       	movw	r22, r28
    1784:	6e 5f       	subi	r22, 0xFE	; 254
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
		// Blink Blue
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,20,i+1);
			pca9685_brightness(PCA9685,0,i+2);
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	7f d5       	rcall	.+2814   	; 0x228c <__data_load_end+0x3ca>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		// Blink Blue
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    178e:	23 96       	adiw	r28, 0x03	; 3
    1790:	cf 30       	cpi	r28, 0x0F	; 15
    1792:	d1 05       	cpc	r29, r1
    1794:	61 f7       	brne	.-40     	; 0x176e <main+0x578>
    1796:	c7 01       	movw	r24, r14
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <main+0x5a2>
    179c:	c7 01       	movw	r24, r14
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <main+0x5a8>
    17a2:	c7 01       	movw	r24, r14
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <main+0x5ae>
    17a8:	c7 01       	movw	r24, r14
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <main+0x5b4>
    17ae:	c7 01       	movw	r24, r14
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <main+0x5ba>
    17b4:	c7 01       	movw	r24, r14
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <main+0x5c0>
    17ba:	c7 01       	movw	r24, r14
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <main+0x5c6>
    17c0:	c7 01       	movw	r24, r14
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <main+0x5cc>
    17c6:	c7 01       	movw	r24, r14
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <main+0x5d2>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay


		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    17cc:	c0 e0       	ldi	r28, 0x00	; 0
    17ce:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pca9685_brightness(PCA9685,0,i);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	be 01       	movw	r22, r28
    17d6:	5a d5       	rcall	.+2740   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    17d8:	be 01       	movw	r22, r28
    17da:	6f 5f       	subi	r22, 0xFF	; 255
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255


		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	54 d5       	rcall	.+2728   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    17e4:	be 01       	movw	r22, r28
    17e6:	6e 5f       	subi	r22, 0xFE	; 254
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255

		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
			pca9685_brightness(PCA9685,0,i+2);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	4e d5       	rcall	.+2716   	; 0x228c <__data_load_end+0x3ca>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay


		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    17f0:	23 96       	adiw	r28, 0x03	; 3
    17f2:	cf 30       	cpi	r28, 0x0F	; 15
    17f4:	d1 05       	cpc	r29, r1
    17f6:	61 f7       	brne	.-40     	; 0x17d0 <main+0x5da>
    17f8:	c7 01       	movw	r24, r14
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <main+0x604>
    17fe:	c7 01       	movw	r24, r14
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <main+0x60a>
    1804:	c7 01       	movw	r24, r14
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <main+0x610>
    180a:	c7 01       	movw	r24, r14
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <main+0x616>
    1810:	c7 01       	movw	r24, r14
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <main+0x61c>
    1816:	c7 01       	movw	r24, r14
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <main+0x622>
    181c:	c7 01       	movw	r24, r14
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <main+0x628>
    1822:	c7 01       	movw	r24, r14
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <main+0x62e>
    1828:	c7 01       	movw	r24, r14
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <main+0x634>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay

		// Blink Green
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    182e:	c0 e0       	ldi	r28, 0x00	; 0
    1830:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pca9685_brightness(PCA9685,0,i);
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	be 01       	movw	r22, r28
    1838:	29 d5       	rcall	.+2642   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    183a:	be 01       	movw	r22, r28
    183c:	6f 5f       	subi	r22, 0xFF	; 255
    183e:	7f 4f       	sbci	r23, 0xFF	; 255

		// Blink Green
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	23 d5       	rcall	.+2630   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1846:	be 01       	movw	r22, r28
    1848:	6e 5f       	subi	r22, 0xFE	; 254
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
		// Blink Green
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
			pca9685_brightness(PCA9685,20,i+2);
    184c:	84 e1       	ldi	r24, 0x14	; 20
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	1d d5       	rcall	.+2618   	; 0x228c <__data_load_end+0x3ca>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay

		// Blink Green
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    1852:	23 96       	adiw	r28, 0x03	; 3
    1854:	cf 30       	cpi	r28, 0x0F	; 15
    1856:	d1 05       	cpc	r29, r1
    1858:	61 f7       	brne	.-40     	; 0x1832 <main+0x63c>
    185a:	c7 01       	movw	r24, r14
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <main+0x666>
    1860:	c7 01       	movw	r24, r14
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <main+0x66c>
    1866:	c7 01       	movw	r24, r14
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <main+0x672>
    186c:	c7 01       	movw	r24, r14
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <main+0x678>
    1872:	c7 01       	movw	r24, r14
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0x67e>
    1878:	c7 01       	movw	r24, r14
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <main+0x684>
    187e:	c7 01       	movw	r24, r14
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <main+0x68a>
    1884:	c7 01       	movw	r24, r14
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	f1 f7       	brne	.-4      	; 0x1886 <main+0x690>
    188a:	c7 01       	movw	r24, r14
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <main+0x696>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay


		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    1890:	c0 e0       	ldi	r28, 0x00	; 0
    1892:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pca9685_brightness(PCA9685,0,i);
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	be 01       	movw	r22, r28
    189a:	f8 d4       	rcall	.+2544   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    189c:	be 01       	movw	r22, r28
    189e:	6f 5f       	subi	r22, 0xFF	; 255
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255


		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	f2 d4       	rcall	.+2532   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    18a8:	be 01       	movw	r22, r28
    18aa:	6e 5f       	subi	r22, 0xFE	; 254
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255

		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
			pca9685_brightness(PCA9685,0,i+2);
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	ec d4       	rcall	.+2520   	; 0x228c <__data_load_end+0x3ca>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay


		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    18b4:	23 96       	adiw	r28, 0x03	; 3
    18b6:	cf 30       	cpi	r28, 0x0F	; 15
    18b8:	d1 05       	cpc	r29, r1
    18ba:	61 f7       	brne	.-40     	; 0x1894 <main+0x69e>
    18bc:	c7 01       	movw	r24, r14
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <main+0x6c8>
    18c2:	c7 01       	movw	r24, r14
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <main+0x6ce>
    18c8:	c7 01       	movw	r24, r14
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <main+0x6d4>
    18ce:	c7 01       	movw	r24, r14
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <main+0x6da>
    18d4:	c7 01       	movw	r24, r14
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <main+0x6e0>
    18da:	c7 01       	movw	r24, r14
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <main+0x6e6>
    18e0:	c7 01       	movw	r24, r14
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <main+0x6ec>
    18e6:	c7 01       	movw	r24, r14
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <main+0x6f2>
    18ec:	c7 01       	movw	r24, r14
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <main+0x6f8>
    18f2:	a1 cc       	rjmp	.-1726   	; 0x1236 <main+0x40>
		
		
		
		
	}
	else if(modeStatus == 2)
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	b8 16       	cp	r11, r24
    18f8:	09 f4       	brne	.+2      	; 0x18fc <main+0x706>
    18fa:	20 cd       	rjmp	.-1472   	; 0x133c <main+0x146>
		_delay_loop_2(10000);           // delay
		
		
		
	}
	else if(modeStatus == 3)
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	b8 16       	cp	r11, r24
    1900:	09 f4       	brne	.+2      	; 0x1904 <main+0x70e>
    1902:	85 c0       	rjmp	.+266    	; 0x1a0e <main+0x818>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
	}
	else if(modeStatus == 4)
    1904:	84 e0       	ldi	r24, 0x04	; 4
    1906:	b8 16       	cp	r11, r24
    1908:	09 f4       	brne	.+2      	; 0x190c <main+0x716>
    190a:	da c0       	rjmp	.+436    	; 0x1ac0 <main+0x8ca>
	
	
	
	
	
	else if(modeStatus == 5)
    190c:	85 e0       	ldi	r24, 0x05	; 5
    190e:	b8 16       	cp	r11, r24
    1910:	09 f0       	breq	.+2      	; 0x1914 <main+0x71e>
    1912:	91 cc       	rjmp	.-1758   	; 0x1236 <main+0x40>
	{
		
		// Randomish colors
		
		pca9685_brightness(PCA9685,2,0); // 1
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	b7 d4       	rcall	.+2414   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,5,1); // 2
    191e:	85 e0       	ldi	r24, 0x05	; 5
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	b2 d4       	rcall	.+2404   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,2); // 3
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	62 e0       	ldi	r22, 0x02	; 2
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	ad d4       	rcall	.+2394   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,5,3); // 4
    1932:	85 e0       	ldi	r24, 0x05	; 5
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	63 e0       	ldi	r22, 0x03	; 3
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	a8 d4       	rcall	.+2384   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,4); // 5
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	64 e0       	ldi	r22, 0x04	; 4
    1942:	70 e0       	ldi	r23, 0x00	; 0
    1944:	a3 d4       	rcall	.+2374   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,5,5); // 1
    1946:	85 e0       	ldi	r24, 0x05	; 5
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	65 e0       	ldi	r22, 0x05	; 5
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	9e d4       	rcall	.+2364   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,6); // 2
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	66 e0       	ldi	r22, 0x06	; 6
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	99 d4       	rcall	.+2354   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,5,7); // 3
    195a:	85 e0       	ldi	r24, 0x05	; 5
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	67 e0       	ldi	r22, 0x07	; 7
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	94 d4       	rcall	.+2344   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,8); // 4
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	68 e0       	ldi	r22, 0x08	; 8
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	8f d4       	rcall	.+2334   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,5,9); // 5
    196e:	85 e0       	ldi	r24, 0x05	; 5
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	69 e0       	ldi	r22, 0x09	; 9
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	8a d4       	rcall	.+2324   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,10); // 1
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	6a e0       	ldi	r22, 0x0A	; 10
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	85 d4       	rcall	.+2314   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,5,11); // 2
    1982:	85 e0       	ldi	r24, 0x05	; 5
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	6b e0       	ldi	r22, 0x0B	; 11
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	80 d4       	rcall	.+2304   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,2,12); // 3
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	6c e0       	ldi	r22, 0x0C	; 12
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	7b d4       	rcall	.+2294   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,13); // 4
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	6d e0       	ldi	r22, 0x0D	; 13
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	76 d4       	rcall	.+2284   	; 0x228c <__data_load_end+0x3ca>
		pca9685_brightness(PCA9685,0,14); // 5
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	6e e0       	ldi	r22, 0x0E	; 14
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	71 d4       	rcall	.+2274   	; 0x228c <__data_load_end+0x3ca>
    19aa:	c7 01       	movw	r24, r14
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <main+0x7b6>
    19b0:	c7 01       	movw	r24, r14
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <main+0x7bc>
    19b6:	c7 01       	movw	r24, r14
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <main+0x7c2>
    19bc:	c7 01       	movw	r24, r14
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <main+0x7c8>
    19c2:	c7 01       	movw	r24, r14
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <main+0x7ce>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    19c8:	c0 e0       	ldi	r28, 0x00	; 0
    19ca:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pca9685_brightness(PCA9685,0,i);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	be 01       	movw	r22, r28
    19d2:	5c d4       	rcall	.+2232   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    19d4:	be 01       	movw	r22, r28
    19d6:	6f 5f       	subi	r22, 0xFF	; 255
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	56 d4       	rcall	.+2220   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    19e0:	be 01       	movw	r22, r28
    19e2:	6e 5f       	subi	r22, 0xFE	; 254
    19e4:	7f 4f       	sbci	r23, 0xFF	; 255
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
			pca9685_brightness(PCA9685,0,i+2);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	50 d4       	rcall	.+2208   	; 0x228c <__data_load_end+0x3ca>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    19ec:	23 96       	adiw	r28, 0x03	; 3
    19ee:	cf 30       	cpi	r28, 0x0F	; 15
    19f0:	d1 05       	cpc	r29, r1
    19f2:	61 f7       	brne	.-40     	; 0x19cc <main+0x7d6>
    19f4:	c7 01       	movw	r24, r14
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <main+0x800>
    19fa:	c7 01       	movw	r24, r14
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <main+0x806>
    1a00:	c7 01       	movw	r24, r14
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <main+0x80c>
    1a06:	c7 01       	movw	r24, r14
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	f1 f7       	brne	.-4      	; 0x1a08 <main+0x812>
    1a0c:	57 cf       	rjmp	.-338    	; 0x18bc <main+0x6c6>
		_delay_loop_2(10000);           // delay
		
		
		
	}
	else if(modeStatus == 3)
    1a0e:	c1 e0       	ldi	r28, 0x01	; 1
    1a10:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		// Turn off all LEDs
		for(int i = 1; i <= LEDCOUNT - 1; i++)
		{
			pca9685_brightness(PCA9685,0,i);
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	be 01       	movw	r22, r28
    1a18:	39 d4       	rcall	.+2162   	; 0x228c <__data_load_end+0x3ca>
		
		// All LEDs off
		
		
		// Turn off all LEDs
		for(int i = 1; i <= LEDCOUNT - 1; i++)
    1a1a:	21 96       	adiw	r28, 0x01	; 1
    1a1c:	cf 30       	cpi	r28, 0x0F	; 15
    1a1e:	d1 05       	cpc	r29, r1
    1a20:	c1 f7       	brne	.-16     	; 0x1a12 <main+0x81c>
    1a22:	c8 01       	movw	r24, r16
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <main+0x82e>
    1a28:	c8 01       	movw	r24, r16
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <main+0x834>
    1a2e:	c8 01       	movw	r24, r16
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <main+0x83a>
    1a34:	c8 01       	movw	r24, r16
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <main+0x840>
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <main+0x846>
    1a40:	c8 01       	movw	r24, r16
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <main+0x84c>
    1a46:	c8 01       	movw	r24, r16
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <main+0x852>
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <main+0x858>
    1a52:	c8 01       	movw	r24, r16
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <main+0x85e>
    1a58:	c8 01       	movw	r24, r16
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <main+0x864>
    1a5e:	c8 01       	movw	r24, r16
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <main+0x86a>
    1a64:	c8 01       	movw	r24, r16
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <main+0x870>
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <main+0x876>
    1a70:	c8 01       	movw	r24, r16
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <main+0x87c>
    1a76:	c8 01       	movw	r24, r16
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <main+0x882>
    1a7c:	c8 01       	movw	r24, r16
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <main+0x888>
    1a82:	c8 01       	movw	r24, r16
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <main+0x88e>
    1a88:	c8 01       	movw	r24, r16
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	f1 f7       	brne	.-4      	; 0x1a8a <main+0x894>
    1a8e:	c8 01       	movw	r24, r16
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <main+0x89a>
    1a94:	c8 01       	movw	r24, r16
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <main+0x8a0>
    1a9a:	c8 01       	movw	r24, r16
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <main+0x8a6>
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <main+0x8ac>
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <main+0x8b2>
    1aac:	c8 01       	movw	r24, r16
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <main+0x8b8>
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <main+0x8be>
    1ab8:	c8 01       	movw	r24, r16
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <main+0x8c4>
    1abe:	bb cb       	rjmp	.-2186   	; 0x1236 <main+0x40>
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
		_delay_loop_2(10000);           // delay
	}
	else if(modeStatus == 4)
    1ac0:	c0 e0       	ldi	r28, 0x00	; 0
    1ac2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		// Blink all FULL POWER
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,100,i);
    1ac4:	84 e6       	ldi	r24, 0x64	; 100
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	be 01       	movw	r22, r28
    1aca:	e0 d3       	rcall	.+1984   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1acc:	be 01       	movw	r22, r28
    1ace:	6f 5f       	subi	r22, 0xFF	; 255
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
		
		// Blink all FULL POWER
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,100,i);
			pca9685_brightness(PCA9685,100,i+1);
    1ad2:	84 e6       	ldi	r24, 0x64	; 100
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	da d3       	rcall	.+1972   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1ad8:	be 01       	movw	r22, r28
    1ada:	6e 5f       	subi	r22, 0xFE	; 254
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
		// Blink all FULL POWER
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,100,i);
			pca9685_brightness(PCA9685,100,i+1);
			pca9685_brightness(PCA9685,100,i+2);
    1ade:	84 e6       	ldi	r24, 0x64	; 100
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	d4 d3       	rcall	.+1960   	; 0x228c <__data_load_end+0x3ca>
	}
	else if(modeStatus == 4)
	{
		
		// Blink all FULL POWER
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    1ae4:	23 96       	adiw	r28, 0x03	; 3
    1ae6:	cf 30       	cpi	r28, 0x0F	; 15
    1ae8:	d1 05       	cpc	r29, r1
    1aea:	61 f7       	brne	.-40     	; 0x1ac4 <main+0x8ce>
    1aec:	c7 01       	movw	r24, r14
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <main+0x8f8>
    1af2:	c7 01       	movw	r24, r14
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <main+0x8fe>
    1af8:	c7 01       	movw	r24, r14
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <main+0x904>
    1afe:	c7 01       	movw	r24, r14
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <main+0x90a>
    1b04:	c7 01       	movw	r24, r14
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <main+0x910>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    1b0a:	c0 e0       	ldi	r28, 0x00	; 0
    1b0c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pca9685_brightness(PCA9685,0,i);
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	be 01       	movw	r22, r28
    1b14:	bb d3       	rcall	.+1910   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1b16:	be 01       	movw	r22, r28
    1b18:	6f 5f       	subi	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	b5 d3       	rcall	.+1898   	; 0x228c <__data_load_end+0x3ca>
Purpose :   main code entry point
Input   :   n/a
Output  :   n/a
Notes   :
============================================================================*/
int main( void )
    1b22:	be 01       	movw	r22, r28
    1b24:	6e 5f       	subi	r22, 0xFE	; 254
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
		{
			pca9685_brightness(PCA9685,0,i);
			pca9685_brightness(PCA9685,0,i+1);
			pca9685_brightness(PCA9685,0,i+2);
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	af d3       	rcall	.+1886   	; 0x228c <__data_load_end+0x3ca>
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		_delay_loop_2(30000);           // delay
		
		for(int i = 0; i <= LEDCOUNT - 1; i = i+3)
    1b2e:	23 96       	adiw	r28, 0x03	; 3
    1b30:	cf 30       	cpi	r28, 0x0F	; 15
    1b32:	d1 05       	cpc	r29, r1
    1b34:	61 f7       	brne	.-40     	; 0x1b0e <main+0x918>
    1b36:	5e cf       	rjmp	.-324    	; 0x19f4 <main+0x7fe>

00001b38 <__fixsfsi>:
    1b38:	04 d0       	rcall	.+8      	; 0x1b42 <__fixunssfsi>
    1b3a:	68 94       	set
    1b3c:	b1 11       	cpse	r27, r1
    1b3e:	8d c0       	rjmp	.+282    	; 0x1c5a <__fp_szero>
    1b40:	08 95       	ret

00001b42 <__fixunssfsi>:
    1b42:	70 d0       	rcall	.+224    	; 0x1c24 <__fp_splitA>
    1b44:	88 f0       	brcs	.+34     	; 0x1b68 <__fixunssfsi+0x26>
    1b46:	9f 57       	subi	r25, 0x7F	; 127
    1b48:	90 f0       	brcs	.+36     	; 0x1b6e <__fixunssfsi+0x2c>
    1b4a:	b9 2f       	mov	r27, r25
    1b4c:	99 27       	eor	r25, r25
    1b4e:	b7 51       	subi	r27, 0x17	; 23
    1b50:	a0 f0       	brcs	.+40     	; 0x1b7a <__fixunssfsi+0x38>
    1b52:	d1 f0       	breq	.+52     	; 0x1b88 <__fixunssfsi+0x46>
    1b54:	66 0f       	add	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	1a f0       	brmi	.+6      	; 0x1b64 <__fixunssfsi+0x22>
    1b5e:	ba 95       	dec	r27
    1b60:	c9 f7       	brne	.-14     	; 0x1b54 <__fixunssfsi+0x12>
    1b62:	12 c0       	rjmp	.+36     	; 0x1b88 <__fixunssfsi+0x46>
    1b64:	b1 30       	cpi	r27, 0x01	; 1
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <__fixunssfsi+0x46>
    1b68:	77 d0       	rcall	.+238    	; 0x1c58 <__fp_zero>
    1b6a:	b1 e0       	ldi	r27, 0x01	; 1
    1b6c:	08 95       	ret
    1b6e:	74 c0       	rjmp	.+232    	; 0x1c58 <__fp_zero>
    1b70:	67 2f       	mov	r22, r23
    1b72:	78 2f       	mov	r23, r24
    1b74:	88 27       	eor	r24, r24
    1b76:	b8 5f       	subi	r27, 0xF8	; 248
    1b78:	39 f0       	breq	.+14     	; 0x1b88 <__fixunssfsi+0x46>
    1b7a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b7c:	cc f3       	brlt	.-14     	; 0x1b70 <__fixunssfsi+0x2e>
    1b7e:	86 95       	lsr	r24
    1b80:	77 95       	ror	r23
    1b82:	67 95       	ror	r22
    1b84:	b3 95       	inc	r27
    1b86:	d9 f7       	brne	.-10     	; 0x1b7e <__fixunssfsi+0x3c>
    1b88:	3e f4       	brtc	.+14     	; 0x1b98 <__fixunssfsi+0x56>
    1b8a:	90 95       	com	r25
    1b8c:	80 95       	com	r24
    1b8e:	70 95       	com	r23
    1b90:	61 95       	neg	r22
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	8f 4f       	sbci	r24, 0xFF	; 255
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	08 95       	ret

00001b9a <__floatunsisf>:
    1b9a:	e8 94       	clt
    1b9c:	09 c0       	rjmp	.+18     	; 0x1bb0 <__floatsisf+0x12>

00001b9e <__floatsisf>:
    1b9e:	97 fb       	bst	r25, 7
    1ba0:	3e f4       	brtc	.+14     	; 0x1bb0 <__floatsisf+0x12>
    1ba2:	90 95       	com	r25
    1ba4:	80 95       	com	r24
    1ba6:	70 95       	com	r23
    1ba8:	61 95       	neg	r22
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	8f 4f       	sbci	r24, 0xFF	; 255
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	99 23       	and	r25, r25
    1bb2:	a9 f0       	breq	.+42     	; 0x1bde <__floatsisf+0x40>
    1bb4:	f9 2f       	mov	r31, r25
    1bb6:	96 e9       	ldi	r25, 0x96	; 150
    1bb8:	bb 27       	eor	r27, r27
    1bba:	93 95       	inc	r25
    1bbc:	f6 95       	lsr	r31
    1bbe:	87 95       	ror	r24
    1bc0:	77 95       	ror	r23
    1bc2:	67 95       	ror	r22
    1bc4:	b7 95       	ror	r27
    1bc6:	f1 11       	cpse	r31, r1
    1bc8:	f8 cf       	rjmp	.-16     	; 0x1bba <__floatsisf+0x1c>
    1bca:	fa f4       	brpl	.+62     	; 0x1c0a <__floatsisf+0x6c>
    1bcc:	bb 0f       	add	r27, r27
    1bce:	11 f4       	brne	.+4      	; 0x1bd4 <__floatsisf+0x36>
    1bd0:	60 ff       	sbrs	r22, 0
    1bd2:	1b c0       	rjmp	.+54     	; 0x1c0a <__floatsisf+0x6c>
    1bd4:	6f 5f       	subi	r22, 0xFF	; 255
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bda:	9f 4f       	sbci	r25, 0xFF	; 255
    1bdc:	16 c0       	rjmp	.+44     	; 0x1c0a <__floatsisf+0x6c>
    1bde:	88 23       	and	r24, r24
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <__floatsisf+0x48>
    1be2:	96 e9       	ldi	r25, 0x96	; 150
    1be4:	11 c0       	rjmp	.+34     	; 0x1c08 <__floatsisf+0x6a>
    1be6:	77 23       	and	r23, r23
    1be8:	21 f0       	breq	.+8      	; 0x1bf2 <__floatsisf+0x54>
    1bea:	9e e8       	ldi	r25, 0x8E	; 142
    1bec:	87 2f       	mov	r24, r23
    1bee:	76 2f       	mov	r23, r22
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <__floatsisf+0x5e>
    1bf2:	66 23       	and	r22, r22
    1bf4:	71 f0       	breq	.+28     	; 0x1c12 <__floatsisf+0x74>
    1bf6:	96 e8       	ldi	r25, 0x86	; 134
    1bf8:	86 2f       	mov	r24, r22
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	2a f0       	brmi	.+10     	; 0x1c0a <__floatsisf+0x6c>
    1c00:	9a 95       	dec	r25
    1c02:	66 0f       	add	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	88 1f       	adc	r24, r24
    1c08:	da f7       	brpl	.-10     	; 0x1c00 <__floatsisf+0x62>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	96 95       	lsr	r25
    1c0e:	87 95       	ror	r24
    1c10:	97 f9       	bld	r25, 7
    1c12:	08 95       	ret

00001c14 <__fp_split3>:
    1c14:	57 fd       	sbrc	r21, 7
    1c16:	90 58       	subi	r25, 0x80	; 128
    1c18:	44 0f       	add	r20, r20
    1c1a:	55 1f       	adc	r21, r21
    1c1c:	59 f0       	breq	.+22     	; 0x1c34 <__fp_splitA+0x10>
    1c1e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c20:	71 f0       	breq	.+28     	; 0x1c3e <__fp_splitA+0x1a>
    1c22:	47 95       	ror	r20

00001c24 <__fp_splitA>:
    1c24:	88 0f       	add	r24, r24
    1c26:	97 fb       	bst	r25, 7
    1c28:	99 1f       	adc	r25, r25
    1c2a:	61 f0       	breq	.+24     	; 0x1c44 <__fp_splitA+0x20>
    1c2c:	9f 3f       	cpi	r25, 0xFF	; 255
    1c2e:	79 f0       	breq	.+30     	; 0x1c4e <__fp_splitA+0x2a>
    1c30:	87 95       	ror	r24
    1c32:	08 95       	ret
    1c34:	12 16       	cp	r1, r18
    1c36:	13 06       	cpc	r1, r19
    1c38:	14 06       	cpc	r1, r20
    1c3a:	55 1f       	adc	r21, r21
    1c3c:	f2 cf       	rjmp	.-28     	; 0x1c22 <__fp_split3+0xe>
    1c3e:	46 95       	lsr	r20
    1c40:	f1 df       	rcall	.-30     	; 0x1c24 <__fp_splitA>
    1c42:	08 c0       	rjmp	.+16     	; 0x1c54 <__fp_splitA+0x30>
    1c44:	16 16       	cp	r1, r22
    1c46:	17 06       	cpc	r1, r23
    1c48:	18 06       	cpc	r1, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	f1 cf       	rjmp	.-30     	; 0x1c30 <__fp_splitA+0xc>
    1c4e:	86 95       	lsr	r24
    1c50:	71 05       	cpc	r23, r1
    1c52:	61 05       	cpc	r22, r1
    1c54:	08 94       	sec
    1c56:	08 95       	ret

00001c58 <__fp_zero>:
    1c58:	e8 94       	clt

00001c5a <__fp_szero>:
    1c5a:	bb 27       	eor	r27, r27
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	cb 01       	movw	r24, r22
    1c62:	97 f9       	bld	r25, 7
    1c64:	08 95       	ret

00001c66 <__mulsf3>:
    1c66:	0a d0       	rcall	.+20     	; 0x1c7c <__mulsf3x>
    1c68:	80 c0       	rjmp	.+256    	; 0x1d6a <__fp_round>
    1c6a:	71 d0       	rcall	.+226    	; 0x1d4e <__fp_pscA>
    1c6c:	28 f0       	brcs	.+10     	; 0x1c78 <__mulsf3+0x12>
    1c6e:	76 d0       	rcall	.+236    	; 0x1d5c <__fp_pscB>
    1c70:	18 f0       	brcs	.+6      	; 0x1c78 <__mulsf3+0x12>
    1c72:	95 23       	and	r25, r21
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <__mulsf3+0x12>
    1c76:	62 c0       	rjmp	.+196    	; 0x1d3c <__fp_inf>
    1c78:	67 c0       	rjmp	.+206    	; 0x1d48 <__fp_nan>
    1c7a:	ef cf       	rjmp	.-34     	; 0x1c5a <__fp_szero>

00001c7c <__mulsf3x>:
    1c7c:	cb df       	rcall	.-106    	; 0x1c14 <__fp_split3>
    1c7e:	a8 f3       	brcs	.-22     	; 0x1c6a <__mulsf3+0x4>

00001c80 <__mulsf3_pse>:
    1c80:	99 23       	and	r25, r25
    1c82:	d9 f3       	breq	.-10     	; 0x1c7a <__mulsf3+0x14>
    1c84:	55 23       	and	r21, r21
    1c86:	c9 f3       	breq	.-14     	; 0x1c7a <__mulsf3+0x14>
    1c88:	95 0f       	add	r25, r21
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	55 1f       	adc	r21, r21
    1c8e:	aa 27       	eor	r26, r26
    1c90:	ee 27       	eor	r30, r30
    1c92:	ff 27       	eor	r31, r31
    1c94:	bb 27       	eor	r27, r27
    1c96:	00 24       	eor	r0, r0
    1c98:	08 94       	sec
    1c9a:	67 95       	ror	r22
    1c9c:	20 f4       	brcc	.+8      	; 0x1ca6 <__mulsf3_pse+0x26>
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	b4 1f       	adc	r27, r20
    1ca4:	0a 1e       	adc	r0, r26
    1ca6:	22 0f       	add	r18, r18
    1ca8:	33 1f       	adc	r19, r19
    1caa:	44 1f       	adc	r20, r20
    1cac:	aa 1f       	adc	r26, r26
    1cae:	66 95       	lsr	r22
    1cb0:	a9 f7       	brne	.-22     	; 0x1c9c <__mulsf3_pse+0x1c>
    1cb2:	77 95       	ror	r23
    1cb4:	30 f4       	brcc	.+12     	; 0x1cc2 <__mulsf3_pse+0x42>
    1cb6:	f3 0f       	add	r31, r19
    1cb8:	b4 1f       	adc	r27, r20
    1cba:	0a 1e       	adc	r0, r26
    1cbc:	12 1e       	adc	r1, r18
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <__mulsf3_pse+0x42>
    1cc0:	63 95       	inc	r22
    1cc2:	33 0f       	add	r19, r19
    1cc4:	44 1f       	adc	r20, r20
    1cc6:	aa 1f       	adc	r26, r26
    1cc8:	22 1f       	adc	r18, r18
    1cca:	76 95       	lsr	r23
    1ccc:	99 f7       	brne	.-26     	; 0x1cb4 <__mulsf3_pse+0x34>
    1cce:	87 95       	ror	r24
    1cd0:	20 f4       	brcc	.+8      	; 0x1cda <__mulsf3_pse+0x5a>
    1cd2:	b4 0f       	add	r27, r20
    1cd4:	0a 1e       	adc	r0, r26
    1cd6:	12 1e       	adc	r1, r18
    1cd8:	63 1f       	adc	r22, r19
    1cda:	44 0f       	add	r20, r20
    1cdc:	aa 1f       	adc	r26, r26
    1cde:	22 1f       	adc	r18, r18
    1ce0:	33 1f       	adc	r19, r19
    1ce2:	86 95       	lsr	r24
    1ce4:	a9 f7       	brne	.-22     	; 0x1cd0 <__mulsf3_pse+0x50>
    1ce6:	86 2f       	mov	r24, r22
    1ce8:	71 2d       	mov	r23, r1
    1cea:	60 2d       	mov	r22, r0
    1cec:	11 24       	eor	r1, r1
    1cee:	9f 57       	subi	r25, 0x7F	; 127
    1cf0:	50 40       	sbci	r21, 0x00	; 0
    1cf2:	8a f0       	brmi	.+34     	; 0x1d16 <__mulsf3_pse+0x96>
    1cf4:	e1 f0       	breq	.+56     	; 0x1d2e <__mulsf3_pse+0xae>
    1cf6:	88 23       	and	r24, r24
    1cf8:	4a f0       	brmi	.+18     	; 0x1d0c <__mulsf3_pse+0x8c>
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	bb 1f       	adc	r27, r27
    1d00:	66 1f       	adc	r22, r22
    1d02:	77 1f       	adc	r23, r23
    1d04:	88 1f       	adc	r24, r24
    1d06:	91 50       	subi	r25, 0x01	; 1
    1d08:	50 40       	sbci	r21, 0x00	; 0
    1d0a:	a9 f7       	brne	.-22     	; 0x1cf6 <__mulsf3_pse+0x76>
    1d0c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d0e:	51 05       	cpc	r21, r1
    1d10:	70 f0       	brcs	.+28     	; 0x1d2e <__mulsf3_pse+0xae>
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <__fp_inf>
    1d14:	a2 cf       	rjmp	.-188    	; 0x1c5a <__fp_szero>
    1d16:	5f 3f       	cpi	r21, 0xFF	; 255
    1d18:	ec f3       	brlt	.-6      	; 0x1d14 <__mulsf3_pse+0x94>
    1d1a:	98 3e       	cpi	r25, 0xE8	; 232
    1d1c:	dc f3       	brlt	.-10     	; 0x1d14 <__mulsf3_pse+0x94>
    1d1e:	86 95       	lsr	r24
    1d20:	77 95       	ror	r23
    1d22:	67 95       	ror	r22
    1d24:	b7 95       	ror	r27
    1d26:	f7 95       	ror	r31
    1d28:	e7 95       	ror	r30
    1d2a:	9f 5f       	subi	r25, 0xFF	; 255
    1d2c:	c1 f7       	brne	.-16     	; 0x1d1e <__mulsf3_pse+0x9e>
    1d2e:	fe 2b       	or	r31, r30
    1d30:	88 0f       	add	r24, r24
    1d32:	91 1d       	adc	r25, r1
    1d34:	96 95       	lsr	r25
    1d36:	87 95       	ror	r24
    1d38:	97 f9       	bld	r25, 7
    1d3a:	08 95       	ret

00001d3c <__fp_inf>:
    1d3c:	97 f9       	bld	r25, 7
    1d3e:	9f 67       	ori	r25, 0x7F	; 127
    1d40:	80 e8       	ldi	r24, 0x80	; 128
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	08 95       	ret

00001d48 <__fp_nan>:
    1d48:	9f ef       	ldi	r25, 0xFF	; 255
    1d4a:	80 ec       	ldi	r24, 0xC0	; 192
    1d4c:	08 95       	ret

00001d4e <__fp_pscA>:
    1d4e:	00 24       	eor	r0, r0
    1d50:	0a 94       	dec	r0
    1d52:	16 16       	cp	r1, r22
    1d54:	17 06       	cpc	r1, r23
    1d56:	18 06       	cpc	r1, r24
    1d58:	09 06       	cpc	r0, r25
    1d5a:	08 95       	ret

00001d5c <__fp_pscB>:
    1d5c:	00 24       	eor	r0, r0
    1d5e:	0a 94       	dec	r0
    1d60:	12 16       	cp	r1, r18
    1d62:	13 06       	cpc	r1, r19
    1d64:	14 06       	cpc	r1, r20
    1d66:	05 06       	cpc	r0, r21
    1d68:	08 95       	ret

00001d6a <__fp_round>:
    1d6a:	09 2e       	mov	r0, r25
    1d6c:	03 94       	inc	r0
    1d6e:	00 0c       	add	r0, r0
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <__fp_round+0xc>
    1d72:	88 23       	and	r24, r24
    1d74:	52 f0       	brmi	.+20     	; 0x1d8a <__fp_round+0x20>
    1d76:	bb 0f       	add	r27, r27
    1d78:	40 f4       	brcc	.+16     	; 0x1d8a <__fp_round+0x20>
    1d7a:	bf 2b       	or	r27, r31
    1d7c:	11 f4       	brne	.+4      	; 0x1d82 <__fp_round+0x18>
    1d7e:	60 ff       	sbrs	r22, 0
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <__fp_round+0x20>
    1d82:	6f 5f       	subi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	08 95       	ret

00001d8c <__mulhi3>:
    1d8c:	55 27       	eor	r21, r21
    1d8e:	00 24       	eor	r0, r0

00001d90 <__mulhi3_loop>:
    1d90:	80 ff       	sbrs	r24, 0
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <__mulhi3_skip1>
    1d94:	06 0e       	add	r0, r22
    1d96:	57 1f       	adc	r21, r23

00001d98 <__mulhi3_skip1>:
    1d98:	66 0f       	add	r22, r22
    1d9a:	77 1f       	adc	r23, r23
    1d9c:	61 15       	cp	r22, r1
    1d9e:	71 05       	cpc	r23, r1
    1da0:	21 f0       	breq	.+8      	; 0x1daa <__mulhi3_exit>
    1da2:	96 95       	lsr	r25
    1da4:	87 95       	ror	r24
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	99 f7       	brne	.-26     	; 0x1d90 <__mulhi3_loop>

00001daa <__mulhi3_exit>:
    1daa:	95 2f       	mov	r25, r21
    1dac:	80 2d       	mov	r24, r0
    1dae:	08 95       	ret

00001db0 <__prologue_saves__>:
    1db0:	2f 92       	push	r2
    1db2:	3f 92       	push	r3
    1db4:	4f 92       	push	r4
    1db6:	5f 92       	push	r5
    1db8:	6f 92       	push	r6
    1dba:	7f 92       	push	r7
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	ca 1b       	sub	r28, r26
    1dda:	db 0b       	sbc	r29, r27
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	09 94       	ijmp

00001de8 <__epilogue_restores__>:
    1de8:	2a 88       	ldd	r2, Y+18	; 0x12
    1dea:	39 88       	ldd	r3, Y+17	; 0x11
    1dec:	48 88       	ldd	r4, Y+16	; 0x10
    1dee:	5f 84       	ldd	r5, Y+15	; 0x0f
    1df0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1df2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1df4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1df6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1dfa:	b9 84       	ldd	r11, Y+9	; 0x09
    1dfc:	c8 84       	ldd	r12, Y+8	; 0x08
    1dfe:	df 80       	ldd	r13, Y+7	; 0x07
    1e00:	ee 80       	ldd	r14, Y+6	; 0x06
    1e02:	fd 80       	ldd	r15, Y+5	; 0x05
    1e04:	0c 81       	ldd	r16, Y+4	; 0x04
    1e06:	1b 81       	ldd	r17, Y+3	; 0x03
    1e08:	aa 81       	ldd	r26, Y+2	; 0x02
    1e0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e0c:	ce 0f       	add	r28, r30
    1e0e:	d1 1d       	adc	r29, r1
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	ed 01       	movw	r28, r26
    1e1c:	08 95       	ret

00001e1e <_exit>:
    1e1e:	f8 94       	cli

00001e20 <__stop_program>:
    1e20:	ff cf       	rjmp	.-2      	; 0x1e20 <__stop_program>
